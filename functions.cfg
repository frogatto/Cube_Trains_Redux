[functions]
	[function]
	args="n"
	name="recurse"
	formula="if(n = 0, 0, n + recurse(n-1))"
	[/function]
	[function]
	args="parent*"
	name="spawn_item"
	formula="if(unlocked_items, spawn( choose(unlocked_items, 1d1000) , parent.midpoint_x, parent.y, parent.facing))

	where unlocked_items = if(level.player.vehicle, level.player.vehicle.vars.unlocked_items, level.player.vars.unlocked_items) "

	#  if we want vehicle items AND player items when you're in a vehicle, then do the following:
	#where unlocked_items = if(level.player.vehicle, level.player.vehicle.vars.unlocked_items + level.player.driver.vars.unlocked_items, level.player.vars.unlocked_items) "
	[/function]


	[function]
	name="elastic_collision"
	args="a,b"
	#takes two objects as parameters, changes their velocities according to an elastic collision
	# note deep magic on if(a < b) - this compares the memory addresses, and is done to ensure collisions aren't calculated twice (once on each end of the collision).


	#formula=" [set(a, 'velocity_x', -1200 ), set(b, 'velocity_x', 1200) ]  "
#	formula=" [set(a, 'velocity_x', (a.velocity_x*1000 * (a.mass - b.mass)/(a.mass + b.mass) + (b.velocity_x*1000 * b.mass)/ (a.mass + b.mass))/1000 ), set(b, 'velocity_x', ((a.mass * a.velocity_x*1000)/(a.mass + b.mass) + b.velocity_x*1000 * (b.mass - a.mass )/(a.mass + b.mass))/10 ) ]"

	formula="[set(a, 'velocity_x', (momentum_x/2)/a.mass),
	          set(b, 'velocity_x', (momentum_x/2)/b.mass),
			  debug('collide ', momentum_x)]
			  where momentum_x = a.velocity_x*a.mass + b.velocity_x*b.mass"
	
	[/function]
[/functions]
