{
function: [
	{

		#determine the length between two points
		name: "length",
		args: "x, y, u, v",
		formula: "sqrt(ly^2 + lx^2) where lx = abs(x-u) where ly = abs(y-v)",
	},
	{

		#a convenience version of length; which gets the length between two objects' midpoints.
		name: "distance",
		args: "a, b",
		formula: "if(is_list(a), 
		length(a[0], a[1], b[0], b[1]), 
		length(a.midpoint_x, a.midpoint_y, b.midpoint_x, b.midpoint_y))",
	},
	{

		#a convenience function for the angle between two objects
		name: "angle_to",
		args: "a, b",
		formula: "angle(a.midpoint_x, a.midpoint_y, b.midpoint_x, b.midpoint_y, )",
	},
	{

		#since orbital motion is a frequent use of trig, we've made a general helper function.
		#this returns a vector [x,y] of our orbitee's position.
		#This would be at an angle "rot" on a circle centered on x, y, with diameter "dist".
		name: "orbit_obj",
		args: "x, y, rot, dist",
		formula: "debug_fn('orbit_obj() is deprecated, use orbit() instead.', 
			[(dist * cos(rot)) / 100 + x, (dist * sin(rot)) / 100 + y])",
	},
	{
		name: "angle_alpha",
		args: "a, b, c",
		formula: "acos(((b^2 + c^2 - a^2)*100)/(2*b*c))",
	},
	{
		name: "angle_beta",
		args: "a, b, c",
		formula: "acos(((a^2 + c^2 - b^2)*100)/(2*a*c))",
	},
	{
		name: "angle_theta",
		args: "a, b, c",
		formula: "acos(((a^2 + b^2 - c^2)*100)/(2*a*b))",
	},
],
}