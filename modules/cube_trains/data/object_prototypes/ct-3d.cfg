{
id: "ct-3d",
zorder: 0,
zsub_order: 0,
properties: {
	setToGrid: "def(crd) [ #takes a three-integer list, and sets screen position based on those.#
			set(self.x, lpfc[0]),
			set(self.y, lpfc[1]),
			set(self.z, lpfc[2]+crd[2]*5+self.vars.encloses), #5z for additional layers, to give some breathing room for the raises.#
			set(self.vars.location, crd),
			] where lpfc = level_position_from_coordinate(crd)",
	level_position_from_coordinate: "def(crd) [
			level.player.width*(crd[0]+crd[1]),
			level.player.height*(-crd[0]+crd[1])-level.player.tall*crd[2],
			crd[2]-crd[0]+crd[1]]", #4z for additional rows, for breathing room for the raises.
	
	at_position: "potentially_at_position(level.chars)",
	potentially_at_position: "def(chars) potentially_at_coord(vars.location, chars)",
	
	at_coord: "def(coord) potentially_at_coord(coord, level.chars)",
	potentially_at_coord: "def(coord, chars) filter(chars, 'lch', lch.vars.group and lch.vars.location = coord and lch != context.self)",
	
	applyRotateCustom: "def(delta, obj) 0", #delta is the direction (you can feed it to getRotateZ, after your vars.position, to get the rotated position) and obj is the object which was rotated. This may or may not be self, depending if we have a different object we need to rotate to, as defined in vars.cw and vars.ccw.
	applyRotate: "def(delta) if(vars.cw and vars.ccw, 
			[	fire_event(self, 'remove'), 
				robj.setToGrid(dest),
				robj.set_branch(self.vars.branch),
				applyRotateCustom(delta, robj),
				add_object(robj),
			]	where robj = object(if(delta < 0, vars.cw, vars.ccw)), 
			[	setToGrid(dest),
				applyRotateCustom(delta, self),
			]) where dest = getRotateZ(location, delta)",
	getRotateZ: "def(crd, delta) [-1*delta*crd[1], delta*crd[0], crd[2]]",
	
	set_alpha: "def(val) map(objs, 'obj', set(obj.alpha, val)) where objs = vars.overlays + [self]",
	
	set_bright: "def(val) map(objs, 'obj', [set(obj.green, val),
											set(obj.red, val),
											set(obj.blue, val)]) where objs = vars.overlays + [self]",
											
	
},
vars: {
	location: [0,0,0],
	height: 124,
	width: 216,
	tall: 124,
	overlays: [],
},
}