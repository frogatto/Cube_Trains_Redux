{
id: "ct-3d",
zorder: 0,
zsub_order: 0,
properties: {
	setToGrid:"def(crd) [#Takes a three-integer list (x/y/z coordinates), and sets screen position based on those.#
			set(self.x, lpfc[0]),
			set(self.y, lpfc[1]),
			set(self.z, lpfc[2]+crd[2]*5+self.vars.encloses), #5z for additional layers, to give some breathing room for the raises.#
			set(self.vars.location, crd),
			] where lpfc = level_position_from_coordinate(crd)",
	level_position_from_coordinate: "def(crd) [
			level.player.width*(crd[0]+crd[1]),
			level.player.height*(-crd[0]+crd[1])-level.player.tall*crd[2],
			crd[2]-crd[0]+crd[1]]", #4z for additional rows, for breathing room for the raises.
	
	at_position: "potentially_at_position(level.chars)",
	potentially_at_position: "def(chars) potentially_at_coord(vars.location, chars)",
	
	at_coord: "def(coord) potentially_at_coord(coord, level.chars)",
	potentially_at_coord: "def(coord, chars) filter(chars, 'lch', lch.vars.group and lch.vars.location = coord and lch != context.self)",
	
	applyRotateCustom: "def(delta, obj) 0", #delta is the direction (you can feed it to getRotateZ, after your vars.position, to get the rotated position) and obj is the object which was rotated. This may or may not be self, depending if we have a different object we need to rotate to, as defined in vars.cw and vars.ccw.
	applyRotate: "def(delta) if(vars.cw and vars.ccw, 
			[	fire_event(self, 'remove'), 
				robj.setToGrid(dest),
				robj.set_branch(self.vars.branch),
				applyRotateCustom(delta, robj),
				add_object(robj),
			]	where robj = object(if(delta < 0, vars.cw, vars.ccw)), 
			[	setToGrid(dest),
				applyRotateCustom(delta, self),
			]) where dest = getRotateZ(location, delta)",
	getRotateZ: "def(crd, delta) [-1*delta*crd[1], delta*crd[0], crd[2]]",
	
	#/Pos/ is the relative z-location from the cursor, and /vm/ is a boolean indicating if we're in volumetric mode. In volumetric mode, we tweak alpha so that we can see the active layer fully, and the ghost of the layer above it; as opposed to non-volumetric mode where we just show the base active layer. Volumetric mode is activated when we are placing a piece which is volumetric and we ourselves are volumetric.#
	set_depth_effect: "def(pos, vm) 
		set(self.alpha, 256+256*(pos+render_offset(vm)-(encloses)*0.5))",
	render_offset: "def(vm) 0",
	
	set_alpha: "def(val) map(objs, 'obj', set(obj.alpha, val)) where objs = vars.overlays + [self]",
	
	set_bright: "def(val) map(objs, 'obj', [set(obj.green, val), //incriments of 40 seem best
											set(obj.red, val),
											set(obj.blue, val)]) where objs = vars.overlays + [self]",
											
	
},
vars: {
	location: [0,0,0],
	height: 62,
	width: 108,
	tall: 62,
	overlays: [],
},
}