{
#This is the prototype for draggable objects.
#An object with this prototype has access to the various mouse_over events, as well as mouse_start_drag, track_to_cursor (we're in the act of dragging), mouse_end_drag, and drop (we've been dropped on some widget(s), for each widget we'll call the event with each widget as 'arg'). The last two events don't need prototyping. This object also fires a 'dropped_on' event, with self as the arg, in the widget(s) that the mouse is over. If you want to do something when the object is clicked, but not dragged, use the mouse_cancel_drag event.
id: "drag_input",
prototype: ["base_input"],

consts: {
	am_drag: 1,
	},

on_mouse_over: "set(self.brightness, 370)",
on_mouse_not_over: "set(self.brightness, 255)",

on_mouse_start_drag: "[
	set(vars.mouse_drag_offset, list_subtract([self.midpoint_x, self.midpoint_y], level.player.adjusted_mice[0])),  #TODO: One mouse supported. to fix, set the cursor index as a variable from player_input.cfg, and use it for adjusted_mice instead of 0.#
	fire_event('track_to_cursor'),
	]",

on_track_to_cursor: "if(not tmp.end_mouse_drag, [
		setAnchor(5, list_add(vars.mouse_drag_offset, level.player.adjusted_mice[0])), 
		schedule(1, fire_event('track_to_cursor')),
	], schedule(1, set(tmp.end_mouse_drag, 0))
	)",

on_mouse_end_drag: "[
	set(tmp.end_mouse_drag, 1),
	if(size(over_widgets), [
		transform(over_widgets, [
			fire_event('drop', v),
			fire_event(v, 'dropped_on', self),
			]),
		])
		where over_widgets = filter(level.player.vars.monitor_over, 'mo', mo != self),
	]",

on_create: "[swallow_event(),
	add(level.player.vars.widgets, [self]),
	if(not vars.reference_anchor, set(vars.reference_anchor, getCameraAnchor(5))),
	fire_event('update_position'),
	]",
}