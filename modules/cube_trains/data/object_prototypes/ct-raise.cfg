{
id: "ct-raise",
prototype: ["ct-track"],

properties: {
	additionalPlacementRequirementsMet: "def(chars) 
		if(('support' in groups1 and 'support' in groups2)
				where groups2 = groups_at(list_add(location, [0,0,-1]), chars)
				where groups1 = groups_at(list_add(location, [0,0,0]), chars),
			if('tips' in groups0
					where groups0 = groups_at(list_add(location, [0,0, 1]), chars),
				{'ok' -> 1},
				{'ok' -> 0, 'error' -> 'Something is blocking the tile above; can`t go up.'}),
			{'ok' -> 0, 'error' -> 'No proper support below to build on.'}
			)",
	additionalBlocks: "def(chars)
		[{'id' -> self.type + '.tips', 'pos' -> [0,0,1]}] +
		if(not 'support' in groups1, [{'id' -> 'ct-legs-5', 'pos' -> [0,0,0]}],[])
		where groups1 = groups_at(list_add(location, [0,0,0]), chars)",
	},

vars: {
	group: ["track", "raise"],
},

on_train_enter: "[
	switch(vars.tracks[0],
	   15, [schedule(6, set(arg.z, self.zorder+6*(1-arg.vars.track))), 
			set(arg.vars.lockrot, if(arg.vars.track,275,95)),
	], 35, [schedule(6, set(arg.z, self.zorder+6*arg.vars.track)),
			set(arg.vars.lockrot, if(arg.vars.track,5,185)),
	], 75, [schedule(10, set(arg.z, self.zorder+7)),
			set(arg.vars.lockrot, if(arg.vars.track,185,5)),
	], 95, [schedule(10, set(arg.z, self.zorder+7)),
			set(arg.vars.lockrot, if(arg.vars.track,95,275)),
	]),
	]",
	
on_train_exit: "set(arg.vars.lockrot, 0)",

}