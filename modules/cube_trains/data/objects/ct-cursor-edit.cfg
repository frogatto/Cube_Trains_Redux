{
id: "ct-cursor-edit",
prototype: ["ct-cursor"],
is_human: true,

#pieces
properties: {
	block_value: "def(objs, value) map(objs, 'obj', obj.change_save_val(value))",
	
	next_branch: "set(self.vars.target_value, 
			switch(self.vars.target_value,
				'normal',  'green',
				'green', 'red',
				'red', 'normal'))",
				
	additionalPlacementRequirementsMet: "def(obj, at_pos) 1",
	
	is_in_limits: "def(loc) 1",
	
	tools: "{ #These are the tools which appear in the toolboxs to the 1st of the screen. There is only one atm, called 'toolbox'.#
			'toolbox' -> map(
				[	'block-5', 
					'windows-large-5', 
					'tunnel-1', 
					'legs-5', 
					'bridge-tiny-19', 
					'metaraise-1', 
					'metatrack-19', 
					'metatrack-13', 
					#'black-5', #
					'awning-1', 
					'awning-5', 
					'square-shadow-5',
					'tree1-center-1',
					'edge-hedge-1',
					'group-spawner',
				],'tool_name', object('ct-button-{tool_name}'))}",
				
	#utils
	ubet: "utility_build_on_every_tile('ct-square-shadow-5', 2)",
	utility_build_on_every_tile: "def(type, margin) apply_placement_delta(get_placement_delta( #'MY LIMITS max->6, 4, 0,min->-4, -2, -1#
		flatten(
			map(range(mins[0], maxes[0]), 'xvar',
				map(range(mins[1], maxes[1]), 'yvar',
					map(range(mins[2], maxes[2]), 'zvar',
						{'id' -> type, 'pos' -> [xvar, yvar, zvar]}	))))))
	where maxes = list_single_add(vars.limits.max, margin+1)
	where mins = list_single_subtract(vars.limits.min, margin)
	",
},

# See revision d9d130c2d4a579664acf9ede7b23cab14e48a04d for shader example.
vars: {
	pieces: [
		"ct-block-5", "ct-black-5", "ct-windows-large-5", "ct-ground-support-5", "ct-square-shadow-5",
		"ct-legs-5", "ct-bridge-tiny-19", "ct-bridge-tiny-37", 
		"ct-tunnel-1", "ct-tunnel-3", "ct-tunnel-7", "ct-tunnel-9", 
		"ct-metatrack-19", "ct-metatrack-37", "ct-metatrack-13", "ct-metatrack-17", "ct-metatrack-39", "ct-metatrack-79", 
		"ct-metaraise-1", "ct-metaraise-3", "ct-metaraise-7", "ct-metaraise-9", 
		"ct-tree1-center-1", "ct-tree1-center-3", "ct-tree1-center-7", "ct-tree1-center-9", 
		"ct-edge-hedge-1", "ct-edge-hedge-3", "ct-edge-hedge-7", "ct-edge-hedge-9", 
		"ct-awning-1", "ct-awning-3", "ct-awning-5", "ct-awning-7", "ct-awning-9",
		"ct-group-spawner",
		],
	edit_all: 1,
},
on_block_alt: "fire_event(arg, 'ctrl_select')",

# 	on_debug2 = "[
# 		map(range(1*304), 'inc',
# 			if(not crd['error'],
# 				schedule(inc/10%7, [set(dbg.red, 0), add_object(dbg)] where dbg = object('ct-cursor-edit.dbg', crd['pos'][0],crd['pos'][1],facing)),
# 			) where crd = at_position[0].solve(inc,1,0)),
# 		map(range(1*304), 'inc',
# 			if(not crd['error'],
# 				schedule(inc/10%7, [set(dbg.blue, 0), add_object(dbg)] where dbg = object('ct-cursor-edit.dbg', crd['pos'][0],crd['pos'][1],facing)),
# 			) where crd = at_position[0].solve(inc,0,1)),
# 			]"
on_help: "debug('\n = Controls: =\nArrow keys to move horisonally, left ctrl and z to move vertically, - and  to rotate view. <, ; to change selection, menu key cycles colour, right ctrl to place and q to remove blocks. a, o, and e to change values for blocks with the knob Ð¤ indicator. You can [U]ndo and [R]edo most actions. f3 to print a save list to console. (This list may be placed in this file`s* to_load variable to restore it.)\n* objects/experimental/cube_trains/ct-cursor-edit.cfg\n\n = Quick-Saving: =\nf3 also quick-saves the map, and f4 quick-loads it. While quick-saves are retained between sessions, they only do so when Frogatto has exited normally. In event of a crash, your work will be lost if you`ve only quick-saved it!\n\n = Keyboard Layout: =\nPress numpad 2 for dvorak keyboard layout mode, where the alphanumeric keys are \ = select left, z = select right, apostrophe and / = rotate view, x = delete, s and d change some blocks` values, and / = move up.')",
animation: [
	{
		image: "experimental/cube trains/0029.png",
		rect: [0,0,255,255],
		id: "grey",
	},
	{
		image: "experimental/cube trains/0029.png",
		rect: [0,0,255,255],
		id: "red",
	},
	{
		image: "experimental/cube trains/0029.png",
		rect: [0,0,255,255],
		id: "blue",
	},
],
}