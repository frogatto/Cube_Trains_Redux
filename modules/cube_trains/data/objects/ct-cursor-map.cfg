{
id: "ct-cursor-map",
prototype: ["player_input"],
is_human: true,
zorder: 5,

properties: {
	cdim: "list_single_divide(level.camera_position[2:4], 2)",
	},

vars: {
	saved_maps: {},
	},
	
consts: {
	mapSize: ["@eval 2668/2","@eval 1742/2"],
	edit_mode: 0,
	},
	
on_load: "[
	if(can_load_game() and (not vars.game_started or consts.edit_mode), 
		[load_game('instant'),],	//Remember to set vars.game_started to 0 in titlescreen.cfg.
		[fire_event('enter_level'),
		if(not consts.edit_mode, set(alpha, 0)),
		]),
	]",

on_ctrl_tongue: "if(consts.edit_mode, 
	spawn(	'ct-map-marker', 
			midpoint_x, midpoint_y, 1, 
			[set(child.vars.reference_anchor, [midpoint_x,midpoint_y]),
			set(child.vars.anchorPoint, 5),
			]))",

on_process: "[proto_event('player_input', 'process'),
	if(ctrl_right, set(midpoint_x, constrain(0+margin, midpoint_x+velocity, consts.mapSize[0]-margin))),
	if(ctrl_left, set(midpoint_x, constrain(0+margin, midpoint_x-velocity, consts.mapSize[0]-margin))),
	if(ctrl_up, set(midpoint_y, constrain(0+margin, midpoint_y-velocity, consts.mapSize[1]-margin))),
	if(ctrl_down, set(midpoint_y, constrain(0+margin, midpoint_y+velocity, consts.mapSize[1]-margin))),
	set(level.lock_screen, [	constrain(0+cdim[0], level.player.midpoint_x, consts.mapSize[0]-cdim[0]), #These 'magic' numbers here are the large bounds of the map object. The map graphic starts at [0,0] and goes to [1334,871].#
								constrain(0+cdim[1], level.player.midpoint_y, consts.mapSize[1]-cdim[1])]),
	] where velocity = 25
	where margin = img_h+10",

on_enter_level: "[
	transform(level.chars, if(v.vars.is_widget or v.type = 'ct-map-marker.line', remove_object(v))),
	transform(unique(vars.widgets), transform([v] + v.vars.targets, [add_object(v), fire_event(v, 'enter_level')])),
	schedule(2, transform(unique(vars.widgets), [fire_event(v, 'enter_level')])),
	schedule(2, fire_event('done_enter_level')),
	set(vars.game_started, 1),
	]",

on_done_enter_level: "schedule(3, [
	save_game(),
	if(not find(filter(level.chars, value.type = 'ct-map-marker'), value.animation != 'green') or won_game, [
		set(won_game, true),
		fire_event('roll_credits'),
		]),
	])",

xon_roll_credits: "[
	screen_flash([255,255,255,0], [0,0,0,10], 10000),
	schedule(50, [
		screen_flash([0,0,0,255], 10),
		spawn('ct-credits-ct-logo', level.camera_position[2]/3, level.camera_position[3]/2, 0, [set(event_handlers.end_credits, 'die()')]),
		schedule(20, [
			screen_flash([0,0,0,255], 10),
			]),
		]),
	]",

on_ctrl_jump: "fire_event('roll_credits')",

on_roll_credits: "[
	spawn('ct-credits-whiteness', 0, 0, 1, [	set(child.alpha, 0),
												set(child.event_handlers.end_credits, 'die()'),
												set(child.event_handlers.process, 'add(alpha, 100)')]),
	schedule(3, [
		spawn('ct-credits-whiteness', 0, 0, 1, [
			set(child.animation, 'grey'),
			set(child.zorder, 21),
			schedule(ff or blink_time, [
				set(child.alpha, 0),
				schedule((ff or wait_time)+1, remove_object(child)),
				spawn('ct-credits-ct-logo', level.camera_position[2]/2, level.camera_position[3]/3, 1, [
					set(child.event_handlers.end_credits, 'die()'),
					set(child.label, 'credits-logo'),
					]),
				schedule(ff or wait_time, [
					spawn('ct-credits-whiteness', 0, 0, 1, [
						set(child.zorder, 21),
						set(child.animation, 'grey'),
						schedule(ff or blink_time, [
							set(child.alpha, 0),
							set(child.event_handlers.end_credits, 'die()'),
							spawn('text_controller', level.camera_position[2]/2, level.camera_position[3]/3+120, 1, [
								set(child.use_absolute_screen_coordinates, true),
								child.set_text({'text':'A David D. Roberts Game', align:'center'})]),
							schedule(ff or wait_time, [
								map(range(size(credit_list)), schedule(130*value, movingText(credit_list[value]))) // #credit-timing
									where credit_list = [	['Testing + Consulting', 'Richard Kettering (Jetrel)'],
															['Foley', 'Adam Rinsky (ActionJack)'],
															['Core Engine Improvement', 'David White (Sirp)'],
															['General Engine Improvement', 'Kristina Simpson (Krista^)'], 
															['Anura game engine from', 'Frogatto and Friends'], ],
								]),
							set(child.event_handlers.end_credits, 'die()'),
							schedule(700, [ // #credit-timing
								movingText(['', 'Thanks, everyone!']),
								schedule(160, [ // #credit-timing
									movingText(['And you--', 'Thanks for playing.']),
									schedule (160, [ // #credit-timing
										// Game Over
										// Move Up
										// *Final Score*
										]),
									]),
								]),
							]) where movingText = def(texts) [
									spawn('text_controller', level.camera_position[2]/2-75, level.camera_position[3]/1.5-10, 1, [
										common_commands(child),
										child.set_text({'text':texts[0]})]),
									spawn('text_controller', level.camera_position[2]/2-55, level.camera_position[3]/1.5+10, 1, [
										common_commands(child),
										child.set_text({'text':texts[1], size:2})]),
									] where common_commands = def(child) [
										schedule(display_duration, remove_object(child)),
										set(child.use_absolute_screen_coordinates, true),
										map(range(display_duration), 'frame', 
											schedule(frame, [
												set(child.text_alpha, 
													constrain(0, 500*sin(tween(0,180, frame/decimal(display_duration))), 255)),
												set(child.x, (child.x + 
														if(frame < display_duration/2, 
															max(tween_in, middle),
															min(tween_out, middle)) - domain/2
														where tween_in = 	tween(0, domain, sin(frame/decimal(display_duration)*180)	) + 25
														where tween_out = 	tween(0, domain, 1-sin(frame/decimal(display_duration)*180)	) - 25
														where middle = 		tween(0+15, domain-15, frame/decimal(display_duration)			)
													)),
												])),	
									] where display_duration = 140 // #credit-timing
									where domain = 200,
						]),
					]),
				]),
			]),
		]),
	] where
	ff = 2,
	blink_time = 9,
	wait_time = 17,
	text_display = 40",

animation: [
	{
		scale: 1,

		"@base": true,

	
	
	
	},
		{
			"id": "normal",
			"image": "effects/particles.png",
			"rect": [23,197,49,224]
		},
],
}