{
id: "ct-map-marker",
prototype: ["button_input"], #Change the am_button/am_drag bit in the level.cfg too.
zorder: 0,

properties: {
	at: "[midpoint_x, midpoint_y]",
	connected: "targeted_by + targets",
	},

vars: {
	level: '',
	text: '',
	#connections
	targeted_by: [],
	targets:	 [],
	},
	
consts: {
	levels: "@include modules/cube_trains/data/level/additional_maps.ffl",
	},
	
on_load: "text(vars.text, 'white_outline', 1, 1)",
	
on_mouse_start_drag: "[proto_event('drag_input', 'mouse_start_drag'), set(tmp.origin, [midpoint_x, midpoint_y])]", #Store where we started dragging from, might be useful.
	
on_track_to_cursor: "[proto_event('drag_input', 'track_to_cursor'), transform(connected, v.stretch(v.vars.connects[0].at, v.vars.connects[1].at))]",
	
on_mouse_cancel_drag: "if(am_drag, speech_dialog(
	narrator,	['Choose an action.']
				+ flex_sum(
					transform(
						filter(transform(consts.levels, v.id), name,
							not name in existing), 
						['Set level to {v}.', [
							set(vars.level, v),
							set(vars.text, newText),
							text(newText, 'white_outline', 1, 1),
							] where newText = '\n\n\n' + v])
					+ [['No level link.', [
						set(vars.level, '<level name here>'),
						text('', 'white_outline', 1, 1),
					]]]
					+ [['Remove this marker.', [
						transform(targets+targeted_by, fire_event(v, 'delete', self)),
						deactivate_widget,
						die(),
					]]]
					+ [['Remove outgoing line.', [
						if(size(vars.targets), fire_event(vars.targets[size(vars.targets)-1], 'delete', self))
					]]]
					+ [['Cancel.', [
					]]]
					, [])
					where existing = transform(level.chars, v.vars.level)
					,
	))",
	
on_drop: "[
	#Add line between objects…#
	line.stretch(tmp.origin, arg.at),
	schedule(2, fire_event(line, 'load')), //Sometimes, for whatever reason, when we place lines they don't work right the first frame. This is the best of both worlds, since it'll either work right or be corrected the next frame.
	add_object(line),
	add(targets, [line]),
	add(arg.vars.targeted_by, [line]),
	set(line.vars.connects, [self, arg]),
	
	#… and reset our position.#
	set(vars.reference_anchor, tmp.origin),
	fire_event('update_position'),
	] where line = object('{self.type}.line')",
	
#on_dropped_on: "add(targeted_by, [arg])",

on_mouse_not_left_down: "if(am_button, [
	teleport('blank.cfg'),
	spawn_player('ct-cursor-play', 0, 0, 1, [
		set(child.vars.toLoad, newLevel),
		set(child.vars.mainMapMarker, self),
		set(child.vars.mainMapPlayer, level.player),
		]),
	] where newLevel = find(consts.levels, 'Level', Level.id = self.vars.level))",

animation: [{
	id: "normal",
	image: "experimental/cube trains/custom/ct-map-marker.png",
	rect: [0,0,22,22],
	}],
	
object_type: { #This is a minimal version of frogatto's angled_rope_controller.
	id: "line",
	zorder: -1,
	ignore_collide: true,
	no_compile_image: "experimental/cube trains/custom/map-ropes.png",
	always_active: true,

	properties: {
		stretch: "def(ptA, ptB) if(ptA and ptB, [
			set(self.vars.ptA, ptA), set(self.vars.ptB, ptB),
			set(self.rotate, angle_to(ptA, ptB)+90),
			set_mid(self, list_tween(ptA, ptB, 0.5)),
			set(self.custom_draw, [0, [0,top], 1, [0,top], 2, [0,bot], 3, [0,bot]])
				where top = self.img_h-distance(ptA, ptB)/2 - img_h/2 #Great… yet another formula I don't understand.#
				where bot = distance(ptA, ptB)/2-self.img_h + img_h/2,
			#set(upside_down, -1),#
			])",
		},
		
	on_create: "set(animation, 'green-red')",
	
	on_load: "stretch(ptA, ptB)", #Something's not saved, so we need to call this function again when we load.
	
	on_delete: "[
		transform([ptA, ptP], [	set(v.vars.targeted_by, filter(v.vars.targeted_by, 'tgt', tgt != self)),
								set(v.vars.targets, filter(v.vars.targets, 'tgt', tgt != self))]),
		set(ptA, 0), set(ptB, 0),
		die(),
		]",
	
	animation: [{
		id: "green-red",
		image: "experimental/cube trains/custom/map-ropes.png",
		x:0, y:0, w:2, h:256,
		},{
		id: "green-yellow",
		image: "experimental/cube trains/custom/map-ropes.png",
		x:4, y:0, w:2, h:256,
		},{
		id: "red-yellow",
		image: "experimental/cube trains/custom/map-ropes.png",
		x:8, y:0, w:2, h:256,
		},{
		id: "normal",
		image: "experimental/cube trains/custom/map-ropes2.png",
		x:0, y:0, w:2, h:16,
		},{
		id: "yellow",
		image: "experimental/cube trains/custom/map-ropes2.png",
		x:4, y:0, w:2, h:16,
		},{
		id: "red",
		image: "experimental/cube trains/custom/map-ropes2.png",
		x:8, y:0, w:2, h:16,
		},{
		id: "green",
		image: "experimental/cube trains/custom/map-ropes2.png",
		x:12, y:0, w:2, h:16,
		}],
	}
}