{
	"animation": [
		{
			"duration": 14,
			"frames": 14,
			"frames_per_row": 4,
			"id": "normal",
			"image": "units/woodsman-idle.png",
			"pad": 4,
			"rect": [2,2,73,73],
            "scale": 1
		}
	],
	"editor_info": { 
		category: "human-peasants" 
	},
    
    "consts": {
        TILE_SIZE_X: 72,
        TILE_SIZE_Y: 72,
        MOVES_PER_TURN: 3,
        
        "weight_map": {
            "savannah": 1,
            "regular_dirt": 1,
            
        },
    },
    
    "properties": {
        pt_in_rect: "def (px, py, rr) 
            if(px >= rr[0] and px < rr[0]+rr[2] and py >= rr[1] and py < rr[1]+rr[3], true, false)",
        "end_of_turn": "[
            set(vars.moves_left, consts.MOVES_PER_TURN),
            calculate_possible_moves(vars.graph, consts.MOVES_PER_TURN),
        ]",
        "create_wg_from_level": "def(hmap) 
            weighted_graph(directed_graph(flatten(map(hmap, map(value, col, col))), filter(map(HEX_DIRECTIONS, v[value]),hm,hm)),1)",
		// XXX replace 1 in the above expression with something that depends on the terrain type.
        interpolate: "def(x1,x2) [(x2-x1)*v/25.0+x1 | v <- range(0,25)]",
        interpolate_path: "def(pp) flatten(map(pp[1:], interpolate(pp[index],value)))",
        "plot_hex_path": "def(n1,n2) unzip(map(a_star_search(vars.graph, n1, n2, 1), tile_to_pixel_coords(value.x, value.y, 'bounding')))",
		"calculate_possible_moves": "def(graph, moves)[
			set(tmp.possible_moves, possibles),
			map(possibles, [set(value.shader.vars.do_highlight,1),set(value.shader.vars.do_grayscale,0)]),
			map(filter(graph.vertices, not (value in possibles)), [set(value.shader.vars.do_highlight,1),set(value.shader.vars.do_grayscale, 1)]),
			] where possibles = path_cost_search(graph, hex_get_tile_at(level.hexmap,mid_x,mid_y), moves) 
		",
    },
    
    "vars": {
        "moves_left": 3,
        "graph": null,
    },
    
    "tmp": {
        "selected": false,
        "moving": false,
    },
    
    "on_end_turn": "end_of_turn",
    
	"hitpoints": 1,
	"id": "woodsman",
	"mass": 80,
	"on_end_anim": "set(animation, 'normal')",
    "on_create": "[
        //debug('Loaded level graph: ${size(graph.vertices)} vertices, ${size(graph.edges)} edges.'), 
        set(vars.graph, graph),
    ] where graph=create_wg_from_level(level.hexmap.map)",
    
    on_schedule_finished: "[
        set(tmp.moving, false),
		calculate_possible_moves(vars.graph, vars.moves_left),
    ]",
    
    "on_mouse_up*": "[
        if(pt_in_rect(mouse_x,mouse_y,tile_to_pixel_coords(ht.x, ht.y, 'bounding')), [
                set(tmp.selected, true),
                calculate_possible_moves(vars.graph, vars.moves_left),
            ], [
                if(tmp.selected and tile_at_mouse in tmp.possible_moves, [
                    set(tmp.moving, true),
                    set(x_schedule, interpolate_path(pp[0])),
                    set(y_schedule, interpolate_path(pp[1])),
                    set(schedule_expires, true),
                    add(vars.moves_left, -size(pp[0])),
                ], [
                set(tmp.selected, false),
                map(vars.graph.vertices, [set(value.shader.vars.do_highlight,0),set(value.shader.vars.do_grayscale,0)]),
            ])  where pp=plot_hex_path(hex_get_tile_at(level.hexmap,mid_x,mid_y), tile_at_mouse)
                where tile_at_mouse=hex_get_tile_at(level.hexmap,mouse_x,mouse_y)
        ]) where ht=hex_get_tile_at(level.hexmap,mid_x,mid_y)
    ]",
    
    "shader": {
        "program": "inline_test",
		"draw": "[set(uniforms.u_mvp_matrix, mvp_matrix), set(uniforms.u_color, color)]",
		"create": "[set(uniforms.u_tex_map, 0)]",
    },
}
