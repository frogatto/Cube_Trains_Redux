{
    "shaders": {
		////////////////////////////////////////////////////////////////
		// vertex shaders
        "vertex": {
            "sun_test": "shaders/sun_test.vert",
            "inline_test_v": "
                uniform mat4 u_mvp_matrix;
                attribute vec4 a_position;
                attribute vec2 a_texcoord;
                varying vec2 v_texcoord;
                void main()
                {
                    v_texcoord = a_texcoord;
                    gl_Position = u_mvp_matrix * a_position;
                }",
			
			"particle1_v": "
				uniform mat4 u_mvp_matrix;
				uniform float u_time;
				uniform vec3 u_centerPosition;
				uniform float u_lifetime;
				attribute float a_start_time;
				attribute vec3 a_startPosition;
				attribute vec3 a_endPosition;
				varying float v_lifetime;
				void main()
				{
					if(u_time >= a_start_time) {
						vec4 vector;
						vector.xyz = a_startPosition + ((u_time-a_start_time) * a_endPosition) + u_centerPosition;
						vector.w = 1.0;
						gl_Position = u_mvp_matrix * vector;
						v_lifetime = 1.0 - ((u_time - a_start_time) / u_lifetime);
						v_lifetime = clamp(v_lifetime, 0.0, 1.0);
					} else {
						//gl_Position = vec4(-3000, -3000, 0, 0);
						vec4 vector;
						vector.xyz = a_startPosition + ((u_lifetime-a_start_time+u_time) * a_endPosition) + u_centerPosition;
						vector.w = 1.0;
						gl_Position = u_mvp_matrix * vector;
						v_lifetime = 1.0 - ((u_lifetime-a_start_time+u_time) / u_lifetime);
						v_lifetime = clamp(v_lifetime, 0.0, 1.0);      
					}
					gl_PointSize = (v_lifetime * v_lifetime) * 10.0;
				}",
        },
		
		////////////////////////////////////////////////////////////////
		// fragment shaders
        "fragment": {
            "sun_test": "shaders/sun_test.frag",
            
            "inline_test_f": "
                uniform sampler2D u_tex_map;
				uniform vec4 u_color;
				varying vec2 v_texcoord;
                void main()
                {
                    gl_FragColor = texture2D(u_tex_map, v_texcoord) * u_color;
                }",
                
			"particle1_f": "
				#ifdef GL_ES
				precision mediump float;
				#endif
				uniform vec4 u_color;
				uniform sampler2D s_texture;
				varying float v_lifetime;
				void main()
				{
					vec4 texColor;
					texColor = texture2D(s_texture, gl_PointCoord);
					gl_FragColor = vec4(u_color) * texColor;
					gl_FragColor.a *= v_lifetime;
				}",
				
            "water1_f": "
				#ifdef GL_ES
				precision highp float;
				#endif

				uniform float time;
				uniform vec2 resolution;
				uniform sampler2D tex;

				void main(void) {
					vec2 cPos = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;
					float cLength = length(cPos);

					vec2 uv = gl_FragCoord.xy/resolution.xy+(cPos/cLength)*cos(cLength*12.0-time*4.0)*0.03;
					vec3 col = texture2D(tex,uv).xyz;

					gl_FragColor = vec4(col,1.0);
				}",
		},
	},
    
    "programs": [
        {
            "name": "sun_test", 
            "vertex": "sun_test", 
            "fragment": "sun_test",
        },
        {
            "name": "inline_test", 
            "vertex": "inline_test_v", 
            "fragment": "inline_test_f",
            "attributes": {
                "vertex": "a_position",
                "texcoord": "a_texcoord",
            },
        },
		{
			"name": "particle1",
			"vertex": "particle1_v",
			"fragment": "particle1_f",
		},
    ],
}