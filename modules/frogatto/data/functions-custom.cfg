[
	#three functions to help with powerup testing
	{
		args: "level",
		name: "shooting",
		formula: "set(level.player.driver.unlocked_items, ['powerup_shooting', 'points_cube'])",
	},
	{
		args: "level",
		name: "invincible",
		formula: "set(level.player.driver.unlocked_items, ['powerup_invincible', 'points_cube'])",
	},
	{
		args: "level",
		name: "reflexes",
		formula: "set(level.player.driver.unlocked_items, ['powerup_reflexes', 'points_cube'])",
	},
	{
		args: "level,n",
		name: "score",
		formula: "set(level.player.vars.score, level.player.vars.score + n)",
	},
	{
		args: "level,n",
		name: "gold",
		formula: "[
			if(level.player.driver.coins_total_obtained + n >= 10, achievement('pocket_money')),
			if(level.player.driver.coins_total_obtained + n >= 1000, achievement('numismatologist')),
			if(level.player.driver.coins + n >= 99999,
				[/*achievement('speed_trader'),*/
				set(level.player.driver.coins, 99999),
				set(level.player.vars.gold_counter, 99999-level.player.driver.coins)],
				[add(level.player.driver.coins, n),
				add(level.player.driver.coins_total_obtained, n),
				add(level.player.vars.gold_counter, n)]
			),
			set(level.player.vars.last_got_gold, level.player.cycle),
			fire_event(level.player,'display_gold')]",
	},
	{
		args: "parent*",
		name: "spawn_item",
		formula: "if(level.player.difficulty < level.player.difficulty_challenging or 1d4=4,
			if(unlocked_items, spawn( choose(unlocked_items, 1d1000) , parent.midpoint_x, parent.y, parent.facing, [set(velocity_x, velocity_x/6 +1d600-300), set(velocity_y, velocity_y/6)])))
			where unlocked_items = filter(level.player.vars.unlocked_items, 'item', if(level.player.hitpoints = level.player.max_hitpoints and item = 'heart_object', 0, 1))",
	},

	#  if we want vehicle items AND player items when you're in a vehicle, then do the following:
	#where unlocked_items = if(level.player.vehicle, level.player.vehicle.vars.unlocked_items + level.player.driver.vars.unlocked_items, level.player.vars.unlocked_items) "
	{
		name: "register_kill",
		args: "obj",
		formula: "if(obj.level.player.vars.achievement_kill_chain, [
			[if(time() - kc[size(kc)-4][1] < 10, achievement('rampage')),
			if(kc[15][0].type = kc[14][0].type and
			kc[15][0].type = kc[13][0].type and
			kc[15][0].type = kc[12][0].type and
			kc[15][0].type = kc[11][0].type and
			kc[15][0].type = kc[10][0].type and
			kc[15][0].type = kc[9][0].type and
			kc[15][0].type = kc[8][0].type and
			kc[15][0].type = kc[7][0].type and
			kc[15][0].type = kc[6][0].type and
			kc[15][0].type = obj.type, achievement('grudge'))] where kc = obj.level.player.vars.achievement_kill_chain,
			set(obj.level.player.vars.achievement_kill_chain, slice(obj.level.player.vars.achievement_kill_chain, 1, 16) + [[obj, time()]])
			],
			debug('Warning: Could not register kill. (in functions-custom.cfg)'))",
	},
	
	{
		name: "splash_effect",
		args: "obj",
		formula: "if(obj.underwater and obj.water_bounds,
				[if(abs(obj.water_bounds[1] - obj.midpoint_y) > 40,
					spawn('water_splash_underwater_big', obj.midpoint_x, obj.midpoint_y, if(1d2=2,obj.facing,-obj.facing)),
					spawn('water_splash', obj.midpoint_x, obj.water_bounds[1]+10, if(1d2=2,obj.facing,-obj.facing))),
				sound('water-enter.ogg'), ])",
	},
	{
		name: "death_burst",
		args: "obj",
		formula: "[if(obj.underwater,
			splash_effect(obj),
			spawn('die_cloud', obj.midpoint_x, obj.midpoint_y, obj.facing))]",
	},
	{

		#wrapped version of death_burst that tracks death for achievements
		name: "death_burst_tracked",
		args: "obj",
		formula: "[death_burst(obj),register_kill(obj)]",
	},
	
	{
		name: "impact_cloud_silent",
		args: "new_x,new_y,size",
		formula: "if(size = 'small', spawn('impact_cloud_small',new_x,new_y,1), spawn('impact_cloud',new_x,new_y,1))",
	},
	{
		name: "impact_cloud",
		args: "new_x,new_y,size",
		formula: "[impact_cloud_silent(new_x,new_y,size),sound('bump-2.wav')]",
	},
	
	{
		name: "elastic_collision",
		args: "a,b",

		#takes two objects as parameters, changes their velocities according to an elastic collision
		# note deep magic on if(a < b) - this compares the memory addresses, and is done to ensure collisions aren't calculated twice (once on each end of the collision).
		formula: "if(a.mass and b.mass, [
				set(a.velocity_x, (momentum_x/2)/a.mass),
				set(b.velocity_x, (momentum_x/2)/b.mass),
				] where momentum_x = a.velocity_x*a.mass + b.velocity_x*b.mass)",
	},
	
]
