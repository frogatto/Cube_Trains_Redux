
#
# this one has falloff logic in it (i.e. the sound will fade as the player gets further away).  For optimization purposes, use this one only when we need it, because it polls the player's position to adjust the volume.
{
id: "sfx_falloff_generator",
hidden_in_game: true,
always_active: true,
ignore_collide: true,
properties: {

	#
	#functions for checking if there are other sources playing the same effect so we don't play it twice.  The goal is to play only one instance of a looped sound, but have the volume be that of the closest source - as though every source was playing its own instance.  The rationale is massive optimization by only playing one (rather than, say, 9) sound sources, and also preventing two similar loops out-of-sync from "phasing" and creating audio artifacts.
	similar_generators: "filter(level.chars, value.type = type and value.effect_name = effect_name)",
	net_volume: "max(map(vars.generators, value.volume_level_base128))",

	#
	#
	#functions for determining what this object's sound level should be:
	nearest_edge: "max( if(level.player.x > x_bound and level.player.x < x2_bound, 1,
			min(abs(level.player.x - x_bound),abs(level.player.x - x2_bound))),
		if(level.player.y > y_bound and level.player.y < y2_bound, 1,
			min(abs(level.player.y - y_bound),abs(level.player.y - y2_bound))) )",
	volume_level_base128: "( if(desired_volume > 14, min(max_volume, (desired_volume * master_volume)/128), 0) ) where desired_volume = (128*((1000*160)/ max(1,nearest_edge) ))/1000",
	volume_level: "1.0*(volume_level_base128/128.0)",
	setup: "def() [sound_loop(effect_name, volume_level),schedule(2,fire_event('adjust_volume'))]",
},
on_die: "if(vars.is_master, sound_volume(128))",

//When we load, if there is no master, we step up and become the master.
on_load: "if(vars.effect_name and size(filter(similar_generators, value.vars.is_master)) = 0, [set(vars.is_master, true), set(vars.generators, similar_generators), fire_event('setup')])",
on_setup: "[sound_loop(vars.effect_name, volume_level), schedule(2, fire_event('adjust_volume'))]",
on_adjust_volume: "[sound_volume(net_volume),schedule(2,fire_event('adjust_volume'))]",

on_end_anim: "animation('normal')",
zorder: 50,

tmp: {
	is_master: false,
	generators: null,
	effect_name: ""
},
editor_info: {
	category: "controllers",
	var: [
		{
			name: "effect_name",
			type: "enum",
			value: "''",
	        enum_values: "@eval map(get_files_in_dir('sounds/ambient'), 'ambient/'+value)",
		},
		{
			name: "falloff_distance",
			value: 800,
		},
		{
			name: "master_volume",
			value: 128,
		},
		{
			name: "max_volume",
			value: 128,
		},
		{
			name: "x_bound",
			type: "x",
			value: "x-100",
		},
		{
			name: "x2_bound",
			type: "x",
			value: "x+150",
		},
		{
			name: "y_bound",
			type: "y",
			value: "y-100",
		},
		{
			name: "y2_bound",
			type: "y",
			value: "y+150",
		},
	],
},
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
}
