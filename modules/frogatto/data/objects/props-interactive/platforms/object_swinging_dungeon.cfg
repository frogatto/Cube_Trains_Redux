{
id: "object_swinging_dungeon",
hidden_in_game: true,

editor_info: {
	category: "platforms",
	help: "A chain with an object attached to the end of it.
		Be careful when typing text to by_string, if you type in an object id
		that doesn't exst the game will crash. Tip: Save now.
		You can give some special shortcut values for commmon objects.
		    > 'ball' - Makes a big purple spikeball. (don't type the ' btw)
		    > 'platform' - Makes the default platform you can ride on.
		  by_string: An object id (or above shortcut) to swing around.
		  by_label: Subordinate to by_string, swing the object with this label.
		  weight_rotates: Should we orient the thing being swung with the chain?",
	var: [
		{
			name: "moving_object_type",
			type: "enum",
			value: "'spiked_ball'",
			enum_values: "platform,spiked_ball",
		},
		{
			name: "length",
			type: "y",
			value: "self.y+200",
		},
		{
			name: "arc",
			type: "x",
			value: "self.x+100",
		},
	],
},
properties:	{
	weight_rotates: "switch(moving_object_type,
						'platform', false,
						'spiked_ball', true)"
},

on_create: "[
		set(activation_border, orbit_length * 2),
		[	set(vars.chain, chain),
			set(chain.animation, 'chain'),
			set(chain.z, self.z-1),
			add_object(chain),
		]	where chain = object('rope_angled_controller', self.x, self.y, 0),
		spawn(type+'.mount',mid_x,mid_y,facing),
		spawn(type+'.'+moving_object_type,x,y,0,
			[set(me.attached_obj, child),
			set(child.x_schedule, map(targets, value[0]-child.img_w/2)),
			set(child.y_schedule, map(targets, value[1]-child.img_h/2)),
			set(child.schedule_speed, 2)]),
			

		] where targets = map( map(range(360/speed), value*speed),
			orbit(	midpoint_x,
					midpoint_y,
					sin(decimal(value))*angle+90,
					orbit_length))
		#where arc_size = zip(
			orbit(	mid_x, mid_y, angle, orbit_length),	orbit(	mid_x, mid_y, 90, orbit_length), a - b)#
			
		where speed = 1000/orbit_length		#← TWEAK SPEED HERE#
		where orbit_length = length(vars.length, vars.arc, self.midpoint_y, self.midpoint_x)
		where angle = 90-angle_to(self, {'midpoint_y' -> length, 'midpoint_x' -> arc})",
		
on_process: "[
			vars.chain.set_ends(self.midpoint_x+5, #Off-center otherwise for some reason.#
							self.midpoint_y, 
							vars.attached_obj.x+attached_obj.img_w/2, 
							vars.attached_obj.y+attached_obj.img_h/2),
			if(weight_rotates, set(attached_obj.rotate, angle_to(attached_obj, self)+90)),
		]",
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210,
	y: 166,
	w: 28,
	h: 28,
	duration: -1,
},
object_type: [
{
	platform_area: [0,0,15,1],
	id: "mount",
	animation: {
		id: "normal",
		image: "props/spikedball.png",
		rect: [25,2,41,18],
		duration: -1,
	},
},
{
	prototype: ["standard_values"],
	id: "spiked_ball",
		properties: {
			team: "'neutral'",
			attack_damage: 400,
			attack_damage_to_player: "if(level.player.difficulty > level.player.difficulty_casual, 6, 2)",
		},
	animation: {
		id: "normal",
		image: "props/spikedball.png",
		rect: [1,18,42,60],
		collide: [8,8,32,32],
		duration: 10000000,
		attack_area: "all",
	},
},
],
}