{
id: "padlock",
zorder: -1,
on_start_level: "[ if(level.player.vars.stored_events[event_name] = 1, remove_object(me)),
					add(variations, [vars.color]),animation('normal')]",
on_unlock: "[ add(level.player.vars.stored_events, {(event_name) -> 1}),
				spawn('padlock.particle_system_holder', mid_x,mid_y,facing),
				impact_cloud(mid_x,mid_y,'large'),
				map([0]*1d2, spawn('padlock.chunk',x+1d10, y+1d10, if(1d2=2,1,-1))),
				map([0]*1d2, spawn('padlock.chunk',x+1d10, y+1d10, if(1d2=2,1,-1), add(variations, ['small']))),
				sound('BlockBreak.ogg'),die()]",
no_compile_image: "props/locks.png",
editor_info: {
	category: "props",
	help: "Place this on top of a door to lock it - the door will autodetect the lock
		visually sitting there, and become locked.  To make the game remember that the act
		of unlocking has happened, you have to set a matching event name in both the lock
		and the key - once set, they will cease being there when you enter the level.",
	var: [
		{
			name: "color",
			type: "enum",
			value: "'gold'",
			enum_values: "gold,silver,green,red,purple,blue,cyan",
		},
		{
			name: "event_name",
			type: "text",
			value: "''",
		},
	],
},
animation: {
	image: "props/locks.png",
	id: "normal",
	rect: [0,0,15,15],

	#gold is the default
	duration: 10000,
},
variations: {
	gold:	"null",
	silver:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [16,0,31,15]))]",
	green:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [32,0,47,15]))]",
	red:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [48,0,63,15]))]",
	purple:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [64,0,79,15]))]",
	blue:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [80,0,95,15]))]",
	cyan:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [96,0,111,15]))]",
},
object_type: [

	#-------------------------------- BREAKAGE EFFECTS --------------------------------
	#
	{
		id: "chunk",
		dies_on_inactive: true,
		solid_dimensions: ["effects"],
		friction: 2000,
		has_feet: false,
		on_create: "[animation('normal'),set(velocity_x, (1d1000-500)), set(velocity_y, -1d600-200), set(rotate, 1d4*90), 
	]",
		on_collide_feet: "[set(velocity_y, -(velocity_y*600)/1000),if(velocity_y < 200 and animation='normal', animation('settled')),if(velocity_y < 40, set(velocity_y,0))]",
		on_collide_side: "set(velocity_x, -(velocity_x*850)/1000)",
		timer_frequency: 5,
		on_timer: "if(animation in ['normal'],add(rotate, 15))",
		on_end_anim: "animation('normal')",
		on_end_settled_anim: "die()",
		on_enter_water: "animation('settled')",
		on_die: "spawn('padlock.particle_system_holder', x,y,facing)",
		zorder: 12,
		solid_area: [9,9,10,10],
		load_variations: "corner",
		animation: [
			{
				image: "effects/particles3.png",
				accel_y: 40,
				duration: 5,
				pad: 3,
				body_area: null,
				id: "normal",
				rect: [1,61,17,77],
				frames: 6,
			},
			{
				image: "effects/particles3.png",
				accel_y: 40,
				duration: 100,
				pad: 3,
				body_area: null,
				id: "settled",
				rect: [1,61,17,77],
				frames: 1,
			},
		],
		variations: {
			small:	"[map(filter(doc.animation, value.rect = [1,61,17,77]), 'anim', set(anim.rect, [1,121,17,137]))]",
		},
	},
	{
		id: "particle_system_holder",
		zorder: 100,
		hitpoints: 300,
		dies_on_inactive: true,
		timer_frequency: 10,
		on_create: "[set(velocity_x, 0), set(velocity_y, 0), set(animation, 'normal'),
			add_particles('particles'),
			]",
		on_timer: "set(hitpoints, hitpoints-10)",
		on_turnOff: "[set(particles.generation_rate, 0)]",
		animation: {
			accel_y: 0,
			accel_x: 0,
			id: "normal",
			image: "effects/particles2.png",
			events: "2:turnOff",
			duration: 10000,
			x: 0,
			y: 0,
			w: 0,
			h: 0,
		},
		particle_system: {
			id: "particles",
			type: "point",
			dot_rounded: true,
			generation_rate_millis: 10000,
			time_to_live: 60,
			time_to_live_rand: 24,
			colors: ["fceec5ff","dfd7d3ff","a99e96aa","796d6288","584d4055"],
			pos_x: 0,
			pos_y: 0,
			pos_x_rand: 30,
			pos_y_rand: 30,
			velocity_x: -500,
			velocity_x_rand: 1000,
			velocity_y: -500,
			velocity_y_rand: 1000,
			dot_size: 3,
		},
	},
],
}
