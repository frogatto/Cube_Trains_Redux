{
id: "retracting_spike_machine",
on_create: "[set(z, 51), spawn('retracting_spike_machine.spike', mid_x, y + 30, 1,
               [set(z, 50),
	            set_group(group),
				set_var('ypos', y+28),
	            set_var('initial_delay', delay_ticks),
	            set_var('retracted_ticks', retracted_ticks),
                set_var('stab_ticks', stab_ticks),
                set_var('extended_ticks', extended_ticks),
                set_var('retract_ticks', retract_ticks),
	            set(child.upside_down, upside_down)]),
	            
	            spawn(self.type + '.backdrop',mid_x,mid_y,facing,set(z,-5))
	            ]",
editor_info: {
	category: "enemies, milgramen",
	var: [
		{
			name: "delay_ticks",
			value: 0,
		},
		{
			name: "retracted_ticks",
			value: 80,
		},
		{
			name: "stab_ticks",
			value: 4,
		},
		{
			name: "extended_ticks",
			value: 50,
		},
		{
			name: "retract_ticks",
			value: 40,
		},
	],
},
animation: {
	id: "normal",
	image: "props/retracting-spike-machine.png",
	rect: [0,0,15,47],
	frames: 1,
	duration: 1000000,
	palettes: "@include data/palettes.cfg:dungeon_palettes",
},


object_type: [
	{
		id: "backdrop",
		animation: {
			id: "normal",
			image: "props/retracting-spike-machine.png",
			rect: [16,0,31,47],
			frames: 1,
			duration: 1000000,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},	
	},
	{
		id: "spike",
		properties: {
			attack_damage: "if(y = vars.y_retracted, 0, 1)",
		},
		vars: {
			y_extended: 0,
			y_retracted: 0,
			initial_delay: 0,
			retracted_ticks: 0,
			stab_ticks: 0,
			extended_ticks: 0,
			retract_ticks: 0,
		},
		tmp: {
			command_schedule: null,
		},
		on_load: "[set(velocity_y, 0), set(y, vars.ypos), set(vars.y_extended, vars.ypos + 60*up), set(vars.y_retracted, vars.ypos), fire_event('done_load')]",
		
		#we create a 'schedule' for the spike. The spike goes through several states:
		# (1) retracted, starting at 0: the spike remains retracted and does nothing, the default state
		# (2) stabbing, starting at vars.retracted_ticks: the spike begins extending, and will fully extend within vars.stab_ticks
		#               cycles. The spike starts doing damage during this stage.
		# (3) extended, starting after vars.stab_ticks: the spike is extended, and remains still.
		# (4) retracting, starting after vars.extended_ticks: the spike is retracting, and will fully retract within vars.retract_ticks.
		#
		# we record this entire schedule within the tmp.command_schedule variable. Then we can just execute this command to
		# conveniently set up a full cycle worth of movement for the object.
		on_done_load: "[
		set(tmp.command_schedule,	[schedule(vars.retracted_ticks, [set(vars.damage, 1), set(velocity_y, (100*(vars.y_extended - vars.y_retracted))/vars.stab_ticks)]),
							   schedule(vars.retracted_ticks + vars.stab_ticks, [set(y, vars.y_extended), set(velocity_y, 0)]),
							   schedule(vars.retracted_ticks + vars.stab_ticks + vars.extended_ticks, [set(vars.damage, 0), set(velocity_y, (100*(vars.y_retracted - vars.y_extended))/vars.retract_ticks)]),
							   schedule(vars.retracted_ticks + vars.stab_ticks + vars.extended_ticks + vars.retract_ticks,
													   [set(y, vars.y_retracted), set(velocity_y, 0), fire_event('start_cycle')])
			]),
			schedule(vars.initial_delay, fire_event('start_cycle'))
		]",
		on_start_cycle: "tmp.command_schedule",
		animation: {
			id: "normal",
			image: "props/retracting-spike-machine.png",
			rect: [48,0,63,31],
			frames: 1,
			duration: 1000000,
			attack_area: "all",
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},	
	}],
}