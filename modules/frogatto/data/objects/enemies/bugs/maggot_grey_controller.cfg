{
id: "maggot_grey_controller",
ignore_collide: true,
prototype: ["standard_values"],
hidden_in_game: true,
zorder: 50,
timer_frequency: 5,
properties: {
	zone_width: "abs(zone_x2 - zone_x1)",
	zone_height: "abs(zone_y2 - zone_y1)",
	max_count: "decimal(zone_width/if(higher_difficulty,44.0,160.0))",
	number_nearby: "filter(filter(level.chars, value.type = 'maggot_grey'), value.mid_x < zone_x2 + zone_width and value.mid_x > zone_x1 - zone_width and value.mid_y < zone_y2 + zone_height*3 and value.mid_y > zone_y1 - zone_height).size",
	spawn_frequency: "zone_width/if(higher_difficulty,9.0,3.0)",




	max_counter: 2000,
	find_surface: "def(u,v) if(solid(level,u-1,v,2,2), _find_ceiling_open(u,v,0), _find_ceiling_solid(u,v,0))",
	_find_ceiling_open: "def(u,v,counter) if(solid(level,u-1,v,2,2), if(counter<max_counter, _find_ceiling_open(u,v+2,counter+1), [u,v]), [u,v])",  //find and return the first open area, going down
	_find_ceiling_solid: "def(u,v,counter) if((not solid(level,u-1,v,2,2)), if(counter<max_counter, _find_ceiling_solid(u,v-2,counter+1), [u,v]), [u,v])",  //find and return the first solid area, going up
	

	
	act_B: "max(zone_width, zone_height)*2",
},
vars: {
	spawn_countup: 0,
},
on_create: "set(activation_border, act_B)",
on_timer: "[add(spawn_countup, 5), if(spawn_countup >= spawn_frequency and number_nearby < max_count, [set(spawn_countup, 0), spawn('maggot_grey', ceiling[0], ceiling[1], facing,set(activation_border, act_B))])] where ceiling = find_surface(zone_x1 + 1d(zone_width),zone_y1 + 1d(zone_height))",
//on_process: "debug(max_count + ' ' + number_nearby)",
on_end_anim: "animation('normal')",
editor_info: {
	category: "enemies, cave",
	var: [
		{
			name: "zone_x1",
			type: "x",
			value: "x",
		},
		{
			name: "zone_x2",
			type: "x",
			value: "x+200",
		},
		{
			name: "zone_y1",
			type: "y",
			value: "y",
		},
		{
			name: "zone_y2",
			type: "y",
			value: "y+200",
		},
	],
},
animation: {
	id: "normal",
	image: "enemies/maggot-grey.png",
	rect: [95,95,122,122],
	frames: 1,
	duration: 1000,
},
}