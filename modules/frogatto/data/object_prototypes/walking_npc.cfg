{
/*Implimentor requires "walk" and "turn" animations.
Properties:	pace - Paces to and fro the limits set in the editor.
			walk - Walks fowards forever.
*/
id: "walking_npc",
zorder: -2,

editor_info: {
	category: "NPCs",
	help: "start mode: Action to start the level in.\nturns_at_cliff: If true, the object will turn before it falls off a cliff. Doesn't apply to walking into one.\npotters: The object will sort of faff about a bit.\npotter_timeout: Number of frames the object will faff about for. Frogatto runs af 50 frames per second.",
	var: [{
		name: "min_x",
		value: "midpoint_x - 200",
		type: "x",
	},{
		name: "max_x",
		value: "midpoint_x + 200",
		type: "x",
	},{
		name: "start_mode",
		type: "enum",
		value: "'walk'",
		enum_values: ["walk"],
	},{
		name: "turns_at_cliff",
		type: "boolean",
		value: true,
	},{
		name: "potters",
		type: "enum",
		value: "'never'",
		enum_values: ["never","limits","always"]
	},{
		name: "potter_timeout",
		type: "int",
		value: "100",
	},],
},

properties: {
	"pace": "[
		fire_event(self, 'end_walk_anim'),
		set(self.vars.turns, true)]",
		
	"walk": "[
		if(animation != 'walk', set(self.animation, 'walk')),
		set(self.vars.target, null),
		set(self.vars.turns, false)]",
		
	"pace_to": "def(new_min_x, new_max_x) [
		if(new_min_x < new_max_x, [
			set(self.vars.min_x, new_min_x),
			set(self.vars.max_x, new_max_x),
			],[
			set(self.vars.min_x, new_max_x),
			set(self.vars.max_x, new_min_x),
			]),
		self.pace]",
		
	"walk_to": "def(target_x, callback=null) [
		set(self.vars.target, target_x),
		set(self.vars.target_callback, callback),
		set(self.vars.timer_code, null),
		schedule(50, set(self.vars.timer_code, fire_event('walk_to_target'))),
		set(self.vars.turns, false),
		if((target_x < self.mid_x and facing > 0) or (target_x > self.mid_x and facing <= 0),
			set(self.animation, 'turn'),
			set(self.animation, 'walk'))
		]",
		
	"start_pottering": "def(callback) if(consts.can_stand, [
		set(self.vars.target_callback, callback),
		stand,
		schedule(potter_timeout, fire_event('cease_pottering')),
		], callback)",
		
	"check_for_turn_or_walk": "def(ppt)
		if(turns_at_cliff and distance_to_cliff < cliff_margin, if(1d2-1 and potters in ['always', 'limits'], start_pottering(ppt), ppt),
			if(turns,
				if(facing > 0,
					if(mid_x + margin > max_x, ppt, potter_or_walk), 
					if(mid_x - margin < min_x, ppt, potter_or_walk)),
			)) where potter_or_walk = if(1d2-1 and potters in ['always'], start_pottering(animation('walk')), animation('walk'))
			where margin = 50
			where cliff_margin = 110"
	},
	
vars: {
	"turns": true,					//Turns at editor-set limits.
	"target": null,					//If we are walking to a target, this is it.
	"target_callback": null,		//The event to fire, when we reach the target. (Will be fired in addition to reach_target.)
	"timer_code": null,
	"walking_animations": ["walk"],	//For internal reasons, you must supply a list of walking animations. (I can't seem to test for 'walk' in animation name.)
	},

consts: {"can_walk": true},

on_create: "if(start_mode, animation(start_mode), animation('walk'))",

on_end_anim: "set(previous_animation, animation)",

timer_frequency: 25,
on_timer: "timer_code",

on_walk_to_target: "
	if(animation in walking_animations and target,
		if(facing > 0, 
			if(mid_x + img_w/2 > target, schedule(1, fire_event('reach_target')), wtt),
			if(mid_x - img_w/2 < target, schedule(1, fire_event('reach_target')), wtt)),
		wtt) where wtt = null",
	
on_reach_target: "[stand, target_callback]",

on_cease_pottering: "check_for_turn_or_walk(animation('turn'))",

on_end_walk_anim: "if(not tmp.prev_anim, //This is set if we have not stopped walking, but merely paused.
	if(previous_animation != 'turn', 
		check_for_turn_or_walk(ppt)
		where ppt = if(potters in ['limits','always'], start_pottering(animation('turn')), animation('turn')),
		if(potters = 'always', start_pottering(animation('walk')), animation('walk')))
	)",
			
on_end_turn_anim: "if(not tmp.prev_anim, [
	animation('walk'),
	set(facing, 0 >= facing),
	])"

}
