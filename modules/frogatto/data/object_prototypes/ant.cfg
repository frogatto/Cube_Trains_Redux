{
id: "ant",
prototype: ["hittable"],
mass: 5,
friction: 1000,
traction: 1000,
timer_frequency: 2,
hitpoints: 50,
solid_area: [5,10,20,25],
solid_dimensions: ["enemy","common"],
tags: "swallowable",
properties: {
	team: "'evil'",
	hurt_velocity_y: -400,
	hurt_velocity_x: 200,
	attack_damage: "if(not underwater, if(level.player.difficulty >= level.player.difficulty_challenging, 2, 1))",
	handle_damage_type: "def(collide_with)
						if(collide_with.damage_type = 'stun', if(consts.thrown_type, [add(velocity_y,hurt_velocity_y), set(type, consts.thrown_type), animation('on_back')] ))",
	facing_towards_player: "facing = if(level.player.midpoint_x < self.midpoint_x, -1, 1)",
	turns_at_cliffs: 1,
	distance_to_cliff_check: "max(30, abs(velocity_x/7))",
	should_turn_away_from_cliff: "(turns_at_cliffs and distance_to_cliff < distance_to_cliff_check)",
	
	turns_towards_player: "if(level.player.difficulty >= level.player.difficulty_challenging, 1, 0)",
	turns_towards_player_x_threshold: 250,  #how far away you have to be to be ignored
	turns_towards_player_delay: 200,
	
	x_distance_to_player: "abs(mid_x - level.player.mid_x)",
	y_distance_to_player: "abs(mid_y - level.player.mid_y)",
	should_turn_towards_player: "(not facing_towards_player) and if(turns_towards_player and if(turns_towards_player_x_threshold,(turns_towards_player_x_threshold > x_distance_to_player),0), 1, 0)",

	turn_around: "def() if((should_turn_away_from_cliff) or (not turned_to_face_player_too_recently), [set(facing, -facing),animation('turn'), set(vars.last_turned,level.cycle)]) where turned_to_face_player_too_recently = abs(level.cycle - vars.last_turned) < turns_towards_player_delay",
},
vars: {
	last_turned: 0,
	points_value: 10,
},
consts: {
	springiness: 190,
	spring_amount: 1200,
	bounce_roundness: 70,
	solid_dimensions: ["enemy","common"],
},
on_die: "[score(level,points_value), spawn_item(self), death_burst_tracked(self)]",

#
#
# are these even used?
on_jumped_on: "[if(jumped_on_by.mass >= 20, die())]",
on_stomped_on: "[add(hitpoints, -3), set(green, 100), set(blue, 100),
	                schedule(4, [set(green, 255), set(blue, 255)])]",

#
#
# collision handling:	
on_collide_side: "if(not (animation in ['hurt']), [set(facing, -facing), animation('turn'), set(velocity_x,0)])",
on_collide_head: "set(velocity_y, -velocity_y/2)",
on_collide_feet: "animation('walk')",
on_bounced_on: "[sound('bug-bounce.wav'),animation('spring')]",
on_surface_damage: "die()",

#
#
# animation switching:
on_end_anim: "animation('walk')",
on_enter_walk_anim: "if(not is_standing, animation('stand'))",
on_process_stand: "if(is_standing, animation('walk'))",
on_enter_water: "die()",
on_timer: "[set(rotate, slope_standing_on), if(is_standing and animation in ['walk','run'] and (should_turn_away_from_cliff or should_turn_towards_player),turn_around(),null)]",
on_end_turn_anim: "animation('walk')",
on_end_hurt_anim: "animation('walk')",
on_stuck: "if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -1200), add(velocity_x, 1d600-300))",
editor_info: {
	category: "enemies, general",
},
}
