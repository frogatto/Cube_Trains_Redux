{
id: "hittable",
prototype: ["standard_values"],

mass: 5,
properties: {
	flinch_threshold: 3,
	hurt_velocity_y: -400,
	hurt_velocity_x: -200,
	attack_knockback: 0,
	attack_damage: 0,
	damage_cooldown: 0,
	get_hit_by: "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and ( collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle),
								]),
						
						handle_knockback(collide_with)])",

#-------------------------- behavior handlers --------------------------#

# anims/movement
	handle_special_damage_response: "def(collide_with) null #virtual#", //meant for unique actions upon taking damage, like losing wings.  Also for special type-based behavior that happens regardless of damage amount (such as maybe a feathered creature having its feathers burned off and effectively turning into a different, flightless enemy type).
	handle_flinch: "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
	cause_flinch: "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
	cause_hurt_anim: "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",

# damage
	handle_damage_type_modifications: "def(amount) collide_with.attack_damage #virtual#",  //meant for applying any kind of arithmetic to the raw damage amount, based on type.
	handle_base_damage_reductions: "def(amount) collide_with.attack_damage #virtual#",  //meant for flat, type-agnostic reductions to ALL damage.
	final_damage_amount: "handle_damage_type_modifications( handle_base_damage_reductions(collide_with.attack_damage))",
	will_be_dead: "((me.hitpoints - final_damage_amount) <= 0)",
	
	handle_damage: "def(collide_with) execute(me,[if(will_be_dead, handle_death(collide_with)), add(me.hitpoints, - final_damage_amount)])",
	handle_knockback: "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",

# death
	should_track_death: null,
	handle_death: "def(collide_with) [
						add(level.player.score, points_value),
						if(not acquirable_item_drop_value = null,drop_acquirable_items()),
						if(should_track_death, register_kill(me)),
						
						death_effects(if(collide_with.damage_type != null, collide_with.damage_type,death_fx_type))]",
	death_fx_type: null,

# invincibility
	is_invincible_posthit: "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
	is_invincible: "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",




#-------------------------- item drop logic --------------------------#
	drop_item_list: "sans_undroppables(_drop_item_list)",
	drop_item_weights: "sans_undroppables(_drop_item_weights)",
	_drop_item_list: "{'heart_object' : 10, 'points_cube' : 7}",
	_drop_item_weights: "{'heart_object' : 30, 'points_cube' : 70}",
	drop_item_validity: "{'heart_object' : (not level.player.hitpoints = level.player.max_hitpoints),  'points_cube' : true }",
	acquirable_item_drop_value: null,  //how many of the dropped items the dying monster/thing is worth.
	sans_undroppables: "def(source) filter(source, drop_item_validity[key])",
	
	
	choose_drop_item_nonweighted: "choose(keys(drop_item_list))",  //unused but useful reference
	choose_drop_item_weighted: " search_drop_list(drop_item_weights, 0, 0, 1d(sum(values(drop_item_weights)))) ",
	search_drop_list: "def(thelist, i, tally, target_val) if(tally >= target_val, keys(thelist)[i-1], search_drop_list( thelist, i+1, tally + values(thelist)[i], target_val))",

	calculate_drop_items: "def(value_left, toBeDropped) 
			if( anything_can_still_be_dropped, calculate_drop_items(value_left - drop_item_list[picked], toBeDropped + [picked]), toBeDropped)
				where picked = choose_drop_item_weighted
				where anything_can_still_be_dropped = (find(values(drop_item_list), value <= value_left) != null)",
	drop_acquirable_items: "def() if((not higher_difficulty) or 1d4=4,
									map(calculate_drop_items(me.acquirable_item_drop_value,[]), spawn(value, me.mid_x, me.y, me.facing,[set(velocity_x, velocity_x/6 +1d600-300), set(velocity_y, velocity_y/6)])))",

	
#-------------------------- cosmetic functions --------------------------#
	display_hurt_visuals: "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
	hurt_flash_sequence: "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
	display_posthit_invincibility_flash_sequence: "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
	flash_bright: "def() [set(me.brightness, 1023)]",
	flash_red: "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
	flash_off: "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
	
	
	death_effects: "def(type)
			if(me.underwater, splash_effectz(),

			/* we overrule a set of material-based effects based on the type of enemy (bug, animal, slime) by a set of sound-effects based on the type of death, (electrocution, fire, acid)*/
			switch(type,	
					'bug', [vfx('die_cloud'), sound('death-crunch'+1d2+'.wav')],
					'fire', [vfx('die_cloud'), sound('death-acid'+1d5+'.wav')],
			
			)
			where vfx = def(obj_type) spawn(obj_type, me.mid_x, me.mid_y, me.facing))",

	splash_effectz: "def() if(me.underwater and me.water_bounds,
					[if(abs(me.water_bounds[1] - me.midpoint_y) > 40,
						spawn('water_splash_underwater_big', me.mid_x, me.mid_y, if(1d2=2,me.facing,-me.facing)),
						spawn('water_splash', me.midpoint_x, me.water_bounds[1]+10, if(1d2=2,me.facing,-me.facing))),
					sound('water-enter.ogg'), ])",
	
},

#-------------------------- collision event handling --------------------------#
	on_outside_level: "[if(y > level.dimensions[3], add(hitpoints,-1))]",

	//this is meant to ensure we don't take multple instances of damage from a damage type that's a "stream" in a single frame.  If we get hit, we check for other collisions with the same kind of shot, and only take damage from the first one.
	//TODO:  this may be unwanted on shots without a cooldown, where a "shotgun" effect of multiple hits is desired.
on_collide_object_body: "(if(not  find(   filter(all_collisions, value.collide_with.type = collide_with.type), value.collision_index < collision_index), process_collision()))

		//two special exceptions here besides the 'no friendly-fire' rule;
		// evil_harmless is a special team for thrown enemies wherein they can't hurt anyone, regardless of the target's team, but also - stuff from team 'evil' won't friendly-fire them.  They can and will be hurt by any player actions, though, and any traps/neutral damage sources.
	where process_collision = def() if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",

#-------------------------- error condition handling --------------------------#
on_change_solid_dimensions_fail: "fire_event('solidity_fail')",
on_change_animation_failure: "fire_event('solidity_fail')",

# if the level starts, and we're embedded in solid stuff, try moving upwards to get out of it.
# this should catch any errors introduced by changes to solid area or handling thereof
on_solidity_fail: "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
on_add_object_fail: "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
}
