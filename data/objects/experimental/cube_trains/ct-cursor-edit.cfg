[object_type]
	id=ct-cursor-edit
	prototype = ct-block
	is_human=true
	zsub_order = "2"
	
	#	d9d130c2d4a579664acf9ede7b23cab14e48a04d for shader example
	
	[properties]
		select_piece = "def(delta) [
			set(piece_selected, newIndex), 
			debug(str(pieces[newIndex].type) + 'now selected.')
			] where newIndex = if(rangefive < 0, size(pieces)-1, rangefive) 
			where rangefive = (piece_selected+delta)%size(pieces)"
			
		rotate_view = "def(delta) map(filter(level.chars, 'lc', lc.location), 'obj', [
				obj.applyRotate(delta, [-1*delta*obj.location[1], delta*obj.location[0], obj.location[2]])])" #rotated by 90 degrees cw or ccw.#
				
		applyRotate = "def(delta, dest) setToGrid(dest)"
	[/properties]
	
	[vars]
		toLoad = 	"
					"
					
		keymode = 'dvorak'
		keymap = "{
			'dvorak' -> (
				{'low' -> 305,		#ctrl right#
				'high' -> 'z',
				'help' -> 282,		#f1#
				'print' -> 284,		#f3#	#also saves to registry#
				'load' -> 285,		#f4#	#loads from registry#
				'place' -> 306,		#ctrl left#
				'unplace' -> 'q',
				'select left' -> '<',
				'select right' -> ';',
				'rotate cw' -> '\\',
				'rotate ccw' -> '-',
				}
			), 'qwerty' -> (
				{'low' -> 305,
				'high' -> '/',
				'help' -> 282,
				'print' -> 284,
				'load' -> 285,
				'place' -> 306,
				'unplace' -> 'x',
				'select left' -> '\\',
				'select right' -> 'z',
				'rotate cw' -> ';',
				'rotate ccw' -> ~'~,	#'\'' doesn't work#
				}
			),
		}"
		
		pieces = "[	'ct-block-5', 'ct-black-5', 
					'ct-tunnel-1', 'ct-tunnel-3', 'ct-tunnel-7', 'ct-tunnel-9',
					'ct-legs-5',
					'ct-track-19', 'ct-track-37', 'ct-track-13', 'ct-track-17', 'ct-track-39', 'ct-track-79',
					'ct-raise-1', 'ct-raise-3', 'ct-raise-7', 'ct-raise-9', 
					]"
		piece_selected = 0
		groups = ['ground', 'support', 'track',]
	[/vars]
	
	on_create = "[
		set(fragment_shaders, ['fragment_mod0.gl']), set(vertex_shaders, ['vertex.gl']), set(shader.dst_factor, 500),
		setToGrid(location),
		fire_event('quick_load'),
		set(text_ctrl.vars.txt, '[]'),
		add_object(text_ctrl),
		set(vars.text_ctrl, text_ctrl),
		set(level.focus, [text_ctrl]),
		] where text_ctrl = object('text_controller', x, y, 0, {'centered'->1})"
	
	on_ctrl_left = "setToGrid(list_add(location, [0,-1,0]))"
	on_ctrl_right = "setToGrid(list_add(location, [0,1,0]))"
	on_ctrl_up = "setToGrid(list_add(location, [1,0,0]))"
	on_ctrl_down = "setToGrid(list_add(location, [-1,0,0]))"
	on_ctrl_high = "setToGrid(list_add(location, [0,0,1]))"
	on_ctrl_low = "setToGrid(list_add(location, [0,0,-1]))"
	
	on_help = "debug('\n = Controls: =\nArrow keys to move horisonally, left ctrl and z to move vertically, <, ; to change selection, right ctrl to place and q to remove blocks, f3 to print a save list to console. (This list may be placed in this file`s* to_load variable to restore it.)\n* objects/experimental/cube_trains/ct-cursor-edit.cfg\n\n = Quick-Saving: =\nf3 also quick-saves the map, and f4 quick-loads it. While quick-saves are retained between sessions, they only do so when Frogatto has exited normally. In event of a crash, your work will be lost if you`ve only quick-saved it!\n\n = Keyboard Layout: =\nPress numpad 2 for dvorak keyboard layout mode, where the alphanumeric keys are \\ = select left, z = select right, x = delete, and / = move up.')"
	
	on_print = "[
		debug('saved, serialized map: \n\n{str(saved)}\n\n'),
		set(registry.ct_quicksave, saved),
		] where saved = map(filter(level.chars, 'ch', ch.vars.group in context.groups), 'saves', [saves.type, saves.location])" 
		
	on_quick_load = "[
		map(toLoad, 'data', [obj.setToGrid(data[1]), add_object(obj)] where obj = object(data[0])),
		map(filter(level.chars, 'ch', ch.vars.group in context.groups), 'old', fire_event(old, 'remove')),
		]"
	
	on_place = "if(not obj.vars.group in map(at_position, 'ap', ap.vars.group), 
			[obj.setToGrid(location), add_object(obj)], 
			debug('Error: already a {obj.vars.group} here.')
			) where obj = object(pieces[piece_selected])"
	on_unplace = "if(size(obj) > 0, 
		[fire_event(obj[0], 'remove'), fire_event('unplace')]
		) where obj = at_position"
	
	on_process = "[#debug('zsub_orders: ', self.zsub_order, map(at_position, 'ap', ap.zsub_order)),#
	
		set(shader.dst_factor, wave(level.cycle*15)/5 + 1000),		#make the cursor pulse#
		set(shader.src_factor, 1000 - (wave(level.cycle*15)/5 + 1000)),
		
		map(play_objs, 'pob', [
			set(pob.alpha, ((pob.vars.location[2]-1 <= vars.location[2])*55 + (pob.vars.location[2] <= vars.location[2])*200)),
			]),
		
		set(keys_already_down, keys),	#deal with key input#
		[	#if(size(nkd) > 0, debug(nkd)),#
			if(kmap['low']			in nkd, fire_event('ctrl_low')),
			if(kmap['high']			in nkd, fire_event('ctrl_high')),
			if(kmap['help']			in nkd, fire_event('help')),
			if(kmap['load']			in nkd, [set(toLoad, registry.ct_quicksave), fire_event('quick_load')]),
			if(kmap['print']		in nkd, fire_event('print')),
			if(kmap['place']		in nkd, fire_event('place')),
			if(kmap['unplace']		in nkd, fire_event('unplace')),
			if(kmap['select left']	in nkd, select_piece(1)),
			if(kmap['select right']	in nkd, select_piece(-1)),
			if(kmap['rotate cw']	in nkd, rotate_view(1)),
			if(kmap['rotate ccw']	in nkd, rotate_view(-1)),
			
			if(257 in nkd, [set(keymode, 'dvorak'), debug('now using dvorak keymap')]),
			if(258 in nkd, [set(keymode, 'qwerty'), debug('now using qwerty keymap')]),
			if( 27 in nkd, exit()),
		]	where nkd = filter(keys, 'key', not key in keys_already_down),
		text_ctrl.set_text(str(location) + '\n' + map(at_position, 'ap', ap.type)),
		set(text_ctrl.x, midpoint_x), set(text_ctrl.y, y+240),
	]	where keys = ctrl_keys
		where kmap = keymap[keymode]
		where play_objs = filter(level.chars, 'ch', ch.vars.location and ch != context.self)"
	
	[animation]
		image=experimental/cube trains/0029.png
		rect=0,0,255,255
	[/animation]
[/object_type]