[object_type]
	id=ct-cursor
	prototype = ct-block
	is_human=true
	zsuborder = 10
	
	[properties]
		select_piece = "def(delta) [set(piece_selected, debug_fn(newIndex, newIndex)), debug(str(pieces[newIndex].type) + 'now selected.')] where newIndex = if(rangefive < 0, size(pieces)-1, rangefive) where rangefive = (piece_selected+delta)%size(pieces)"
		at_position = "find(level.chars, 'lch', lch.location = context.location and lch != context.self)"
	[/properties]
	
	[vars]
		toLoad = 	"[['ct-block-5',[3,4,0]],['ct-block-5',[2,4,0]],['ct-block-5',[1,4,0]],['ct-block-5',[1,3,0]],['ct-block-5',[2,3,0]],['ct-block-5',[3,3,0]],['ct-black-5',[3,2,0]],['ct-black-5',[2,2,0]],['ct-black-5',[1,2,0]],['ct-black-5',[4,2,0]],['ct-black-5',[4,3,0]],['ct-black-5',[4,4,0]],['ct-black-5',[0,2,0]],['ct-black-5',[0,3,0]],['ct-black-5',[0,4,0]],['ct-black-5',[0,5,0]],['ct-black-5',[1,5,0]],['ct-black-5',[2,5,0]],['ct-black-5',[3,5,0]],['ct-black-5',[4,5,0]],['ct-black-5',[3,4,1]],['ct-black-5',[1,4,1]],['ct-black-5',[1,3,1]],['ct-black-5',[3,3,1]],['ct-block-5',[2,3,1]],['ct-block-5',[2,4,1]]]
					"
		pieces = "[	'ct-block-5', 'ct-black-5', 
					'ct-tunnel-1', 'ct-tunnel-3', 'ct-tunnel-7', 'ct-tunnel-9',
					
					]"
		piece_selected = 0
		groups = ['ground', 'track']
	[/vars]
	
	on_create = "[debug('Arrow keys to move horisonally, left ctrl and z to move vertically, <, ; to change selection, right ctrl to place and q to remove blocks, f1 to print a save list to console. This list may be placed in this file`s to_load variable to restore it.'),
		setToGrid(location),
		set(text_ctrl.vars.txt, str(location) + '\n' + at_position.type),
		add_object(text_ctrl),
		set(vars.text_ctrl, text_ctrl),
		map(toLoad, 'data', [obj.setToGrid(data[1]), add_object(obj)] where obj = object(data[0]))
		] where text_ctrl = object('text_controller', x, y, 0, {'centered'->1})"
	
	on_ctrl_left = "setToGrid(list_add(location, [0,-1,0]))"
	on_ctrl_right = "setToGrid(list_add(location, [0,1,0]))"
	on_ctrl_up = "setToGrid(list_add(location, [1,0,0]))"
	on_ctrl_down = "setToGrid(list_add(location, [-1,0,0]))"
	on_ctrl_high = "setToGrid(list_add(location, [0,0,1]))"
	on_ctrl_low = "setToGrid(list_add(location, [0,0,-1]))"
	
	on_print = "debug('saved map: \n\n' + str(map(filter(level.chars, 'ch', ch.consts.group in context.groups), 'saves', [saves.type, saves.location])) + '\n\n')" 
	
	on_place = "if(not at_position, [obj.setToGrid(location), add_object(obj)] where obj = object(pieces[piece_selected]))"
	on_unplace = "[if(obj, remove_object(obj))] where obj = at_position"
	
	on_process = "[
		set(keys_already_down, keys),
		[	if(size(nkd) > 0, debug(nkd)),
			if(305 in nkd, fire_event('ctrl_low')),			# right ctrl #
			if('z' in nkd, fire_event('ctrl_high')),
			if(282 in nkd, fire_event('print')),			# f1 #
			if(306 in nkd, fire_event('place')),			# left ctrl #
			if('<' in nkd, select_piece(1)),
			if(';' in nkd, select_piece(-1)),
			if('q' in nkd, fire_event('unplace')),
		]	where nkd = filter(keys, 'key', not key in keys_already_down),
		text_ctrl.set_text(str(location) + '\n' + at_position.type),
		set(text_ctrl.x, midpoint_x), set(text_ctrl.y, y+240),
	]	where keys = ctrl_keys"
	
	[animation]
		image=experimental/cube trains/0029.png
		rect=0,0,255,255
	[/animation]
[/object_type]