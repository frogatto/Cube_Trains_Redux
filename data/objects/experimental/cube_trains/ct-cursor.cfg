[object_type]
	id=ct-cursor
	prototype = ct-block
	is_human=true
	zsuborder = 1
	
	[properties]
		select_piece = "def(delta) [set(piece_selected, newIndex), debug(str(pieces[newIndex].type) + 'now selected.')] where newIndex = if(rangefive < 0, size(pieces)-1, rangefive) where rangefive = (piece_selected+delta)%size(pieces)"
		at_position = "filter(level.chars, 'lch', lch.location = context.location and lch != context.self)"
	[/properties]
	
	[vars]
		toLoad = 	"[['ct-legs-5',[2,4,1]],['ct-legs-5',[3,4,1]],['ct-track-19',[3,4,2]],['ct-raise-1',[2,4,1]],['ct-legs-5',[1,4,0]],['ct-track-19',[1,4,1]],['ct-legs-5',[2,4,0]],['ct-legs-5',[3,4,0]],['ct-block-5',[3,4,-1]],['ct-block-5',[2,4,-1]],['ct-block-5',[1,4,-1]],['ct-block-5',[1,3,-1]],['ct-block-5',[2,3,-1]],['ct-block-5',[3,3,-1]],['ct-block-5',[3,5,-1]],['ct-block-5',[2,5,-1]],['ct-block-5',[1,5,-1]],['ct-block-5',[4,5,-1]],['ct-block-5',[4,4,0]],['ct-block-5',[4,3,0]],['ct-block-5',[4,5,0]],['ct-block-5',[3,5,0]],['ct-block-5',[3,3,0]],['ct-block-5',[2,3,0]],['ct-block-5',[1,3,0]],['ct-block-5',[1,5,0]],['ct-block-5',[2,5,0]],['ct-block-5',[0,3,0]],['ct-block-5',[0,4,0]],['ct-block-5',[0,5,0]],['ct-block-5',[0,5,-1]],['ct-block-5',[0,4,-1]],['ct-block-5',[0,3,-1]],['ct-block-5',[2,3,1]],['ct-block-5',[3,3,1]],['ct-block-5',[4,3,1]],['ct-block-5',[4,3,2]],['ct-block-5',[3,3,2]],['ct-block-5',[2,3,2]],['ct-block-5',[1,3,1]],['ct-block-5',[0,3,1]],['ct-block-5',[1,3,2]],['ct-block-5',[0,3,2]]]
					"
					
		keymode = 'dvorak'
		keymap = "{
			'dvorak' -> (
				{'low' -> 305,		#ctrl right#
				'high' -> 'z',
				'print' -> 282,		#f1#
				'place' -> 306,		#ctrl left#
				'unplace' -> 'q',
				'select left' -> '<',
				'select right' -> ';',
				}
			), 'qwerty' -> (
				{'low' -> 305,
				'high' -> '/',
				'print' -> 282,
				'place' -> 306,
				'unplace' -> 'x',
				'select left' -> '\\',
				'select right' -> 'z',
				}
			),
		}"
		
		pieces = "[	'ct-block-5', 'ct-black-5', 
					'ct-tunnel-1', 'ct-tunnel-3', 'ct-tunnel-7', 'ct-tunnel-9',
					'ct-legs-5',
					'ct-track-19', 'ct-track-37',
					'ct-raise-1', 'ct-raise-3', 'ct-raise-7', 'ct-raise-9', 
					]"
		piece_selected = 0
		groups = ['ground', 'support', 'track',]
	[/vars]
	
	on_create = "[debug('Arrow keys to move horisonally, left ctrl and z to move vertically, <, ; to change selection, right ctrl to place and q to remove blocks, f1 to print a save list to console. (This list may be placed in this file`s to_load variable to restore it.) Press numpad 2 for dvorak keyboard layout mode, where the alphanumeric keys are \\ = select left, z = select right, x = delete, and / = move up.'),
		setToGrid(location),
		set(text_ctrl.vars.txt, '[]'),
		add_object(text_ctrl),
		set(vars.text_ctrl, text_ctrl),
		map(toLoad, 'data', [obj.setToGrid(data[1]), add_object(obj)] where obj = object(data[0]))
		] where text_ctrl = object('text_controller', x, y, 0, {'centered'->1})"
	
	on_ctrl_left = "setToGrid(list_add(location, [0,-1,0]))"
	on_ctrl_right = "setToGrid(list_add(location, [0,1,0]))"
	on_ctrl_up = "setToGrid(list_add(location, [1,0,0]))"
	on_ctrl_down = "setToGrid(list_add(location, [-1,0,0]))"
	on_ctrl_high = "setToGrid(list_add(location, [0,0,1]))"
	on_ctrl_low = "setToGrid(list_add(location, [0,0,-1]))"
	
	on_print = "debug('serialized map: \n\n' + str(map(filter(level.chars, 'ch', ch.consts.group in context.groups), 'saves', [saves.type, saves.location])) + '\n\n')" 
	
	on_place = "if(not obj.consts.group in map(at_position, 'ap', ap.consts.group), [obj.setToGrid(location), add_object(obj)]) where obj = object(pieces[piece_selected])"
	on_unplace = "[if(size(obj) > 0, [remove_object(obj[0]), fire_event('unplace')])] where obj = at_position"
	
	on_process = "[debug('zorders: ', self.zsuborder, map(at_position, 'ap', ap.zsuborder)),
		set(keys_already_down, keys),
		[	if(size(nkd) > 0, debug(nkd)),
			if(kmap['low']			in nkd, fire_event('ctrl_low')),
			if(kmap['high']			in nkd, fire_event('ctrl_high')),
			if(kmap['print']		in nkd, fire_event('print')),
			if(kmap['place']		in nkd, fire_event('place')),
			if(kmap['unplace']		in nkd, fire_event('unplace')),
			if(kmap['select left']	in nkd, select_piece(1)),
			if(kmap['select right']	in nkd, select_piece(-1)),
			
			if(257 in nkd, set(keymode, 'dvorak')),
			if(258 in nkd, set(keymode, 'qwerty')),
			if( 27 in nkd, exit()),
		]	where nkd = filter(keys, 'key', not key in keys_already_down),
		text_ctrl.set_text(str(location) + '\n' + map(at_position, 'ap', ap.type)),
		set(text_ctrl.x, midpoint_x), set(text_ctrl.y, y+240),
	]	where keys = ctrl_keys
		where kmap = keymap[keymode]"
	
	[animation]
		image=experimental/cube trains/0029.png
		rect=0,0,255,255
	[/animation]
[/object_type]