{
id: "ct-person",
prototype: ["ct-3d", "ct-pather"],

properties: {
	setToGrid: "def(crd) [ #takes a three-integer list, and sets screen position based on those.#
			set(self.midpoint_x, lpfc[0]+offset[0]),
			set(self.y, lpfc[1]+offset[1]-img_h),
			set(self.z, lpfc[2]+crd[2]*5+self.vars.encloses), #5z for additional layers, to give some breathing room for the raises.#
			set(self.vars.location, crd),
			] where lpfc = level_position_from_coordinate(crd)",
	set_alpha: "def(val) set(self.alpha, val+200)",
	
	on_block: "transform(location, round(v))",
	
	applyRotateCustom: "def(delta, obj) set(obj.vars.activity, {
		'id', vars.activity.id,
		'target', getRotateZ(vars.activity.target, delta),
		#We don't set the tobj from setActivity here, it might have been removed from the level by the rotation code.#
		})",
	
	setActivity: "def(act)
		switch(act,
			'shelter', 	set(activity, {'id':act, 'target':tgt.location, 'tobj':tgt.object})
							 where tgt = getTarget(location, ['shelter', 'exit']),
			#idle,#		set(activity, {'id': 'idle', 'target': vars.location})
		)",
	getTarget: "def(nowAt, lookingFor) #nowAt: The location to start the search from. Used for proximity. (not implimented yet) lookingFor is a list of services to search the utils for. First service to match wins, so order matters.#
		{'location':find(obj.services, 'serv', serv.id in lookingFor).loc, 'object':obj} 
		where obj = objs[(1d size(objs))-1] #might want to refine this#
		where objs = flatten(
			map(lookingFor, 'service', 
				filter(level.player.vars.ped_utils, 'util', service in transform(util.services, v.id)) 
				)
			)",
	
	goSeek: #Move towards a target. 'activity' must have a valid 'target' value.
		"if(not length(vars.location[0], vars.location[1], vars.activity.target[0], vars.activity.target[1]) < 0.25, 
			setToGrid([dest[0], dest[1], vars.location[2]]) where dest = orbit(vars.location[0], vars.location[1], angle(vars.location[0], vars.location[1], vars.activity.target[0], vars.activity.target[1]), vars.speed), 
			fire_event('do_something_else'))",
},

vars: {
	#parameter-variables
	offset: [255,380], #Offset of the unit from x/y origin of the block at [0,0,0] for the unit to appear to be standing on the center of said block. You probably shouldn't fiddle with this one.
	activity: {"id": "idle", "target": [0,0,0]}, #current activity
	speed: "@eval 0.002 + (2d5)/10000",
	
	#non-paramenter varibales, don't fiddle with these
	location: [0,0,0], #the current location. Use setToGrid() to set it.
	calculatedPath: {'complete': 0, 'tiles': []}, #stores the basic path we've calculated so far
	},
	
on_do_something_else: "set(activity, {'id': 'idle', 'target': on_block})",
	
on_create: "[schedule(2 #minimum for ped_utils to fill up#, fire_event('debug2'))]",
on_debug2: "[setActivity('shelter'), fire_event('debug3')]",
xon_debug3: "[debug(activity)]",
on_process: "[if(cycle%10=5, debug(level.player.vars.groupMap)),
	switch(activity.id,
		'shelter', goSeek,
		'idle', #debug('Nothing to do for {type} at {location}. So bored.')#0
		),
	transform(range(100), filter(level.chars, 'char', char.vars.location = [0,0,0])),
	]",

animation: [
	{
		id: "man",
		image: "experimental/cube trains/custom/people-sihlouttes.png",
		x:10, y:12, w:11, h:24,
	},
	{
		id: "child",
		image: "experimental/cube trains/custom/people-sihlouttes.png",
		x:21, y:12, w:11, h:24,
	},
	{
		id: "normal",
		image: "experimental/cube trains/custom/people-sihlouttes.png",
		x:31, y:12, w:11, h:24,
	},
	{
		id: "woman",
		image: "experimental/cube trains/custom/people-sihlouttes.png",
		x:42, y:42, w:20, h:48,
	},
	],
}