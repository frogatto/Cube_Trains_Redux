[object_type]
	id=ct-cursor-play
	prototype = ct-cursor
	is_human=true
	
	[properties]
		move = "def(delta) if(not find(list_subtract(vars.limits.min, loc) + list_subtract(loc, vars.limits.max), 'num', num > 0),[
			setToGrid(loc),
			if(delta[2] != 0, render_depth(loc, 4))
			]) where loc = list_add(vars.location, delta)"
			
		additionalPlacementRequirementsMet = "def(obj, at_pos) obj.additionalPlacementRequirementsMet(at_pos)"
		
		train_crashed = "def(train, error) debug('A train crashed! Try again.')"
	[/properties]
	
	[vars]
		pieces = "[	'ct-legs-5',
					'ct-track-19', 'ct-track-37', 'ct-track-13', 'ct-track-17', 'ct-track-39', 'ct-track-79',
					'ct-raise-1', 'ct-raise-3', 'ct-raise-7', 'ct-raise-9', 
					]"
		trains_are_running = 0
	[/vars]
	
	on_help = "debug('\n = Controls: =\nArrow keys move horisonally, left ctrl and {k.high} move vertically. Use ' + k['rotate cw'] + ' and ' + k['rotate ccw'] + ' to rotate the view. ' + k['select left'] + ' and ' + k['select right'] + ' change selection, right ctrl places, and {k.unplace} removes blocks. Press the spacebar to start the trains.\n\n = Quick-Saving: =\nf3 quick-saves the map, and f4 quick-loads it. While quick-saves are retained between sessions, they only do so when Cube Trains has exited normally. In event of a crash, your current level will be lost.\n\n = Keyboard Layouts: =\nNumpad 1 -> Dvorak, Numpad 2 -> Qwerty, Numpad 3 -> Azerty.'
	where k = keymap[keymode])"
	
	on_create = "[%PROTO%,
		#navigation buttons, 3rd corner.#
		add_object(button.nav1),
			set(button.nav1.vars.reference_anchor, button.nav3.getCameraAnchor(3)), 
			set(button.nav1.vars.offset, [margin*2-button.nav3.img_w, margin+3]),
			set(button.nav1.parent, button.nav3),
			set(button.nav1.vars.action, fire_event(self, 'ctrl_down')),
		add_object(button.nav3),
			set(button.nav3.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.nav3.vars.offset, margin),
			set(button.nav3.vars.action, fire_event(self, 'ctrl_right')),
		add_object(button.nav7),
			set(button.nav7.vars.reference_anchor, button.nav3.getCameraAnchor(3)), 
			set(button.nav7.vars.offset, [margin*2-button.nav3.img_w, margin*2-button.nav3.img_h]),
			set(button.nav7.parent, button.nav3),
			set(button.nav7.vars.action, fire_event(self, 'ctrl_left')),
		add_object(button.nav9),
			set(button.nav9.vars.reference_anchor, button.nav3.getCameraAnchor(3)), 
			set(button.nav9.vars.offset, [margin, margin*2-button.nav3.img_h]),
			set(button.nav9.parent, button.nav3),
			set(button.nav9.vars.action, fire_event(self, 'ctrl_up')),
		add_object(button.navl5),
			set(button.navl5.vars.reference_anchor, button.nav3.getCameraAnchor(3)), 
			set(button.navl5.vars.offset, [margin*3-button.nav3.img_w*2, margin+3]),
			set(button.navl5.parent, button.nav3),
			set(button.navl5.vars.action, fire_event(self, 'ctrl_low')),
		add_object(button.navg5),
			set(button.navg5.vars.reference_anchor, button.nav3.getCameraAnchor(3)), 
			set(button.navg5.vars.offset, [margin*3-button.nav3.img_w*2, margin*2-button.nav3.img_h]),
			set(button.navg5.parent, button.nav3),
			set(button.navg5.vars.action, fire_event(self, 'ctrl_high')),
		add_object(button.navccw),
			set(button.navccw.vars.reference_anchor, button.nav3.getCameraAnchor(3)), 
			set(button.navccw.vars.offset, [margin, margin*3-button.nav3.img_h*2]),
			set(button.navccw.parent, button.nav3),
			set(button.navccw.vars.action, fire_event(self, 'srv1')),
		add_object(button.navcw),
			set(button.navcw.vars.reference_anchor, button.nav3.getCameraAnchor(3)), 
			set(button.navcw.vars.offset, [margin*2-button.nav3.img_w, margin*3-button.nav3.img_h*2]),
			set(button.navcw.parent, button.nav3),
			set(button.navcw.vars.action, fire_event(self, 'srvl1')),
			
		add_object(button.toolbox),
			set(button.toolbox.vars.reference_anchor, def() button.toolbox.getCameraAnchor(1)), 
			set(button.toolbox.vars.offset, [-margin, margin]),
			set(button.toolbox.vars.targets, tools.toolbox),
		add_object(button.toolccw),
			set(button.toolccw.vars.reference_anchor, button.nav3.getCameraAnchor(1)), 
			set(button.toolccw.vars.offset, [130 - margin*2 + button.toolccw.img_w, -45]),
			set(button.toolccw.parent, button.toolbox),
			set(button.toolccw.vars.action, fire_event(self, 'rotate_piece_ccw')),
		add_object(button.toolcw),
			set(button.toolcw.vars.reference_anchor, button.nav3.getCameraAnchor(1)), 
			set(button.toolcw.vars.offset, [130 - margin, -45]),
			set(button.toolcw.parent, button.toolbox),
			set(button.toolcw.vars.action, fire_event(self, 'rotate_piece_cw')),
			
		] where button = {	'nav1' -> object('ct-button-nav-1'), 
							'nav3' -> object('ct-button-nav-3'), 
							'nav7' -> object('ct-button-nav-7'), 
							'nav9' -> object('ct-button-nav-9'), 
							'navl5' -> object('ct-button-nav--5'), 
							'navg5' -> object('ct-button-nav-+5'), 
							'navccw' -> object('ct-button-nav-ccw'), 
							'navcw' -> object('ct-button-nav-cw'),
							'toolbox' -> object('ct-tool-pane'), 
							'toolccw' -> object('ct-button-nav-ccw'), 
							'toolcw' -> object('ct-button-nav-cw'),
							}
		where tools = {		'toolbox' -> map(['legs-5', 'track-19', 'track-13', 'raise-1',
											], 'tool_name', object('ct-button-{tool_name}'))}
		where margin = -10
		"
	
	on_debug2 = "[
		add_object(bAA),
		add_object(bAB),
		set(bAB.vars.reference_anchor, list_add(bAB.getCameraAnchor(7), [bAA.img_w + 25, 0])),
		set(bAB.parent, bAA),
		debug(self.midpoint_x, self.midpoint_y),
		] where bAA = object('ct-test-button')
		where bAB = object('ct-test-button')"
	
	[animation]
		image=experimental/cube trains/0029.png
		rect=0,0,255,255
		id=grey
	[/animation]	
	[animation]
		image=experimental/cube trains/0029.png
		rect=0,0,255,255
		id=red
	[/animation]	
	[animation]
		image=experimental/cube trains/0029.png
		rect=0,0,255,255
		id=blue
	[/animation]
[/object_type]