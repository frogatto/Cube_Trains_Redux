{
id: "rpg_battle_controller",
is_human: true,
zorder: 50,
properties: {
	combatant_finished: "def(he_who_hath_finished)   execute(me,
								map(vars.combatants, 'combatant',  if(he_who_hath_finished = combatant, 			
										[set(vars.active_combatant, next_combatant ),
										fire_event( next_combatant, 'turn_begun'),
										debug(next_combatant.type)
										] where next_combatant = (vars.combatants[(index + 1)  % (vars.combatants.size)])							
									) )
									
									
							)",

	# wrap-around the above list if we overflow
	#start_next_combatant="def() fire_event(vars.active_combatant, 'turn_begun')"
	player_combatant: "filter(level.chars, 'x', x.team='player')[0]",
},
vars: {
	combatants: [],
	active_combatant: null,
},

#on_create="set(vars.active_combatant, combatants[1])"
on_create: "[	add(vars.combatants, [player_combatant]),
					set(vars.active_combatant, player_combatant),
					set(player_combatant.battle_controller, me),
					map(  filter(level.chars, 'thingone', thingone.team = 'monster'),'thingtwo',
							[add(vars.combatants, [thingtwo]), set(thingtwo.vars.battle_controller, me)] ),
							
							fire_event('begin_battle')
					]",
on_begin_battle: "fire_event( combatants[0], 'turn_begun')",
on_process: "[ #combatant_finished(vars.active_combatant),#
					#debug(vars.active_combatant.type)#]",
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 148,
	y: 135,
	w: 28,
	h: 28,
	frames: 1,
	duration: 100000,
},
}