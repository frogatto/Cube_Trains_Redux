{
id: "platform_tracked_dungeon",
platform_area: [0,4,48,5],
editor_info: {
	category: "platforms",
	var: [
		{
			name: "control_points",
			type: "points",
			value: "[]",
		},
		{
			name: "end_behavior",
			type: "enum",
			value: "'circuit'",
			enum_values: "circuit,reverse,stop,fall",
		},
		{
			name: "move_when_stood_on",
			type: "boolean",
			value: 0,
		},
		{
			name: "is_moving",
			type: "boolean",
			value: 1,
		},
		{
			name: "move_speed",
			type: "decimal",
			value: 1.0,
		},
	],
},
vars:	{
	position: 1,
},
properties: {
	node_behavior:	"def(index) switch(vars.end_behavior,
					'circuit', (index)%size(vars.control_points),
					'reverse', (abs((index)%(2*size) - size)) where size = (size(vars.control_points)-1),
					'stop', min(size(vars.control_points), (index)%size(vars.control_points)),
					'fall', min(size(vars.control_points), (index)%size(vars.control_points)),
					)",
	setup:		"[map(vars.control_points, spawn_track_plate(value)), draw_track(vars.control_points), move_to_start(),set(activation_border,actb_size),if(vars.end_behavior = 'reverse',set(vars.position,100*(size(vars.control_points)-1)))]",
	
	move_to_start: "def() if(vars.control_points.size > 0, [set(me.midpoint_x, vars.control_points[0][0]), set(me.midpoint_y, vars.control_points[0][1])])",
	
	spawn_track_plate:	"def(coords) [spawn(self.type + '.track_plate', coords[0], coords[1], 1),
							spawn(self.type + '.track_bolt', coords[0], coords[1], 1, set(child.z, self.z-1))]",
	
	
	draw_track: "def(track_points)	[if(size(track_points) > 1,
			#Draw track segments between each point in our path#
			map(range(size(track_points)-1), 'index', [
				[obj.set_ends(	track_points[index][0],
								track_points[index][1],
								track_points[index+1][0],
								track_points[index+1][1]),
				set(obj.animation, 'track'),
				set(obj.z, self.z-2),
				add_object(obj)] where obj = object('rope_angled_controller')  ])),
				
				#ONLY if we're a circuit, we add a special final piece of track that closes the loop between the first and last ones#
				if(size(track_points) > 2 and end_behavior = 'circuit',
					[obj.set_ends(	track_points[0][0],
								track_points[0][1],
								track_points[track_points.size-1][0],
								track_points[track_points.size-1][1]),
				set(obj.animation, 'track'),
				set(obj.z, self.z-2),
				add_object(obj)] where obj = object('rope_angled_controller')
					
					)
				]",

	actb_size: "200 + max(abs(sort(map(control_points, value[0]),a < b)[0] - sort(map(control_points, value[0]),a < b)[arlength]), abs(sort(map(control_points, value[1]),a < b)[0] - sort(map(control_points, value[1]),a < b)[arlength]))  where arlength = control_points.size - 1",

	speed: "vars.move_speed",
},
on_start_level: "setup",

on_jumped_on: "if(move_when_stood_on = 1 and level.player.standing_on = me, set(vars.is_moving,1))",

on_process: "[
	   if(vars.control_points and size(vars.control_points) >= 2 and is_moving,
		([ add(vars.position,1),
			if(vars.end_behavior = 'stop' and index >= (size(vars.control_points)-1), set(vars.is_moving,false)),
			if(vars.end_behavior = 'fall' and index >= (size(vars.control_points)-1), [set(vars.is_moving,false), set(accel_y,80)]),
			set(midpoint_x, (this_node[0]*this_portion + next_node[0]*next_portion)/100),
			set(midpoint_y, (this_node[1]*this_portion + next_node[1]*next_portion)/100)
	    ] where this_node = vars.control_points[node_behavior(index)],
		        next_node = vars.control_points[node_behavior(index+1)],
				this_portion = 100 - timing%100,
				next_portion = timing%100)
		            where index = switch(end_behavior,
		            		'circuit',	(timing/100)%size(vars.control_points),
		            		'reverse',  (timing/100)%(2*(size(vars.control_points)-1)),
		            		'stop',		min((timing/100),size(vars.control_points)),
		            		'fall',		min((timing/100),size(vars.control_points)))
		            
		) where timing = vars.position*speed,]",
animation: {
	id: "normal",
	no_remove_alpha_borders: true,
	image: "props/platform-tracked-dungeon.png",
	x: 0,
	y: 0,
	w: 48,
	h: 32,
	duration: 10000,
	palettes: "chrome_to_brass",
},







object_type: [
	{
		id: "track_plate",
		zorder: -4,
		animation: {
			id: "normal",
			image: "props/elevator-track-mount.png",
			x: 0,
			y: 0,
			w: 16,
			h: 16,
			palettes: "chrome_to_brass",
		},
	},
	{
		id: "track_bolt",
		zorder: -2,
		animation: {
			id: "normal",
			image: "props/elevator-track-mount.png",
			x: 16,
			y: 0,
			w: 16,
			h: 16,
			palettes: "chrome_to_brass",
		},
	},
],

}
