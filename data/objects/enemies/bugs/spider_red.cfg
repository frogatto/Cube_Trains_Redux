{
id: "spider_red",
always_active: false,
prototype: ["hittable"],
hitpoints: 200,

#	solid_area=5,4,28,29
solid_dimensions: [],
traction_in_air: 1000,
friction: 3000,
timer_frequency: 15,
properties: {
	team: "'evil'",
	attack_damage: 3,
	hurt_velocity_y: 0,
	solid_point: "def(vector) #takes a vector ([x,y]) in which to search exponentially for ground#
			if((solid(level, pointToCheck[0], pointToCheck[1]) where pointToCheck = list_add(vector, [me.midpoint_x, me.midpoint_y]))
			or size(filter(vector, 'vec', abs(vec) > 1000)) > 0, 
				vector, 
				solid_point(list_single_multiply(vector, 1.1))
			)",
	shoot: "def() [	spawn('spider_red.fireball',midpoint_x,y+img_h,facing, set(velocity_y, 500)),
						spawn('spider_red.fireball',midpoint_x,y+img_h,facing, [set(velocity_x, 200), set(velocity_y, 440)]),
						spawn('spider_red.fireball',midpoint_x,y+img_h,facing, [set(velocity_x, -200), set(velocity_y, 440)])
					]",
	attack: "def() [[
			animation('drop'),
			schedule(stepsDown,animation('dangle')),
			schedule(stepsDown + pause,animation('retract')),
			schedule(stepsDown + 0*pause/3, fire_event('shoot') ),
			schedule(stepsDown + 1*pause/3, fire_event('shoot') ),
			schedule(stepsDown + 2*pause/3, fire_event('shoot') ),
			map(range(stepsDown), 'step',
				schedule(step, set(me.y, me.y + (sin(step*(90.0/stepsDown))*me.vars.low[1]/2)*1))
				),

			map(range(stepsUp), 'step',
				schedule(step + stepsDown + pause, set(me.y, me.y + (me.vars.low[1] - (sin(step*(90.0/stepsUp))*me.vars.low[1]))/2 ))
				),
			
			map(range(0, newTime-20), 'step',
				schedule(step, set(x, x + ((sin((percent)*360.0*1.13))*20.0)) where percent = decimal(decimal(step)/decimal(stepsDown+pause)))
				),
			map(range(newTime), 'step',
				schedule(step, fire_event('set_silk'))
				),
			schedule(newTime, [set(x, x), set(y, y), fire_event('recover'), me.vars.silk.set_ends(me.midpoint_x+me.vars.spinneret[0], me.midpoint_y+me.vars.spinneret[1], me.midpoint_x+me.anchor[0], me.midpoint_y+me.anchor[1])])
			] where newTime = stepsUp + stepsDown + pause
			] where stepsDown = 20
			where stepsUp = 80
			where pause = 120",
},
vars: {
	points_value: 10,
	spinneret: [0,-32],
},
consts: {
	basic_type: "spider_red",
	frogourmet_tag: "spider_red",
},

#on_timer = "set(facing, not level.player.midpoint_x < midpoint_x)"
on_set_silk: "me.vars.silk.set_ends(me.midpoint_x+me.vars.spinneret[0], me.midpoint_y+me.vars.spinneret[1], me.vars.position[0]+me.vars.anchor[0], me.vars.position[1]+me.vars.anchor[1])",
on_shoot: "shoot()",
on_create: "[
		]",
on_drop: "[
		[set(vars.anchor, anchor),
		set(vars.position, [self.midpoint_x, self.midpoint_y]),
		[add_object(obj), set(vars.knot, obj)] where obj = object('spider_black.anchor', midpoint_x+anchor[0]-2*facing , midpoint_y+anchor[1]+2, facing),
		[add_object(obj), set(vars.silk, obj)] where obj = object(type + '.silk', x, y, facing, {'x_1' -> midpoint_x+vars.spinneret[0], 'y_1' -> midpoint_y+vars.spinneret[1], 'x_2' -> midpoint_x+anchor[0], 'y_2' -> midpoint_y+anchor[1]})
		] where anchor = solid_point([0,-8]),
		set(vars.low, list_subtract(list_single_divide(solid_point([0,16]), 1.2), [0, 20])),
		fire_event('attack')
		]",
on_attack: "attack()",
on_recover: "[animation('recover'),remove_object(vars.silk),remove_object(vars.knot)]",
on_end_recover_anim: "animation('stand')",
on_process_stand: "[if(cycle%5 = 0, fire_event('tryambush')),set(velocity_x, velocity_x*0.3)]",
on_process_walk: "if((not solid(level, midpoint_x + 50*facing, midpoint_y -60, 20, 60)) or solid(level, midpoint_x + 50*facing, midpoint_y -20, 20, 20), facing(-facing))",
on_end_walk_anim: "if(1d2=2,animation('stand'),animation('walk'))",
on_end_stand_anim: "if(1d2=2,animation('stand'),animation('walk'))",
on_end_dangle_anim: "animation('dangle')",
on_end_retract_anim: "animation('retract')",
on_end_drop_anim: "animation('drop')",
on_tryambush: "if(level.player.midpoint_x > midpoint_x - 140 and level.player.midpoint_x < midpoint_x + 140,
			fire_event('drop'))",
			
on_die: "[remove_object(vars.silk), remove_object(vars.knot), %PROTO%]",

zorder: 15,
editor_info: {
	category: "enemies, forest",
	help: "An enemy that walks back and forth across flat sections of ceiling, and will opportunistically dive to bite the player, on a retracting line of silk.",
},
animation: [
	{
		body_area: "all",
		feet_x: 28,
		feet_y: 46,
		image: "enemies/spider-hanging-red.png",
		pad: 3,
		id: "stand",
		rect: [287,2,343,57],
		frames: 1,
		attack_area: [18,30,40,46],
		duration: 5,
	},
	{
		body_area: "all",
		feet_x: 28,
		feet_y: 46,
		image: "enemies/spider-hanging-red.png",
		pad: 3,
		id: "walk",
		rect: [287,61,343,116],
		frames: 3,
		attack_area: [18,30,40,46],
		accel_x: 10,
		duration: 5,
	},
	{
		body_area: "all",
		feet_x: 28,
		feet_y: 46,
		image: "enemies/spider-hanging-red.png",
		pad: 3,
		id: "recover",
		rect: [167,2,223,57],
		frames: 2,
		attack_area: [18,30,40,46],
		duration: 5,
	},
	{
		body_area: "all",
		feet_x: 28,
		feet_y: 46,
		image: "enemies/spider-hanging-red.png",
		pad: 3,
		id: "drop",
		rect: [47,120,103,175],
		frames: 1,
		duration: 3,
		attack_area: [18,30,40,46],
	},
	{
		body_area: "all",
		feet_x: 28,
		feet_y: 46,
		image: "enemies/spider-hanging-red.png",
		pad: 3,
		id: "dangle",
		rect: [107,61,163,116],
		frames: 3,
		reverse: true,
		duration: 3,
		attack_area: [18,30,40,46],
	},
	{
		body_area: "all",
		feet_x: 28,
		feet_y: 46,
		image: "enemies/spider-hanging-red.png",
		pad: 3,
		id: "retract",
		rect: [107,120,163,175],
		frames: 3,
		reverse: true,
		duration: 3,
		attack_area: [18,30,40,46],
	},
],
object_type: [
	{
		id: "silk",
		ignore_collide: true,
		properties: {
			length: "length(x_1,y_1,x_2,y_2)",
			set_ends: "def(new_x1,new_y1,new_x2,new_y2) [set(vars.x_1,new_x1),set(vars.y_1,new_y1),set(vars.x_2,new_x2),set(vars.y_2,new_y2),fire_event(me,'reset')]",
		},
		on_create: "[
			fire_event(me,'reset'),
		]",
		on_reset: "[
			set(x, (x_2+x_1)/2 -2*facing),
			set(y, (y_2+y_1)/2 - (length/2)),
			set(draw_area, [0, 0, 8, length/2]),
			set(rotate,(angle(x_1,y_1,x_2,y_2)-90) ),
			]",
		editor_info: {
			category: "controllers",
			help: "A controller for angled ropes.",
			var: [
				{
					name: "x_1",
					type: "x",
					value: "x-100",
				},
				{
					name: "y_1",
					type: "y",
					value: "y-100",
				},
				{
					name: "x_2",
					type: "x",
					value: "x+100",
				},
				{
					name: "y_2",
					type: "y",
					value: "y+100",
				},
			],
		},
		animation: {
			image: "enemies/spider-thread.png",
			id: "normal",
			x: 0,
			w: 8,
			y: 0,
			h: 8,
		},
	},
	{
		id: "fireball",
		on_end_anim: "animation('normal')",
		prototype: ["shot"],
		animation: {
			id: "normal",
			image: "enemies/spider-hanging-red.png",
			rect: [78,12,91,25],
			frames: 1,
			duration: 10,
		},
	},
	{
		id: "anchor",
		next_animation: "'normal'",
		always_active: false,
		on_end_anim: "animation('normal')",
		zorder: 5,
		animation: {
			id: "normal",
			image: "enemies/spider-hanging-black.png",
			x: 80,
			y: 1,
			w: 4,
			h: 4,
			frames: 1,
		},
	},
],
}
