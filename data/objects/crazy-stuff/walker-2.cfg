[object_type]
	id=walker-2
	is_human=true

	[editor_info]
		category=player
		help="A small car-sized robot, used to scale cliffs. Warning: Do not occupy."
	[/editor_info]

	[consts]
		axels=[[-28,4], [56,4]]
	[/consts]
	
	[vars]
		axRot=[]
		overshoot=0
		legs=[[]]
	[/vars]
	
	#
	#consts list:
	#axels - [[x,y], …, [x,y]] A list of spots to anchor legs to. Function returns corrected for rotation.
	#
	#
	#vars list:
	#axRot - list of rotations for the legs attached to axels.
	#!overshoot - average of how much we need to 'overshoot' by to get to our desired rotation
	#legs - list of legs, two per axel. ~≘ axels.
	#
	#
	#functions list:
	#spnTmpDbg(self, coordinate pair) - Makes a one frame long target image.
	#spnDbg(self, coordinate pair) - Spawn a little target image.
	#getAxels(self) - Where self.id = walker-2, return consts.axels corrected
	#					for displacement and rotation.
	#getUpperLegLoc(self) - returns a list containing two xy pairs for each axel.~≘ axels [[[x,y],[x,y]], …, [[x,y],[x,y]]]
	#getUpperLegRot(self) - returns a list containing two rotations for each axel. ≘ legs. [[rot, rot], …, [rot,rot]]
	#setUpperLegs(self, locs, rots) - Sets the upper leg objects attached to self. Takes self,
	#									locs (as from getUpperLegLoc), and rots (as from getUpperLegRot).
	#getKneeLoc(self) - Returns a list containing rotations for each leg. Structurally ≘ legs.
	#getLowerLegLoc(self) - List containing two xy pairs for each lower leg. ≘ getUpperLegLoc.
	#getLowerLegRot(self) - As above, but returns rotations.
	#setLowerLegs(self, locs, rots) - Like setUpperLegs, but for the lower legs.
	#getFeet(self) - Returns a list containing each foot with a structure ≘ legs.
	#					This as in, getFeet . axel # . back(0) leg? = data element.
	#
	#
	#
	
	
	functions="
		def spnTmpDbg (self, crd) [
			spawn('walker-2.dbg', crd[0], crd[1], self.facing, [die()] )
		];
		
		def spnDbg (self, crd) [
			spawn('walker-2.dbg', crd[0], crd[1], self.facing)
		];
		
		def getAxels (self) 
			map(range(size(axels)), 'axel_num', 
				#At this point, 'axel' is an x,y pair.#
				map(range(2), 'n', rot_axel[n]+midpoint[n])
				where rot_axel = orbit_obj(0, 0,
					 						angle(0, 0, axel[0], axel[1]) + rotate,
											length(0, 0, axel[0], axel[1]))
				where axel = axels[axel_num])
			where axels = self.consts.axels
			where midpoint = [self.midpoint_x, self.midpoint_y]
			where rotate = self.rotate;
			
		def getUpperLegRot (self)
			map(range(size(axels)), 'axel_num', 
				map(range(size(axels[axel_num])), 'crd_num', 
					#Here, leg is the upper leg object.#
					leg.vars.bjRot+rotate
					where leg = legs[axel_num][crd_num]
				)
			)
			where axels = getAxels(self)
			where legs = self.vars.legs
			where rotate = self.rotate;
			
		def getUpperLegLoc (self)
			map(range(size(axels)), 'axel_num', 
				map(range(size(axels[axel_num])), 'crd_num', 
					#Here, leg is the upper leg object.#
					orbit_obj(
						axels[axel_num][0],
						axels[axel_num][1],
						90 + angle[axel_num][crd_num] + legs.vars.bjRot,
						length(0,0,leg.consts.bjLoc[0],leg.consts.bjLoc[1])
					)
					where leg = legs[axel_num][crd_num]
				)
			)
			where axels = getAxels(self)
			where legs = self.vars.legs
			where angle = getUpperLegRot(self);
			
		def getKneeLoc (self)
			map(range(size(axels)), 'axel_num', 
				map(range(size(axels[axel_num])), 'crd_num',
					orbit_obj(
						axels[axel_num][0],
						axels[axel_num][1],
						90 + angle[axel_num][crd_num] + legs.vars.bjRot,
						length(leg.consts.ljLoc[0],leg.consts.ljLoc[1],leg.consts.bjLoc[0],leg.consts.bjLoc[1])
					)
					where leg = legs[axel_num][crd_num]
				)
			)
			where axels = getAxels(self)
			where legs = self.vars.legs
			where angle = getUpperLegRot(self);
			
		def setUpperLegs (self, locs, rots)
			map(range(size(locs)), 'varA',
				map(range(size(locs[varA])), 'varB',
					[
						set(legcp.midpoint_x, locs[varA][varB][0]),
						set(legcp.midpoint_y, locs[varA][varB][1]),
						set(legcp.rotate, rotate),
					] where legcp = legs[varA][varB]
					where rotate = rots[varA][varB]
				)
			)
			where legs = self.vars.legs;
			
		def getLowerLegLoc (self)
			map(range(size(knees)), 'knee_num', 
				map(range(size(knees[knee_num])), 'knee_sub',
					orbit_obj(
					knee[0],
					knee[1],
					90 + pRot + leg.vars.ljRot,
					length(0,0,leg.vars.leg.consts.joint[0],leg.vars.leg.consts.joint[1])
					)
					where knee = knees[knee_num][knee_sub] #coord#
					where leg = legs[knee_num][knee_sub] #object#
					where pRot = gulr[knee_num][knee_sub]
				)
			)
			where legs = self.vars.legs
			where knees = getKneeLoc(self)
			where gulr = getUpperLegRot(self);
			
		def getLowerLegRot (self)
			map(range(size(axels)), 'axel_num', 
				map(range(size(axels[axel_num])), 'crd_num', 
					#Here, leg is the upper leg object.#
					leg.vars.bjRot+leg.vars.ljRot+rotate
					where leg = legs[axel_num][crd_num]
				)
			)
			where axels = getAxels(self)
			where legs = self.vars.legs
			where rotate = self.rotate;
			
		def setLowerLegs (self, locs, rots)
			map(range(size(locs)), 'varA',
				map(range(size(locs[varA])), 'varB',
					[
						set(legcp.midpoint_x, locs[varA][varB][0]),
						set(legcp.midpoint_y, locs[varA][varB][1]),
						set(legcp.rotate, rotate),
					] where legcp = legs[varA][varB].vars.leg
					where rotate = rots[varA][varB].vars.leg
				)
			)
			where legs = self.vars.legs;
			
		def getFeetLoc (self)
			map(range(size(knees)), 'knee_num', 
				map(range(size(knees[knee_num])), 'knee_sub',
					orbit_obj(
					knee[0],
					knee[1],
					90 + pRot + leg.vars.ljRot,
					length(0,0,leg.vars.leg.consts.joint[0]-leg.vars.leg.consts.foot[0],
							leg.vars.leg.consts.joint[1]-leg.vars.leg.consts.foot[1])
					)
					where knee = knees[knee_num][knee_sub] #coord#
					where leg = legs[knee_num][knee_sub] #object#
					where pRot = gulr[knee_num][knee_sub]
				)
			)
			where legs = self.vars.legs
			where knees = getKneeLoc(self)
			where gulr = getUpperLegRot(self);
			
		def getFeetTouch (self, level)
			map(range(size(feet)), 'axel',
				map(range(size(feet[axel])), 'foot',
					solid(level, feet[axel][foot][0], feet[axel][foot][1], 2, 2)
				)
			)
			where feet = getFeetLoc(self)
			
	"
	
	on_create = "[
		map(range(size(self.consts.axels)), 'avar', 
			map(range(2), 'bvar', 
				spawn('walker-2.upper-leg', x, y, self.facing, set_var('listAddress', [avar,bvar])))),
		set(vars.legs, map(range(size(consts.axels)), ['-','+'])),
		set(vars.axState, map(range(size(consts.axels)), [~ok~,~ok~])), #ok, nopres, lgone, ugone#
		debug(angle_alpha(500, 800, 943))
	]"
	
	on_done_create = "
		set(self.vars.legs,
			map(range(size(self.consts.axels)), 'index',
				map(range(size(self.consts.axels[index])), 'subIndex', 
					self.tmp.legs[context.index*2+subIndex])))
	"
	
	on_ctrl_right = "[
		map(getFeetLoc(self), 'crd', spnDbg(self, crd[0])),
		debug(getFeetTouch(self, level)),
	]"
	
	on_ctrl_left = "[
		map(range(size(getLowerLegLoc(self))), 'varA', 
			map(range(size(getLowerLegLoc(self)[varA])), 'varB', 
				set(getLowerLegLoc(self)[varA][varB].vars.ljRot, getLowerLegLoc(self)[varA][varB].vars.ljRot + 5)
			)
		),
		debug(self.legs[0].vars.ljRot)
	]"
	
	on_process = "[
		setUpperLegs(self, getUpperLegLoc(self), getUpperLegRot(self)),
		setLowerLegs(self, getLowerLegLoc(self), getLowerLegRot(self)),
		set(y, y+1),
	]"
	
	on_end_anim="animation('normal')"
	
	[animation]
		id=normal
		image=experimental/spiderbot.png
		rect=11,9,108,52
		pad=0
		frames=1
		duration=1000
		item_area=all
	[/animation]
	
	[object_type]
		id=upper-leg
		
		[vars]
			bjRot=45
			ljRot=-65
		[/vars]
		
		[consts]
			bjLoc=[-2,28]
			ljLoc=[-2,-36]
		[/consts]
		
		
		#vars list:
		#bjRot - big joint rotation, in degrees
		#ljRot - little joint ^
		#listAddress - A unique pair giving this object's index in it's parent's vars.legs list.
		#
		#consts list:
		#bjLoc - big joint location with respect to midpoint. Coordinate pair.
		#ljLoc - little joint ^
		
		
		on_spawned="[
			#debug('Spawning leg ' + str(self.vars.listAddress)),#
			set(spawner.tmp.legs, spawner.tmp.legs + [self]),
			if(self.vars.listAddress[1] = 0, set(z, z-5), set(z, z+5)),
			spawn('walker-2.lower-leg', x, y, facing),
		]"
		
		[animation]
			id=normal
			image=experimental/spiderbot.png
			rect=10,64,21,105
			pad=0
			frames=1
			duration=1000
			item_area=all
		[/animation]
	[/object_type]
	
	[object_type]
		id=lower-leg
		
		[consts]
			joint=[-2,-54]
			foot=[0,60]
		[/consts]
		
		#consts list:
		#joint - Coordinate pair for the knee joint, with respect to the foot's midpoint.
		#foot - Coordinate pair indicating the offset of the foot end from the midpoint of the object.
		
		on_end_anim="animation('normal')"
		
		on_spawned="[set(spawner.vars.leg, child),
		set(z, spawner.z + if(spawner.z<0, 1, -1))]"
		
		[animation]
			id=normal
			image=experimental/spiderbot.png
			rect=34,64,41,122
			pad=0
			frames=1
			duration=1000
			item_area=all
		[/animation]
	[/object_type]
	
	[object_type]
		id=dbg
		z=150
		
		on_end_anim="animation('normal')"
		
		on_create = "set(z, 150)"
		
		[animation]
			id=normal
			image=experimental/spiderbot.png
			rect=87,65,94,72
			pad=0
			frames=2
			duration=5
			item_area=all
		[/animation]
	[/object_type]
	
	
	
[/object_type]