#onetime level controllers are like the regular type, except with respawns=no set.  Meaning that their script only happens once per playthrough.

	[object_type]
	id=swinging_bar_controller
	next_animation="'normal'"
	
	[editor_info]
		category=controllers
		help="A swinging bar."
		[var]
			name=rotation
			value="65"
		[/var]
		[var]
			name=length
			type=y
			value="midpoint_y+200"
		[/var]
		[var]
			name=damping #@5: ~-.Â½% off velocity each tick#
			type=int
			value="5"
		[/var]
	[/editor_info]
	
	functions="
	def spnDbg (self, crd) [
		spawn('walker-2.dbg', crd[0], crd[1], self.facing)
	];
	
	def sign (x)
		if(x < 0, -1, 1)
	;
	"
	
	on_create = "[
		set(alpha, 0),
		set(vars.length, vars.length - midpoint_y - 70),
		set(vars.rotation, vars.rotation * 100),
		set(vars.orot, vars.rotation * 100),
		[add_object(rope_obj),
		set(vars.bar_obj, rope_obj)
		]where rope_obj = object('rope_angled_controller', midpoint_x, midpoint_y, facing, {
			'x_1' -> self.midpoint_x,
			'y_1' -> self.midpoint_y,
			}),
		set(vars.total_energy, (orbit_obj(self.midpoint_x, self.midpoint_y, 90, vars.length - midpoint_y)[1] - orbit_obj(self.midpoint_x, self.midpoint_y, vars.rotation, vars.length - midpoint_y)[1])),
		spawn('swinging_bar_controller.platform', x,y,facing),
		
		]"
		
	on_process = "[
		vars.bar_obj.set_ends(self.midpoint_x, self.midpoint_y, ncrd[0], ncrd[1]),
		#vars.platform.set_pos(ncrd[0], ncrd[1]),#	#<- this messes up that ^ .#
		set(vars.platform.midpoint_x, ncrd[0]+8),
		set(vars.platform.y, ncrd[1]),
		set(vars.orot, rot),
		set(rotation, rotation + (inertia*(1000-vars.damping))/	1000 + (drot*100)/vars.length),
		] where inertia = (rot-vars.orot)
		where drot = (cos(rot/100)*983)/1000
		where ncrd = orbit_obj(self.midpoint_x, self.midpoint_y, rot/100, vars.length)
		where rot = vars.rotation
		"
	
	on_end_anim="animation('normal')"
	zorder=50

		[animation]
		id=normal
		image=effects/particles.png
		x=117
		y=73
		w=28
		h=28
		#collide="0,0,28,28"
		frames=1
		duration=1000
		[/animation]
		
		[object_type]
			id=platform
			mass = 2
			platform_area=0,26,42,27
			next_animation="'normal'"
			
			[properties]
				set_pos="def(new_x,new_y) [set(midpoint_x, new_x), set(y,new_y)]"
			[/properties]
			
			on_create="[set(red, 200), set(green, 200)]"
			
			on_spawned="[set(spawner.vars.platform, spawner.vars.platform + child),
				set(vars.spawner, spawner)]"
			
					#y:# (level.player.velocity_y + velocity_y)/2 +
					#x:# (level.player.velocity_x + velocity_x)/2 ),
			#on_platform_stood_on=#
			on_process="if(level.player.is_standing_on_platform and distance(level.player, self) < 50, 
				[set(vars.used, 1), 
				if(vars.used = 0, 
					set(vars.spawner.vars.orot, vars.spawner.vars.orot +
					if(angdif < -180, 360+angdif, angdif)
					),
					set(vars.spawner.vars.orot, vars.spawner.vars.orot -
					if(angdif < -180, 360+angdif, angdif)/4
					)
				)where angdif = angle(vars.spawner.x, 
									vars.spawner.y, 
									self.x + velocity_x, 
									self.y + velocity_y)
							  - angle(vars.spawner.x, 
									vars.spawner.y, 
									self.x + (level.player.velocity_x * level.player.mass + velocity_x * mass)/(level.player.mass+mass+1), 
									self.y + (level.player.velocity_y * level.player.mass + velocity_y * mass)/(level.player.mass+mass+1)),
				],
				set(vars.used, 0)
				)"
			
			[animation]
				image=props/rope.png
				id=normal
				x=18
				y=0
				w=42
				h=34
			[/animation]
		[/object_type]
		
		
	[/object_type]