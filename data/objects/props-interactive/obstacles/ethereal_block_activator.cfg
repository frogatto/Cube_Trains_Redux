
# Level controllers are generic objects designed to be used as triggers for scripts.
# Various usages include modifying:
#  - on_create to trigger something on the start of a level.
#  - on_triggered to trigger something when the player reaches a certain spot
{
id: "ethereal_block_activator",
next_animation: "'normal'",
always_active: true,
vars: {
	last_triggered: -400,
},

on_start_level: "[add(variations, [vars.color]),animation('normal')]",

#hack to make it invisible in game, but visible in editor.
#NOTE: If you do scripts that override on_create, use the %PROTO% command. Otherwise, the script eats the above hack to make these invisible.
on_end_anim: "animation('normal')",
zorder: -1,
zsub_order: 0,

properties: {
	toggle_blocks_off: "def() map(filter(level.chars, 'foo', foo.type='ethereal_block'), 'bar', fire_event(bar, 'toggled_off'))",
	toggle_blocks_on: "def() map(filter(level.chars, 'foo', foo.type='ethereal_block'), 'bar', fire_event(bar, 'toggled_on'))",
},

timer_frequency: 10,
on_timer: "if(level.player.midpoint_x > vars.x_bound and level.player.midpoint_x < vars.x2_bound  and level.player.midpoint_y > vars.y_bound and level.player.midpoint_y < vars.y2_bound and cycle - vars.last_triggered > 100, [fire_event('triggered'),set(vars.last_triggered,cycle)])",


on_triggered: "[sound('MenuConfirm.ogg'), if(vars.glow, [schedule(1,fire_event(vars.glow,'die')),set(vars.glow,null),toggle_blocks_off()], [spawn('ethereal_block_activator.glow',mid_x,mid_y,facing,[set(zsub_order,zsub_order +1),set(animation,vars.color)]), toggle_blocks_on() ] )]",

on_child_spawned: "if( child.type = 'ethereal_block_activator.glow', [set(vars.glow, child)])",

editor_info: {
	category: "props",
	var: [
		{
			name: "x_bound",
			type: "x",
			value: "mid_x-150",
		},
		{
			name: "x2_bound",
			type: "x",
			value: "mid_x+150",
		},
		{
			name: "y_bound",
			type: "y",
			value: "mid_y-150",
		},
		{
			name: "y2_bound",
			type: "y",
			value: "mid_y+150",
		},
		{
			name: "color",
			type: "enum",
			value: "'grey'",
			enum_values: "grey,blue,red,green",
		},
	],
},
animation: {
	id: "normal",
	image: "props/cement-block-ethereal-activator.png",
	rect: [0,0,31,47],
	frames: 1,
	duration: 1000,
},
variations: {
	grey:	"null",
	blue:	"[map(filter(doc.animation, rect = [0,0,31,47]), 'anim', set(anim.rect, [32,0,63,47]))]",
	red:	"[map(filter(doc.animation, rect = [0,0,31,47]), 'anim', set(anim.rect, [64,0,95,47]))]",
	green:	"[map(filter(doc.animation, rect = [0,0,31,47]), 'anim', set(anim.rect, [96,0,127,47]))]",
},

object_type: [
	{
		id: "soft_glow",
		animation:		{
				no_remove_alpha_borders: true,
				id: "normal",
				image: "effects/silhouette/soft-glow.png",
				rect: [0,0,255,255],
				frames: 1,
				duration: 1000,
				feet_x: 63,
				feet_y: 63,
		},

	},
	{
		id: "glow",
		
		on_create: "[set(brightness, 500),set(alpha,100),spawn('ethereal_block_activator.soft_glow',mid_x+1,mid_y+1,facing,[set(zsub_order,zsub_order +1),set(alpha,0)])]",
		timer_frequency: 1,
		on_child_spawned: "if( child.type = 'ethereal_block_activator.soft_glow', set(vars.big_glow, child))",
		on_die: "[remove_object(vars.big_glow),remove_object(me)]",
		
		on_timer: "[set(alpha, val),set(vars.big_glow.alpha, val/2),set(vars.big_glow.scale, 0.3*val/255.0 +0.1)] where val = (150 +65*sin(level.cycle*10) +15*sin(level.cycle*2)+10*min(1,tan(level.cycle*33)))",
		
		animation: [
			{
				id: "grey",
				image: "props/cement-block-ethereal-activator.png",
				rect: [0,48,31,95],
				frames: 1,
				duration: 1000,
			},
			{
				id: "blue",
				image: "props/cement-block-ethereal-activator.png",
				rect: [32,48,63,95],
				frames: 1,
				duration: 1000,
			},
			{
				id: "red",
				image: "props/cement-block-ethereal-activator.png",
				rect: [64,48,95,95],
				frames: 1,
				duration: 1000,
			},
			{
				id: "green",
				image: "props/cement-block-ethereal-activator.png",
				rect: [96,48,127,95],
				frames: 1,
				duration: 1000,
			},
		],
	}],
}