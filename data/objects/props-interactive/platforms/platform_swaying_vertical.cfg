{
id: "platform_swaying_vertical",
properties: {
	pulleyDiameter: 18,
	sagOffset: 15,
	topRopeW: "pulleyDiameter",
	polarity: "sign(vars.move_x2-vars.move_x1)",

	#if the platform is flipped, some values need to run in the opposite direction - such as pulley rotation
	sway_x: "sin(dist*4)*5",
	point1: "[vars.move_x1, vars.move_y1]",
	point2: "[vars.move_x1, vars.move_y2]",
	setPos: "def(to) [
			set(vars.knot.midpoint_x, to[0] + pulleyDiameter/2 + sway_x), 
			set(vars.knot.midpoint_y, to[1] + pulleyDiameter/2),
			set(top_pulley.midpoint_x, point1[0] + pulleyDiameter/2),
			set(top_pulley.midpoint_y, point1[1]),
			set(top_pulley.rotate, polarity*(sin(vars.dist)+1)/2*180*15),
			set(bottom_pulley.midpoint_x, to[0] + pulleyDiameter/2 + sway_x),
			set(bottom_pulley.midpoint_y, to[1]),
			set(bottom_pulley.rotate, polarity*(sin(vars.dist)+1)/2*180*15),
			
			
			left_rope.set_ends( point1[0], point1[1],to[0] + sway_x, to[1]),
			right_rope.set_ends(to[0]+pulleyDiameter + sway_x, to[1],point1[0]+pulleyDiameter, point1[1]),
			right_rope.set_offset(length(point1[0], point1[1],to[0],to[1])/2),
			]",
	pos: "[vars.knot.midpoint_x, vars.knot.midpoint_y]",
	stop: "map(range(steps+1), 'step', schedule(step, set(vars.stopped, 1-(steps-step)/decimal(steps)))) where steps = 100",

	#Might want to include an if statement to only do this if it'll decrease speed.
	go: "map(range(steps+1), 'step', schedule(step, set(vars.stopped,   (steps-step)/decimal(steps)))) where steps = 100",
	actBsize: "max(abs(vars.move_x1-vars.move_x2),abs(vars.move_y1-vars.move_y2))*2",
},
vars: {
	actual_speed: 0,
	children: [],
},

hidden_in_game: true,
on_start_level: "set(activation_border, actBsize)",
on_editor_changed_variable: "fire_event('done_create')",
on_create: "[
		set(activation_border, actBsize),
		set(vars.move_x1, move_x1 - if(facing < 0, 9, 0)),
		set(vars.move_x2, move_x2 - if(facing > 0, 9, 0)),
		set(vars.move_y1, move_y1 - 34),
		set(vars.move_y2, move_y2),
		
		[add_object(obj),
		set(vars.knot, obj)
		] where obj = object('platform_swaying_vertical.knot',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		if(1, #here, we'd want to switch based on available types of platform, for now we'll just have one.#
			[add_object(obj),
			set(vars.the_platform, obj)
			] where obj = object('platform_swaying_vertical.simple_platform_controller',vars.move_x1,vars.move_y1,facing,{'parent'->me,'activation_border'->actBsize})
		),

		[add_object(obj),
		set(vars.top_pulley, obj)
		] where obj = object('platform_swaying_vertical.pulley',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),

		[add_object(obj),
		set(vars.bottom_pulley, obj)
		] where obj = object('platform_swaying_vertical.pulley',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		
		[add_object(obj),
		set(vars.left_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		[add_object(obj),
		set(vars.right_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		if(is_zipline, [set(vars.dist, 95), set(vars.stopped, 1)]),
		]",
on_done_create: "set(vars.actual_speed, vars.speed*50/distance(point1, point2))",
on_process: "[
		add(vars.dist, vars.actual_speed*(1-vars.stopped)),
		setPos(newPos),
		] where newPos = list_add(list_tween(point1, point2, (sin(vars.dist)+1)/2), [0, sqrt(min(distance(pos, point1), distance(pos, point2)))])",
on_button_pressed: "go",
on_button_released: "stop",
editor_info: {
	category: "platforms",
	help: "A moving platform rigged from ropes.",
	var: [
		{
			name: "speed",
			value: 10,
		},
		{
			name: "move_x1",
			type: "x",
			value: "x",
		},
		{
			name: "move_y1",
			type: "y",
			value: "y",
		},
		{
			name: "move_y2",
			type: "y",
			value: "y + 200",
		},
		{
			name: "rope_height",
			value: 128,
		},
		{
			name: "stopped",
			type: "boolean",
			value: 0,
		},
		{
			name: "dist",
			type: "int",
			value: 0,
		},
		{
			name: "is_zipline",
			type: "boolean",
			value: 0,
		},
	],
},
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
object_type: [
	{
		id: "knot",
		zorder: 2,
		animation: {
			id: "normal",
			image: "props/rope-platform.png",
			rect: [81,1,93,13],
			frames: 1,
			duration: 1000,
		},
	},
	{
		id: "pulley",
		zorder: 2,
		animation: {
			id: "normal",
			image: "props/rope-platform.png",
			rect: [65,1,77,13],
			frames: 1,
			duration: 1000,
		},
	},
	{
		id: "simple_platform_controller",
		zorder: 2,
		properties: {
			tilt: 0,
			basketWobble: "sin(cycle*8)*vars.bwmag*0.55",
			parentSpeed: "(1.0 - parent.vars.stopped)",
			sway_x: "-parent.sway_x",

			#sway_x="parent.polarity * parentSpeed * ((100*sin(vars.inertia/2))+basketWobble/2)"
			setPos: "def() [
				vert_rope.set_ends(parent.vars.knot.midpoint_x, parent.vars.knot.midpoint_y, parent.vars.knot.midpoint_x + sway_x, parent.vars.knot.midpoint_y + parent.vars.rope_height),
				
				set(vars.basket.midpoint_x, parent.vars.knot.midpoint_x+sway_x),
				set(vars.basket.midpoint_y, parent.vars.knot.midpoint_y + parent.vars.rope_height),
				set(vars.basket.rotate, (parentSpeed*(-vars.inertia/6.0 + basketWobble))/2.0)
	
			]",
			decayBasketWobble: "def() set(vars.bwmag, max(6.0,decimal(vars.bwmag)*(0.99/1)))",
			setInertia: "def() [
						schedule(2, 
						
						set(vars.inertia, 50*(sin(parent.vars.dist+90*parent.polarity))))
			]",
			player_is_standing_on_us: "if(level.player.standing_on = vars.basket,1,0)",
			not_in_zipline_bottomOut: "if(mod(parent.vars.dist-90,360) < 150 or mod(parent.vars.dist-90,360) > 210, 1, 0)",
			not_in_zipline_topOut: "if(mod(parent.vars.dist-90,360) > 50 and mod(parent.vars.dist-90,360) < 300, 1, 0)",
			testZipline: "def() if(parent.vars.is_zipline,
				[if(player_is_standing_on_us, if(not_in_zipline_bottomOut, [if(mod(parent.vars.dist-90,360) > 180, set(parent.vars.dist,parent.vars.dist - 2*mod(parent.vars.dist-90,180) )),
				if(parent.stopped = 1.0, [parent.go ])], if(parent.stopped = 0.0,parent.stop))),
			
				if((not player_is_standing_on_us), if(not_in_zipline_topOut, if(parent.stopped = 1.0, parent.go), if(parent.stopped = 0.0, parent.stop)) )])",
		},
		on_create: "[	
					set(alpha,0),
					set(x,parent.vars.knot.x),
					set(y,parent.vars.knot.y),
					set(vars.bwmag,8.0),
					
					[add_object(obj),
					set(vars.vert_rope, obj)
					] where obj = object('rope_angled_controller'),
					
					[add_object(obj),
					set(vars.basket, obj)
					] where obj = object('platform_swaying_vertical.shakebasket',x,y,facing,{'source'->me})
					
			]",
		on_process: "[setPos(),setInertia(),decayBasketWobble(),testZipline()]",
		animation: {
			id: "normal",
			image: "effects/particles.png",
			x: 210,
			y: 166,
			w: 28,
			h: 28,
			frames: 1,
			duration: 1000,
		},
	},
	{
		id: "shakebasket",
		zorder: -1,
		platform_area: [22,86,52,87],
		on_jumped_on: "if(level.player.standing_on = me, [add(source.vars.bwmag, 10),fire_event(source.parent,'tripped')])",
		next_animation: "'normal'",
		animation: [
			{
				palettes: "forest_graveyard_shift,forest_autumn,forest_decay,forest_clean,forest_verdant",
				no_remove_alpha_borders: true,
				id: "normal",
				image: "wip/basket-mockup2.png",
				rect: [75,0,146,99],
				frames: 11,
				reverse: true,
				duration: 4,
			},
			{
				palettes: "forest_graveyard_shift,forest_autumn,forest_decay,forest_clean,forest_verdant",
				no_remove_alpha_borders: true,
				id: "normal",
				image: "wip/basket-mockup2.png",
				rect: [219,0,290,99],
				frames: 7,
				reverse: true,
				duration: 4,
			},
		],
	},
],
}
