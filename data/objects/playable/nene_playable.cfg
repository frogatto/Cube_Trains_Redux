
	[object_type]
	id=nene_playable
	hitpoints=5
	feet_width=1
	mass=6
	springiness=100
	friction=2000
	solid_area=15,16,29,38
	solid_dimensions=player
	vehicle=false
	body_harmful=no

		[vars]
		damage=1
		jump_power=1400
		jump_boost=100
		jump_glide=30
		glide_limiter=200
		swim_accel=140
		unlocked_items="['heart_object','points_cube','points_cube']"
		team="'player'"
		tank_fuel=100
		[/vars]

		[consts]
		tank_size=100
		tank_loss=5
		tank_gain=1
		[/consts]

	functions="
	  #function which returns true if the object is in an animation that
	   requires Nene be on the ground#	
	  def animation_requires_standing(obj)
	    obj.animation in ['stand', 'stand_up_slope', 'stand_down_slope', 'walk', 'lookup', 'crouch', 'enter_crouch', 'leave_crouch', 'turn', 'roll','skid'];
	  def set_facing(obj, facing) if(obj.facing != facing and (not (obj.animation in ['interact', 'slide'])),
	           [facing(facing), if(obj.is_standing, animation('turn'))]);

	  def stand(obj)
	   if(abs(obj.velocity_x) > 240 and (not obj.animation in ['walk']), animation('skid'),
	     if(abs(obj.slope_standing_on) < 20, animation('stand'),
		   if(obj.slope_standing_on*obj.facing > 0, animation('stand_down_slope'),
			                                animation('stand_up_slope'))));


	  #make Nene walk. anim can be either 'walk'. Does checking
	   to make sure Nene is in a state where she can walk.
	   Will make Nene 'glide' if in mid air.#
	  def walk(obj, dir, anim)
	    if(obj.is_standing and (not (obj.animation in ['walk', 'jump', 'turn', 'crouch', 'enter_crouch', 'roll', 'attack', 'up_attack', 'interact'])),
		   [animation(anim)],
	       #Nene is in the air, so make her glide.#
		   if(((not obj.is_standing) and obj.animation != 'slide'), set(obj.velocity_x, obj.velocity_x + obj.jump_glide*dir)));

	  #Function to attempt to make Nene crouch; does checking to make
	   sure she's in a state that allows entering a crouch.#
	  def crouch(obj)
	  	if(((not obj.animation in ['crouch', 'enter_crouch', 'roll', 'interact'] ) and obj.is_standing), animation('enter_crouch'));
	  def roll(obj)
	    if( obj.animation in ['crouch'] and obj.is_standing, animation('roll'));
	  
	  #Function to make Nene attack. Does checking and chooses the
	   appropriate type of attack animation, if any.#
	  def attack(obj, charge_cycles)
	  [if('fat' in obj.variations,
				[animation('spit')],
	    if(obj.animation in ['stand', 'stand_up_slope', 'stand_down_slope', 'walk', 'lookup','skid'], animation(if(obj.ctrl_up, 'up_', '') + if(charge_cycles > 20, 'energyshot', 'attack'))))];

	  #Function to do a water-equivalent of standing.#
	  def float(obj)
		animation('swim_side_idle');
	    
	  #Function to enter swimming frames.#
	  def swim(obj,dirx,diry)
	    if(dirx or diry,
	    [if(obj.underwater and (not (obj.animation in ['swim_side','swim_down','swim_up'])), [if(dirx,animation('swim_side')),if(diry < 0,animation('swim_up')),if(diry > 0,animation('swim_down'))]), if(obj.underwater,
		[set(velocity_x, obj.velocity_x + obj.swim_accel*dirx),
		 set(velocity_y, obj.velocity_y + obj.swim_accel*diry)
		])]);
	   
		   
	  #Function to test if Nene should have post-hit invinicibility.  This elegantly(?) results in Nene being invincible for the first few seconds of a level.#
	  def is_invincible(obj)
	  	if((abs(obj.tmp.time_last_hit - obj.cycle) < 100) and (obj.cycle > 100), 1, 0);
		def can_slide(obj)
           solid(obj.level, if(obj.facing > 0, obj.solid_rect.x2+1, obj.solid_rect.x-1), obj.solid_rect.y) and
           solid(obj.level, if(obj.facing > 0, obj.solid_rect.x2+1, obj.solid_rect.x-1), obj.solid_rect.y2) and
		   obj.velocity_y < 300 and obj.velocity_y > -1000;


	   def swallowing_object(frog)
	     if(frog.attached_objects, map(frog.attached_objects, 'obj',
	      if(abs(obj.midpoint_x - context.frog.midpoint_x) < 4, set(attached_objects, []), set(obj.midpoint_x, obj.midpoint_x + if(obj.midpoint_x > context.frog.midpoint_x, -4, 4)))
		  ));

	  1"

	on_create="[animation('stand')]"
	on_enter_level="[animation('stand')]"
	
	#on_collide_with="set(hitpoints, hitpoints - 1)"
	on_die="[spawn('die_cloud', midpoint_x, midpoint_y, facing)]"
	on_ctrl_jump="[if(is_standing and (not (animation in ['interact'])), [animation('jump'), set(velocity_x, velocity_x + velocity_x/2), if(ctrl_down and is_standing_on_platform, [set(fall_through_platforms, 10), set(velocity_y, velocity_y + jump_power/10)], set(velocity_y, velocity_y - jump_power))]),
	if(animation = 'slide', [facing(-facing), animation('jump'), set(velocity_x, -facing*800), set(velocity_y, -1000)])]"
	on_ctrl_up="[if(abs(velocity_x) < 100, map(filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 'obj', [fire_event(obj, 'interact'), animation('interact')]))]"

	on_end_interact="if(animation = 'interact', animation('stand'))"

	on_process="[
	    if(not ctrl_attack, set(vars.tank_fuel, min(consts.tank_size, vars.tank_fuel + consts.tank_gain))),
		if(ctrl_attack and (cycle%4 = 0) and vars.tank_fuel > 0, [set(vars.tank_fuel, vars.tank_fuel - consts.tank_loss), spawn('nene_flameshot',midpoint_x + 30*facing,midpoint_y+if(animation = 'lookup', -15, 20),facing, [set(team, vars.team), set(velocity_x, velocity_x), if(animation = 'lookup', set(velocity_y, -500))])]),
	    if((not is_standing) and animation_requires_standing(self), [animation('fall')]),
	    if(ctrl_up and (animation in ['stand','stand_up_slope','stand_down_slope']), animation('enter_lookup')),
	    if((animation in ['enter_lookup', 'lookup']) and (not ctrl_up), stand(self)),
		if(underwater,[
			swim(self, ctrl_right - ctrl_left, ctrl_down - ctrl_up),
			if((not (ctrl_left or ctrl_right or ctrl_up or ctrl_down)) and (animation in ['swim_side','swim_up','swim_down']),
		   float(self)) ],
		   [if(ctrl_left,  if(ctrl_attack, walk(self, -1, 'walk'), [walk(self, -1, 'walk'), set_facing(self, -1)])),
		   if(ctrl_right, if(ctrl_attack, walk(self,  1, 'walk_back'), [walk(self,  1, 'walk'), set_facing(self,  1)])),
		 if(ctrl_down, crouch(self)),
		 if((not (ctrl_left or ctrl_right)) and (animation in ['walk', 'walk_back']),
		 stand(self))		]),
		if(is_invincible(self), set(alpha,(wave(cycle*300)+1000)/10 + 100 ), set(alpha,255)),
				]"
					
	on_process_jump="if(ctrl_jump, [set(velocity_y, velocity_y - jump_boost)])"
	on_process_fall="if(ctrl_jump, animation('begin_glide'),if(is_standing, animation('stand')))"
	on_process_glide="if(velocity_y >glide_limiter, set(velocity_y, glide_limiter))"

	#check if we end up on a slope in which case we re-calculate our standing.
	on_process_stand="if(abs(slope_standing_on) > 20, stand(self))"
	on_process_stand_up_slope="if(slope_standing_on*facing > -20, stand(self))"
	on_process_stand_down_slope="if(slope_standing_on*facing < 20, stand(self))"

	on_process_lookup="[set(tmp.lookup_time, tmp.lookup_time+1), if(tmp.lookup_time = 50, set(vertical_look, -200))]"
	on_process_crouch="[set(tmp.lookdown_time, tmp.lookdown_time+1), if(tmp.lookdown_time = 50, set(vertical_look, 200))]"
	on_leave_lookup_anim="[set(tmp.lookup_time, 0), set(vertical_look, 0)]"
	on_leave_crouch_anim="[set(tmp.lookdown_time, 0), set(vertical_look, 0)]"

	on_process_slide="if(not can_slide(self), animation('fall'))"
	on_leave_slide_anim="[if(ctrl_left, facing(-1)), if(ctrl_right, facing(1))]"

	on_enter_water="[float(self),
		add_wave(midpoint_x, y2, -2000, 5*velocity_y, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, 2000, 5*velocity_y, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, -1000, 3*velocity_y, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, 1000, 3*velocity_y, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, -500, 2*velocity_y, 10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2, 500, 2*velocity_y, 10*velocity_y, 100, 100)
	]
	
	"
	on_exit_water="[
		add_wave(midpoint_x, y2+100, 2000, -5*velocity_y, -30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2+100, -2000, -5*velocity_y, -30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2+100, 1000, -3*velocity_y, -20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2+100, -1000, -3*velocity_y, -20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2+100, 500, -2*velocity_y, -10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2+100, -500, -2*velocity_y, -10*velocity_y, 100, 100),

	
	animation('fall'), if(velocity_y < 0, set(velocity_y, velocity_y*3))]"

	on_end_enter_crouch_anim="animation('crouch')"
	on_end_crouch_anim="if(ctrl_down, animation('crouch'), animation('leave_crouch'))"
	on_change_animation_failure="[animation(previous_animation)]"
	on_end_leave_crouch_anim="stand(self)"
	
	on_enter_skid_anim="if(abs(velocity_x) > 300, spawn('dust_cloud_skid', midpoint_x + 36*facing, y2 - 10, facing))"
	
	on_end_roll_anim="animation('crouch')"
	on_end_turn_anim="stand(self)"
	on_end_jump_anim="if(ctrl_jump,animation('begin_glide'),animation('fall'))"
	on_end_begin_glide_anim="if(ctrl_jump,animation('glide'),animation('fall'))"
	on_end_glide_anim="if(ctrl_jump,animation('glide'),animation('fall'))"
	on_end_walk_anim="animation('walk')"
	on_end_stand_anim="stand(self)"
	on_end_skid_anim="stand(self)"
	on_end_stand_up_slope_anim="stand(self)"
	on_end_stand_down_slope_anim="stand(self)"
	on_end_dash_anim="stand(self)"

	on_enter_spit_anim="set(variations, [])"
	on_end_spit_anim="stand(self)"
	on_leave_spit_anim="[
	     set(tmp.swallowed.velocity_x, velocity_x + facing*1000),
	     set(tmp.swallowed.velocity_y, velocity_y - 100),
		 set(tmp.swallowed.midpoint_x, midpoint_x),
		 set(tmp.swallowed.y, y),

	     #set the object's timestamp for when it was spat out, so we
		  can make ourselves invincible to it for a little while#
		 set(tmp.swallowed.spat_out_at, level.cycle),
		 resolve_solid(tmp.swallowed, facing, 0, 200),
	     add_object(tmp.swallowed)]"

	on_process_attack="swallowing_object(self)"
	on_process_jump_attack="swallowing_object(self)"
	
	on_end_energyshot_anim="stand(self)"
	on_end_up_energyshot_anim="stand(self)"
	on_end_attack_anim="[
		 if(('fat' in variations), animation('swallow')),
	                               stand(self)]"
	on_leave_attack_anim="set(attached_objects, [])"
	on_leave_up_attack_anim="set(attached_objects, [])"
	on_leave_jump_attack_anim="set(attached_objects, [])"
	on_end_swallow_anim="stand(self)"
	on_end_enter_lookup_anim="animation('lookup')"
	on_end_lookup_anim="animation('lookup')"
	on_end_up_attack_anim="stand(self)"
	on_end_jump_attack_anim="animation('fall')"
	on_end_fall_spin_attack_anim="animation('fall')"
	on_end_swim_side_idle_anim="float(self)"
	on_end_swim_side_anim="if(underwater,animation('swim_side'),stand(self))"
	on_end_swim_up_anim="if(underwater,animation('swim_up'),stand(self))"
	on_end_swim_down_anim="if(underwater,animation('swim_down'),stand(self))"

	on_collide_feet="if(standing_on and standing_on.springiness > 0, set(velocity_y, -(velocity_y*standing_on.springiness)/100),
	    [set(velocity_x, velocity_x - velocity_x/4), stand(self)])"
	on_collide_head="[if(animation = 'jump', animation('fall')), if(velocity_y < 0, set(velocity_y, 0))]"
	on_collide="[set(velocity_x, 0), if((animation in ['jump', 'fall']) and can_slide(self) and abs(velocity_x) > 200, [animation('slide'), set(velocity_y, 0)])]"

	##Damage handlers:
			# If we get hit, it's important that we're only hit once by an attack.  Each attacker keeps a list of what they've already hit to make sure that doesn't happen.  This checks/populates that list as appropriate.  The attacker is responsible for clearing the list as appropriate.
			# we also have a primitive window of 3 seconds of post-hit invincibility here for all sources of damage
	on_collide_object_body=" if( collide_with_area = 'attack' and (not is_invincible(self)) and ((not collide_with.spat_out_at) or collide_with.spat_out_at < level.cycle - 20),
		if(not (me in collide_with.tmp.already_hit), [set(collide_with.tmp.already_hit, collide_with.tmp.already_hit + [me]),
	
			set(hitpoints, hitpoints - collide_with.vars.damage), animation('hurt'), set(green, 100), set(blue, 100), set(velocity_y,-1000), set(velocity_x,400 * collide_with.facing), set(tmp.time_last_hit, cycle)]))"

	on_collide_object_grab="if(collide_with_area = 'body',
	                        [remove_object(collide_with), set(attached_objects, [collide_with]), set(tmp.swallowed, collide_with), set(variations, 'fat')])"

	on_collide_damage="if((not is_invincible(self)), [set(hitpoints, hitpoints - collide_with.vars.damage), animation('hurt'), set(green, 100), set(blue, 100), set(tmp.time_last_hit, cycle)])"


	on_enter_anim="set(tmp.already_hit, [])"

	
	on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)], [set(green, 100), set(blue, 100)])"
	on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
	on_end_hurt_anim="animation('stand')"


	[vars]
		unlocked_items="['heart_object','heart_object','fire_powerup']"
	[/vars]

	[portrait]
	image=gui/inventory.png
	rect=85,239,162,312
	[/portrait]
	[name]
	image=gui/inventory.png
	rect=9,252,75,270
	[/name]

		[base:animation]
		image=characters/nene-spritesheet1.png
		accel_x=0
		accel_y=80
		pad=3
		body_area=all
		[/animation]
		
		
		[animation]
		id=stand
		rect=2,2,43,39
		duplicates=6
		frames=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=stand #blink variant
		rect=137,2,178,39
		frames=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=stand_up_slope
		x=212
		y=2
		w=32
		h=35
		frames=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=stand_down_slope
		x=317
		y=2
		w=32
		h=35
		frames=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=lookup
		rect=318,43,359,80
		frames=1
		duration=3
		reverse=yes
		[/animation]

		[animation]
		id=enter_lookup
		rect=318,43,359,80
		frames=1
		duration=3
		reverse=yes
		[/animation]
		
		[animation]
		id=crouch
		#solid_area=8,17,24,30
		rect=363,2,412,39
		frames=1
		duration=1
		rotate_on_slope=yes
		[/animation]

		[animation]
		id=enter_crouch
		#solid_area=8,17,24,30
		rect=363,2,412,39
		frames=1
		duration=3
		rotate_on_slope=yes
		[/animation]

		[animation]
		id=leave_crouch
		rect=363,2,412,39
		frames=1
		duration=3
		play_backwards=yes
		rotate_on_slope=yes
		[/animation]


		[animation]
		id=roll
		solid_area=8,17,24,30
		sound=roll.ogg
		accel_x=1000
		velocity_x=500
		x=107
		y=197
		w=32
		h=33
		frames=11
		duration=3
		scale=2		
		[/animation]

		
		[animation]
		id=walk_back
		solid_area=17,22,31,44
		rect=2,43,52,87
		accel_x=-1600
		frames=1
		reverse=yes
		duration=5
		[/animation]
		
		[animation]
		id=walk
		solid_area=17,22,31,44
		rect=2,43,52,87
		accel_x=1600
		frames=3
		reverse=yes
		duration=5
		[/animation]
		
		[animation]
		id=dash_back
		solid_area=17,22,31,44
		rect=2,91,50,133
		velocity_x=2000 * -facing
		frames=1
		reverse=yes
		duration=1
		[/animation]
		
		[animation]
		id=dash
		solid_area=17,22,31,44
		rect=2,91,50,133
		velocity_x=2000 * facing
		frames=2
		reverse=yes
		duration=1
		[/animation]

		[animation]
		id=skid
		rect=2,91,50,131
		frames=1
		duration=10
		[/animation]

		[animation]
		id=turn
		rect=318,2,359,39
		frames=1
		duration=5
		[/animation]

		[animation]
		id=jump
		sound=FrogJump1.ogg,FrogJump2.ogg
		rect=2,135,48,176
		frames=4
		duration=6
		[/animation]

		[animation]
		id=begin_glide
		rect=2,180,48,231
		frames=3
		duration=4
		[/animation]

		[animation]
		id=glide
		rect=2,235,48,286
		frames=8
		duration=2
		[/animation]
	
		[animation]
		id=fall
		rect=202,135,248,176
		y=38
		w=32
		h=48
		duration=12
		frames=2
		[/animation]

	
		[animation]
		id=attack
		sound=punch.ogg
		events="3:side_attack_fx_one,6:side_attack_fx_two,9:side_attack_fx_three,8:side_attack_contact"
		
		x=2
		y=269
		w=49
		h=37
		solid_area=7,12,21,34
		grab_area=32,24,49,34
		body_area=6,11,24,36
		frames=8
		duration=3
		reverse=no
		[/animation]

		[animation]
		id=up_attack
		sound=punch.ogg
		events="6:up_attack_contact"
		x=2
		y=351
		w=41
		h=44
		
		solid_area=7,19,21,41
		attack_area=16,0,28,10
		frames=6
		duration=2
		reverse=no
		[/animation]

		[animation]
		id=run_attack
		events="6:7:8:9:10:11:run_attack_contact"
		sound=slash.ogg

		solid_area=18,6,32,28
		accel_x=3200
		x=2
		y=403
		w=68
		h=29
		attack_area=20,14,70,40
		frames=5
		duration=3
		reverse=no
		[/animation]

		[animation]
		id=jump_attack
		events="3:side_attack_fx_one,6:side_attack_fx_two,9:side_attack_fx_three,8:side_attack_contact"
		sound=kick.ogg
		x=2
		y=310
		w=49
		h=37
		grab_area=28,19,43,31
		body_area=6,11,24,36
		frames=9
		duration=2
		reverse=no
		[/animation]

		[animation]
		id=fall_spin_attack
		events="3:6:9:12:15:18:21:24:spin_attack_contact"
		sound=SpinAttack.ogg
		x=3
		y=436
		w=32
		h=42
		attack_area=8,30,24,42
		frames=8
		duration=3
		reverse=no
		[/animation]

		[animation]
		id=hurt
		sound=TakeDamage.wav
		velocity_x=-1000
		velocity_y=-1000
		rect=273,2,314,39
		frames=1
		duration=18
		events="6:12:18:hurtflicker"
		[/animation]

		[animation]
		id=interact
		image=characters/frogatto-spritesheet1.png
		collide_x=10
		collide_y=6
		collide_w=15
		collide_h=16
		feet_x=16
		feet_y=32
		accel_y=80
		x=72
		y=161
		w=32
		h=32
		frames=4
		duration=4
		scale=2
		pad=3
		[/animation]



		[animation]
		id=slide
		image=characters/frogatto-spritesheet1.png
		accel_y=10
		x=352
		y=40
		w=32
		h=34
		duration=30
		frames=1
		solid_area=14,17,28,30
		[/animation]


		[animation]
		id=push
		image=characters/frogatto-spritesheet2.png
		x=413
		y=49
		w=47
		h=48
		frames=6
		frames_per_row=2
		duration=5
		[/animation]





		[animation]
		id=swim_side_idle
		image=characters/frogatto-spritesheet2.png
		accel_y=0
		x=3
		y=85
		w=39
		h=36
		frames=6
		frames_per_row=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=swim_down_idle
		image=characters/frogatto-spritesheet2.png
		accel_y=0
		x=129
		y=85
		w=39
		h=36
		frames=6
		frames_per_row=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=swim_up_idle
		image=characters/frogatto-spritesheet2.png
		accel_y=0
		x=255
		y=85
		w=39
		h=36
		frames=6
		frames_per_row=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=swim_side
		image=characters/frogatto-spritesheet2.png
		sound=Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg
		accel_y=5
		accel_x=0
		x=3
		y=163
		w=39
		h=36
		frames=3
		duration=6
		[/animation]

		[animation]
		id=swim_down
		image=characters/frogatto-spritesheet2.png
		sound=Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg
		accel_y=0
		x=129
		y=163
		w=39
		h=36
		frames=3
		duration=6
		[/animation]

		[animation]
		id=swim_up
		image=characters/frogatto-spritesheet2.png
		sound=Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg
		accel_y=0
		x=255
		y=163
		w=39
		h=36
		frames=3
		duration=6
		[/animation]



		[animation]
		id=energyshot
		image=characters/frogatto-spritesheet2.png
		rect=3,202,43,245
		frames=2
		frames_per_row=1
		duration=5
		solid_area=6,14,20,36
		[/animation]

		[animation]
		id=energyshot_jump
		image=characters/frogatto-spritesheet2.png
		rect=47,202,87,245
		frames=2
		frames_per_row=1
		duration=5
		[/animation]

		[animation]
		id=up_energyshot
		image=characters/frogatto-spritesheet2.png
		rect=91,202,131,245
		frames=2
		frames_per_row=1
		duration=5
		[/animation]

		[animation]
		id=energyshot_down
		rect=135,202,175,245
		image=characters/frogatto-spritesheet2.png
		frames=2
		frames_per_row=1
		duration=5
		[/animation]

		[animation]
		id=energyshot_crouch
		rect=179,202,219,245
		image=characters/frogatto-spritesheet2.png
		frames=2
		frames_per_row=1
		duration=5
		[/animation]
		
		[animation]
		id=portrait
		duplicates=6
		image=gui/inventory.png
		rect=85,239,162,312
		frames=3
		duration=6
		reverse=yes
		[/animation]

	[/object_type]
