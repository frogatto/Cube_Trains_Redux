{
id: "menu_selector",
ignore_collide: true,
zorder: 20,
is_human: true,

editor_info: {
	category: "playable",
	},
	
vars: {
	currently_selected: null,
	},

properties: {
	item_chars: "filter(level.chars, value.consts.is_menu_item)",
	
	closest_item: "choose(item_chars, -distance(value, self))",
	
	select: "def(item) if(item, [
		set(xy, item.xy),
		fire_event(item, 'selected'),
		fire_event(currently_selected, 'deselected'),
		],[
		fire_event('failed_select'),
		])",
		
	// debug_fn([value.msg, decimal(x-value.x)/decimal(y-value.y)], true))
	next_item: "def(direction) //as on a number pad
		choose(
			filter(item_chars,
				switch(direction,
					2, value.y > y and abs(decimal(x-value.x)/decimal(y-value.y)) <= 1,
					4, value.x < x and abs(decimal(x-value.x)/decimal(y-value.y)) >= 1, // The below is a strange workaround for a bug involving infinite math. the abs() is returning the absolute of -inf8, which is one more than inf7, so it wraps back around to -inf8. However, -1/0 is inverting inf7, coming out with -inf7, which is one more than -inf8â€¦ as far as I can tell.
					6, value.x > x and (abs(decimal(x-value.x)/decimal(y-value.y)) >= 1 or abs(decimal(x-value.x)/decimal(y-value.y)) < -1/0),
					8, value.y < y and abs(decimal(x-value.x)/decimal(y-value.y)) <= 1,
					)),
			-distance(value, self))",
},

on_load: "[
	select(closest_item),
	]",
	
on_ctrl_down: "select(next_item(2))",
on_ctrl_up:   "select(next_item(8))",
on_ctrl_left: "select(next_item(4))",
on_ctrl_right:"select(next_item(6))",

animation: {
	id: "normal",
	image: "characters/stand_in_selector.png",
	rect: [0,0,15,15],
}}