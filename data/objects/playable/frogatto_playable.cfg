
	[object_type]
	id=frogatto_playable
	hitpoints=3
	feet_width=1
	mass=5
	friction=2000
	solid_area=9,8,23,30
	solid_dimensions=player,common
	vehicle=false
	is_human=true
	traction_in_water=1000
	affected_by_currents=yes

		[editor_info]
		category=player
		[/editor_info]

		[consts]
		JUMP_OUT_OF_WATER_BOOST=350
		FAT=0
		max_swallow_size=16
		[/consts]

		[vars]
		damage=1
		swim_accel=140
		unlocked_items="['heart_object','points_cube','points_cube']"
		team="'player'"
		charge_time=20
		coins=100
		jump_power=1200
		jump_boost=90
		jump_glide=30
		walk_accel=1600
		run_accel=2800
		[/vars]

		[tmp]
		start_attack_cycle=0
		time_last_hit=0
		left=0
		right=0
		running=0
		[/tmp]

	functions="
	  #function which returns true if the object is in an animation that
	   requires frogatto be on the ground#	
	  def animation_requires_standing(object_type obj)
	    obj.animation in ['stand', 'stand_up_slope', 'stand_down_slope', 'run', 'walk', 'lookup', 'crouch', 'enter_crouch', 'leave_crouch', 'turn', 'roll','skid'];
	  def set_facing(object_type obj, facing) if(obj.facing != facing and (not (obj.animation in ['interact', 'slide'])),
	           [facing(facing), if(obj.is_standing, animation('turn'))]);

	  def stand(object_type obj)
	   if(abs(obj.velocity_x) > 240 and (not obj.animation in ['walk']), animation('skid'),
	     if(abs(obj.slope_standing_on) < 20, animation('stand'),
		   if(obj.slope_standing_on*obj.facing > 0, animation('stand_down_slope'),
			                                animation('stand_up_slope'))));


	  #make Frogatto walk. anim can be either 'walk' or 'run'. Does checking
	   to make sure Frogatto is in a state where he can walk or run.
	   Will make Frogatto 'glide' if in mid air.#
	  def walk(object_type obj, dir, anim)
	    if(obj.is_standing and (not (obj.animation in ['walk', 'run', 'jump', 'turn', 'run', 'crouch', 'enter_crouch', 'roll', 'run_attack', 'energyshot', 'attack', 'up_attack', 'interact'])), [animation(anim), if(anim = 'run', [sound('run.ogg')])],
	       #Frogatto is in the air, so make him glide.#
		   if(((not obj.is_standing) and (not (obj.animation in ['slide', 'swim_up', 'swim_down', 'swim_side']))), set(obj.velocity_x, obj.velocity_x + obj.vars.jump_glide*dir)));

	  #Function to attempt to make Frogatto crouch; does checking to make
	   sure he's in a state that allows entering a crouch.#
	  def crouch(object_type obj)
	  	if(((not obj.animation in ['crouch', 'enter_crouch', 'roll', 'interact'] ) and obj.is_standing), animation('enter_crouch'));
	  def roll(object_type obj)
	    if( (not FAT) and (obj.animation in ['crouch']) and obj.is_standing, animation('roll'));
	
	  def get_charge_cycles(object_type obj)
	    if(FAT, 0, if(obj.tmp.start_attack_cycle, obj.cycle - obj.tmp.start_attack_cycle, 0));
	  
	  #Function to make Frogatto attack. Does checking and chooses the
	   appropriate type of attack animation, if any.#
	  def attack(object_type obj, charge_cycles)
	  [if('fat' in obj.variations,
				[animation('spit')],[
					if(obj.animation in ['stand', 'stand_up_slope', 'stand_down_slope', 'walk', 'enter_lookup', 'lookup','skid'], [animation(if(obj.ctrl_up, 'up_', '') + if(charge_cycles >= obj.vars.charge_time, 'energyshot', 'attack'))]),
					
					if(obj.animation in ['run'], animation('run_attack')),
	
					if(obj.animation in ['swim_side','swim_side_idle'], animation(if(charge_cycles >= obj.vars.charge_time, 'energyshot_swim_side', 'swim_side')) ),

					if(obj.animation in ['swim_down','swim_down_idle'], animation(if(charge_cycles >= obj.vars.charge_time, 'energyshot_swim_down', 'swim_down')) ),

					if(obj.animation in ['swim_up','swim_up_idle'], animation(if(charge_cycles >= obj.vars.charge_time, 'energyshot_swim_up', 'swim_up')) ),
					
					if(obj.animation in ['jump', 'fall'], animation( if(charge_cycles >= obj.vars.charge_time,
						if(obj.ctrl_down, 'energyshot_down', if(obj.ctrl_up, 'up_energyshot', 'energyshot_jump')),
						if(obj.ctrl_down, 'fall_spin_attack', 'jump_attack' )))),
					
					if(obj.animation in ['crouch'] and (charge_cycles > obj.vars.charge_time), animation('energyshot_crouch'))]
				
	    )];

	  #Function to do a water-equivalent of standing.#
	  def float(object_type obj)
		animation('swim_side_idle');
	    
	  #Function to enter swimming frames.#
	  def swim(object_type obj,dirx,diry)
	    if(dirx or diry,
		 [
		  if(obj.animation != anim_wanted, animation(anim_wanted)),
		 set(obj.velocity_x, obj.velocity_x + obj.swim_accel*dirx),
		 set(obj.velocity_y, obj.velocity_y + obj.swim_accel*diry)
		 ])
			where anim_wanted = if(diry, if(diry < 0, 'swim_up', 'swim_down'), 'swim_side')	
		;
	   
		   
	  #Function to test if frogatto should have post-hit invinicibility.#
	  def is_invincible(object_type obj)
	  	if(obj.tmp.time_last_hit and (abs(obj.tmp.time_last_hit - obj.cycle) < 100), 1, 0);
		def can_slide(object_type obj)
		   (not FAT) and
           solid(obj.level, if(obj.facing > 0, obj.solid_rect.x2+1, obj.solid_rect.x-1), (obj.solid_rect.y*2 + obj.solid_rect.y2)/3) and
           solid(obj.level, if(obj.facing > 0, obj.solid_rect.x2+1, obj.solid_rect.x-1), (obj.solid_rect.y + obj.solid_rect.y2*2)/3) and
		   obj.velocity_y < 300 and obj.velocity_y > -1000;


	   def swallowing_object(object_type frog)
	     if(frog.attached_objects, map(frog.attached_objects, 'obj',
	      if(abs(obj.midpoint_x - context.frog.midpoint_x) < 4, set(attached_objects, []), set(obj.midpoint_x, obj.midpoint_x + if(obj.midpoint_x > context.frog.midpoint_x, -4, 4)))
		  ));

	  1"

	on_create="[animation('stand')]"
	on_enter_level="[animation('stand')]"

	on_enter_walk_anim="set(accel_x, vars.walk_accel)"
	on_enter_run_anim="set(accel_x, vars.run_accel)"

	#if the player gets 'stuck' in a narrow gap, this gets them out by
	#automatically making them jump
	on_stuck="if(not underwater, [animation('jump'), set(velocity_y, velocity_y - vars.jump_power)])"

	#on_collide_with="set(hitpoints, hitpoints - 1)"
	on_die="[spawn('die_cloud', midpoint_x, midpoint_y, facing)]"
	on_ctrl_left="[set_facing(self, -1), roll(self), if(tmp.left > cycle - 25 or tmp.running = 1, [walk(self, -1, 'run'), set(tmp.running, 1)]), set(tmp.left, cycle), set(tmp.right, null())]"
	on_ctrl_right="[set_facing(self, 1), roll(self), if(tmp.right > cycle - 25 or tmp.running = 1, [walk(self, 1, 'run'), set(tmp.running, 1)]), set(tmp.right, cycle), set(tmp.left, null())]"
	on_ctrl_jump="[if(is_standing and velocity_y >= 0 and (not (animation in ['interact'])), [animation('jump'), set(velocity_x, velocity_x + velocity_x/2), if(ctrl_down and is_standing_on_platform, [set(fall_through_platforms, 20), set(velocity_y, velocity_y + vars.jump_power/10)], set(velocity_y, velocity_y - vars.jump_power))]),
	            if(animation = 'slide', [facing(-facing), animation('jump'), set(velocity_x, -facing*800), set(velocity_y, -1000)])]"
	on_ctrl_attack="[attack(self, tmp.charge_cycles), set(tmp.start_attack_cycle, cycle), set(tmp.charge_cycles, 0)]"
	on_end_ctrl_attack="[set(tmp.charge_cycles, get_charge_cycles(self)), set(tmp.start_attack_cycle, null()), set(brightness, 255)]"
	on_ctrl_up="[if(abs(velocity_x) < 100, map(filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 'obj', [set(tmp.interacting_with, obj), fire_event(obj, 'interact')]))]"

	on_start_interact="[animation('interact'), set(tmp.fired_talk, 0)]"
	on_interacting="if(tmp.interacting_with and tmp.fired_talk = 0, [set(tmp.fired_talk, 1), fire_event(tmp.interacting_with, 'talk')])"

	on_end_ctrl_up="if((animation in ['enter_lookup', 'lookup']), stand(self))"

	on_end_interact_anim="animation('stand')"

	timer_frequency=2
	on_timer="[
	    if(max(tmp.charge_cycles, get_charge_cycles(me)) >= vars.charge_time, set(brightness, if((cycle%4) > 1, 1000, 255))),
	    if(ctrl_up and (animation in ['stand','stand_up_slope','stand_down_slope']), animation('enter_lookup')),

#handle ending of invincibility#
	    if((cycle - tmp.time_last_hit)/2 = 50, set(solid_dimensions_in, ['player', 'common'])),
		if(is_invincible(self), set(alpha,(wave(cycle*300)+1000)/10 + 100),
		         [if(underwater and water_object.consts.damage,
				    [set(hitpoints, hitpoints - water_object.consts.damage),
					 set(tmp.time_last_hit, cycle)]),
				 set(alpha,255)])
	   ]"

	on_process="[
	    if((not is_standing) and animation_requires_standing(self), [animation('fall')]),
		if((not FAT) and underwater,
			[
			swim(self, ctrl_right - ctrl_left, ctrl_down - ctrl_up),
			if((not (ctrl_left or ctrl_right or ctrl_up or ctrl_down)) and (animation in ['swim_side','swim_up','swim_down']),
		   float(self)) ]),
		   if(ctrl_left, if(tmp.running, walk(self, -1, 'run'), walk(self, -1, 'walk'))),
			if(ctrl_right, if(tmp.running, walk(self, 1, 'run'), walk(self, 1, 'walk'))),
			if(ctrl_down, crouch(self))
				]"

	on_process_jump="if(ctrl_jump, [set(velocity_y, velocity_y - vars.jump_boost)])"
	on_process_fall="if(is_standing, animation('stand'))"

	#check if we end up on a slope in which case we re-calculate our standing.
	on_enter_stand_anim="if(abs(slope_standing_on) > 20, stand(self))"
	on_enter_stand_up_slope_anim="if(slope_standing_on*facing > -20, stand(self))"
	on_enter_stand_down_slope_anim="if(slope_standing_on*facing < 20, stand(self))"

	on_process_lookup="[set(tmp.lookup_time, tmp.lookup_time+1), if(tmp.lookup_time = 50, set(vertical_look, -200))]"
	on_process_crouch="[set(tmp.lookdown_time, tmp.lookdown_time+1), if(tmp.lookdown_time = 50, set(vertical_look, 200))]"
	on_leave_lookup_anim="[set(tmp.lookup_time, 0), set(vertical_look, 0)]"
	on_leave_crouch_anim="[set(tmp.lookdown_time, 0), set(vertical_look, 0)]"

	on_process_slide="if(not can_slide(self), animation('fall'))"
	on_leave_slide_anim="[if(ctrl_left, facing(-1)), if(ctrl_right, facing(1))]"

	on_enter_water="[if((not FAT), [float(self), set(has_feet, 0)]),
		
		sound('WaterPlunge.ogg'),

		#splash if we are entering the water with reasonable velocity#
		if(velocity_y > 200,
	      [if(HIGH_END_SYSTEM, map([0] * 30, spawn('water_droplet', x + 1d50, midpoint_y, facing, [set('velocity_x', 200 - 1d400), set('velocity_y', (-1d300 + 300))]))),
	      spawn('water_splash', midpoint_x, water_bounds[1]+10, if(1d2=2,facing,-facing))]),
		#record the surface level of the water for future reference,
		 especially for splashing when we exit the water#
		set(tmp.water_surface, water_bounds[1]),
	    
	    if(HIGH_END_SYSTEM,
	    [add_wave(midpoint_x, y2, -2000, 5*velocity_y, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, 2000, 5*velocity_y, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, -1000, 3*velocity_y, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, 1000, 3*velocity_y, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, -500, 2*velocity_y, 10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2, 500, 2*velocity_y, 10*velocity_y, 100, 100)])
	]
	
	"
	on_exit_water="[
	    set(has_feet, 1),
		sound('WaterPlunge.ogg'),

		if(velocity_y < -200,
	      [spawn('water_splash', midpoint_x, tmp.water_surface+10, if(1d2=2,facing,-facing)),
	      if(HIGH_END_SYSTEM, map([0] * 30, spawn('water_droplet', x + 1d50, midpoint_y, facing, [set('velocity_x', 200 - 1d400), set('velocity_y', (-1d300 + 300))]))),
	      if(HIGH_END_SYSTEM,
	    [add_wave(midpoint_x, y2+100, 2000, -5*velocity_y, -30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2+100, -2000, -5*velocity_y, -30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2+100, 1000, -3*velocity_y, -20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2+100, -1000, -3*velocity_y, -20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2+100, 500, -2*velocity_y, -10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2+100, -500, -2*velocity_y, -10*velocity_y, 100, 100)])]),

	
	animation('fall'), if(velocity_y < 0, set(velocity_y, (velocity_y*JUMP_OUT_OF_WATER_BOOST)/100))]"
	
	on_end_ctrl_left="[set(tmp.running, 0),
	     if((not (ctrl_left or ctrl_right)) and (animation in ['walk', 'run']), stand(self))]"
	on_end_ctrl_right="[set(tmp.running, 0),
	     if((not (ctrl_left or ctrl_right)) and (animation in ['walk', 'run']), stand(self))]"

	on_end_enter_crouch_anim="animation('crouch')"
	on_end_crouch_anim="if(ctrl_down, animation('crouch'), animation('leave_crouch'))"
	on_change_animation_failure="[animation(previous_animation)]"
	on_end_leave_crouch_anim="stand(self)"
	
	on_enter_skid_anim="if(abs(velocity_x) > 300, spawn('dust_cloud_skid', midpoint_x + 36*facing, y2 - 10, facing))"
	
	on_end_roll_anim="animation('crouch')"
	on_leave_roll_anim="stop_sound('roll.ogg')"
	on_end_turn_anim="stand(self)"
	on_end_jump_anim="animation('fall')"
	on_end_walk_anim="animation('walk')"
	on_end_run_anim="[animation('run'),  spawn('dust_cloud_run', midpoint_x + 30*facing, y2 - 12, -facing)]"
	on_end_stand_anim="stand(self)"
	on_end_skid_anim="stand(self)"
	on_end_stand_up_slope_anim="stand(self)"
	on_end_stand_down_slope_anim="stand(self)"

	on_enter_spit_anim="[set(tmp.spit_force, 0), set(variations, [])]"
	on_process_spit="if(ctrl_attack, set(tmp.spit_force, tmp.spit_force+1))"
	on_end_spit_anim="if(underwater, float(self), stand(self))"
	on_leave_spit_anim="[
	     set(green, 255), set(blue, 255),
	     set(tmp.swallowed.velocity_x, velocity_x + facing*(200 + tmp.spit_force*if(ctrl_up, 50, 200))),
	     set(tmp.swallowed.velocity_y, velocity_y - (700 + if(ctrl_up, 200 + tmp.spit_force*100))),

	     #set the object's timestamp for when it was spat out, so we
		  can make ourselves invincible to it for a little while#
		 set(tmp.swallowed.spat_out_at, level.cycle),
		 set(tmp.swallowed, null()),
		 resolve_solid(tmp.swallowed, facing, 0, 50),
		 resolve_solid(tmp.swallowed, -facing, 0, 50),

         #set the enemy to be dimensionless, meaning it will only collide
		  with the level. If it collides with another object we expect
		  it to die.#
	     set(tmp.swallowed.solid_dimensions_in, []),
		 set(tmp.swallowed.midpoint_x, midpoint_x),
		 set(tmp.swallowed.y, y),
	     set(tmp.swallowed.vars.team, vars.team),
		 set(tmp.swallowed.animation, 'thrown'),

	     add_object(tmp.swallowed),
		 if(underwater, set(has_feet, 0))
		 ]"

	on_process_attack="swallowing_object(self)"
	on_process_jump_attack="swallowing_object(self)"
	
	on_enter_energyshot_anim="spawn('frogatto_energy_ball', midpoint_x + facing*30, midpoint_y +10, facing, [set_value('velocity_x', velocity_x/2 + facing*700), set_value('velocity_y', velocity_y/2)])"

	#note that when we jump and shoot we only add our velocity to the
	#shot if that makes it faster, not slower.
	on_enter_energyshot_jump_anim="spawn('frogatto_energy_ball', midpoint_x + facing*30, midpoint_y +10, facing, [set_value('velocity_x', if(velocity_x*facing > 0, velocity_x/2, 0) + facing*700)])"
	on_enter_up_energyshot_anim="spawn('frogatto_energy_ball', midpoint_x, midpoint_y -40, facing, [set_value('velocity_x', velocity_x/2), set_value('velocity_y', min(velocity_y/2, 0) - 700)])"
	on_enter_energyshot_down_anim="spawn('frogatto_energy_ball', midpoint_x, midpoint_y + 40, facing, [set_value('velocity_x', velocity_x/4), set_value('velocity_y', velocity_y + 1500)])"
	on_enter_energyshot_crouch_anim="spawn('frogatto_energy_ball', midpoint_x + facing*30, midpoint_y, facing, [set_value('velocity_x', velocity_x/2 + facing*700), set_value('velocity_y', velocity_y/2)])"

	on_enter_energyshot_swim_side_anim="spawn('frogatto_energy_ball', midpoint_x + facing*30, midpoint_y +10, facing, [set_value('velocity_x', velocity_x/2 + facing*700), set_value('velocity_y', velocity_y/2)])"
	on_enter_energyshot_swim_up_anim="spawn('frogatto_energy_ball', midpoint_x, midpoint_y -40, facing, [set_value('velocity_x', velocity_x/2), set_value('velocity_y', velocity_y/2 - 700)])"
	on_enter_energyshot_swim_down_anim="spawn('frogatto_energy_ball', midpoint_x, midpoint_y + 40, facing, [set_value('velocity_x', velocity_x/4), set_value('velocity_y', velocity_y/2 + 1500)])"

	
	on_end_energyshot_anim="stand(self)"
	on_end_energyshot_jump_anim="stand(self)"
	on_end_up_energyshot_anim="stand(self)"
	on_end_energyshot_down_anim="stand(self)"
	on_end_energyshot_crouch_anim="stand(self)"
	on_end_energyshot_swim_side_anim="float(self)"
	on_end_energyshot_swim_up_anim="float(self)"
	on_end_energyshot_swim_down_anim="float(self)"

	on_end_attack_anim="[
		 if(('fat' in variations), animation('swallow')),
	                               stand(self)]"
	on_leave_attack_anim="set(attached_objects, [])"
	on_leave_up_attack_anim="set(attached_objects, [])"
	on_leave_jump_attack_anim="set(attached_objects, [])"
	on_end_swallow_anim="stand(self)"
	on_end_enter_lookup_anim="animation('lookup')"
	on_end_lookup_anim="animation('lookup')"
	on_end_run_attack_anim="[animation('skid'), set(tmp.running, 0)]"
	on_end_up_attack_anim="stand(self)"
	on_end_jump_attack_anim="animation('fall')"
	on_end_fall_spin_attack_anim="animation('fall')"
	on_end_swim_side_idle_anim="float(self)"
	on_end_swim_side_anim="if(underwater,animation('swim_side'),stand(self))"
	on_end_swim_up_anim="if(underwater,animation('swim_up'),stand(self))"
	on_end_swim_down_anim="if(underwater,animation('swim_down'),stand(self))"

	on_collide_feet="if(standing_on and standing_on.consts.springiness > 0, [set(velocity_y, -((velocity_y*standing_on.consts.springiness)/100 + standing_on.consts.spring_amount)), fire_event(standing_on, 'bounced_on')],
	    [set(velocity_x, velocity_x - velocity_x/4),
		 if(has_feet and animation != 'spit', stand(self))])"
	on_collide_head="[if(animation = 'jump', animation('fall')), if(velocity_y < 0, set(velocity_y, 0))]"
	on_collide="[set(velocity_x, 0), if((animation in ['jump', 'fall']) and can_slide(self) and abs(velocity_x) > 200, [animation('slide'), set(velocity_y, 0)])]"

	#during the fall spin attack we bounce off enemies that we hit.
	on_collide_object_attack="if(collide_with_area = 'body' and animation = 'fall_spin_attack' and collide_with.consts.springiness > 0 and velocity_y > 0, [set(velocity_y, -(velocity_y*collide_with.consts.springiness)/100), fire_event(collide_with, 'bounced_on')])"

	##Damage handlers:
			# If we get hit, it's important that we're only hit once by an attack.  Each attacker keeps a list of what they've already hit to make sure that doesn't happen.  This checks/populates that list as appropriate.  The attacker is responsible for clearing the list as appropriate.
			# we also have a primitive window of 3 seconds of post-hit invincibility here for all sources of damage
	on_collide_object_body=" if( collide_with_area = 'attack' and (not is_invincible(self)) and ((not collide_with.spat_out_at) or collide_with.spat_out_at < level.cycle - 20) and collide_with.vars.team != vars.team,
		if(not (me in collide_with.tmp.already_hit), [set(collide_with.tmp.already_hit, collide_with.tmp.already_hit + [me]),
	
			set(hitpoints, hitpoints - collide_with.vars.damage), animation(if(FAT, 'spit', 'hurt')), set(green, 100), set(blue, 100), set(velocity_y,-1000), set(velocity_x,400 * collide_with.facing), set(tmp.time_last_hit, cycle), set(solid_dimensions_in, ['player'])]))"

	on_collide_object_grab="[if(collide_with_area = 'body' and (not tmp.swallowed),
	            if(collide_with.tags.swallowable and collide_with.consts.size <= consts.max_swallow_size,
	                        [remove_object(collide_with),
	  if(animation in ['attack', 'jump_attack', 'up_attack'], set(attached_objects, [collide_with])),
	  set(tmp.swallowed, collide_with), set(variations, 'fat')],
	  
	 #object is not swallowable, so do damage to it instead#
	 if(collide_with.get_hit_by, collide_with.get_hit_by(me))
	  ))]"

	on_collide_damage="[if((not is_invincible(self)), [set(hitpoints, hitpoints - surface_damage), animation(if(FAT, 'spit', 'hurt')), set(green, 100), set(blue, 100), set(tmp.time_last_hit, cycle), set(solid_dimensions_in, ['player'])])]"

	#if we change our solid dimensions -- i.e. try to come back from being
	 hurt, and we can't because we're on top of another solid object, then
	 we take more damage#
	on_change_solid_dimensions_fail="if([set(hitpoints, hitpoints - 1), animation(ifFAT, 'spit', 'hurt')), set(green, 100), set(blue, 100), set(tmp.time_last_hit, cycle)])"


	on_enter_anim="set(tmp.already_hit, [])"

	
	on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)], [set(green, 100), set(blue, 100)])"
	on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
	on_end_hurt_anim="if((not FAT) and underwater, animation('swim_side_idle'), animation('stand'))"


	[vars]
		unlocked_items="['heart_object','heart_object','fire_powerup']"
	[/vars]

	[portrait]
	image=gui/inventory.png
	rect=85,239,162,312
	[/portrait]
	[name]
	image=gui/inventory.png
	rect=9,252,75,270
	[/name]

	[object_variation]
	id=fat
		[set_str]
		_target="filter(elements.animation, image = 'characters/frogatto-spritesheet1.png')"
		image="characters/fat-frogatto-spritesheet1.png"
		[/set_str]

		[set_str]
		_target="elements.consts"
		FAT="1"
		jump_power=1200
		jump_boost=80
		jump_glide=20
		[/set_str]

		[set_str]
		_target="filter(elements.animation, id = 'walk')"
		accel_x=1300
		[/set_str]

		[set_str]
		_target="filter(elements.animation, id = 'run')"
		accel_x=1900
		[/set_str]

	[/object_variation]

		[base:animation]
		image=characters/frogatto-spritesheet1.png
		accel_x=0
		accel_y=80
		pad=3
		body_area=all
		[/animation]
		
		
		[animation]
		id=stand
		duplicates=6
		rect=2,2,33,34
		frames=3
		duration=6
		reverse=yes
		[/animation]

[animation]
id=portrait
duplicates=6
image=gui/inventory.png
rect=85,239,162,312
frames=3
duration=6
reverse=yes
[/animation]

		[animation]
		id=stand	#blink variant
		rect=107,2,138,34
		frames=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=stand_up_slope
		x=212
		y=2
		w=32
		h=35
		frames=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=stand_down_slope
		x=317
		y=2
		w=32
		h=35
		frames=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=lookup
		rect=37,233,68,265
		frames=1
		duration=3
		reverse=yes
		[/animation]

		[animation]
		id=enter_lookup
		rect=2,233,33,265
		frames=1
		duration=3
		reverse=yes
		[/animation]
		
		[animation]
		id=crouch
		solid_area=9,17,23,30
		rect=107,197,138,229
		frames=1
		duration=1
		rotate_on_slope=yes
		[/animation]

		[animation]
		id=enter_crouch
		solid_area=9,17,23,30
		rect=2,197,33,229
		frames=3
		duration=3
		rotate_on_slope=yes
		[/animation]

		[animation]
		id=leave_crouch
		rect=2,197,33,229
		frames=3
		duration=3
		play_backwards=yes
		rotate_on_slope=yes
		[/animation]


		[animation]
		id=roll
		solid_area=8,17,24,30
		sound=roll.ogg
		accel_x=1000
		velocity_x=500
		x=107
		y=197
		w=32
		h=33
		frames=11
		duration=3
		scale=2		
		[/animation]

		
		[animation]
		id=walk
		solid_area=17,18,31,40
		rect=2,110,49,157
		frames=8
		duration=5
		[/animation]

		[animation]
		id=run
		solid_area=17,18,31,40
		x=410
		y=95
		w=48
		h=48
		frames=4
		frames_per_row=2
		duration=5
		[/animation]

		[animation]
		id=skid
		solid_area=17,18,31,40
		x=461
		y=40
		w=48
		h=48
		frames=1
		duration=10
		[/animation]

		[animation]
		id=turn
		x=387
		y=40
		w=32
		h=33
		frames=1
		duration=5
		[/animation]

		[animation]
		id=jump
		solid_area=9,13,23,35
		sound=FrogJump1.ogg,FrogJump2.ogg
		x=2
		y=38
		w=32
		h=48
		frames=2
		duration=6
		[/animation]
	
		[animation]
		id=fall
		solid_area=9,13,23,35
		x=72
		y=38
		w=32
		h=48
		duration=12
		frames=2
		[/animation]

		[animation]
		image=characters/fat-frogatto-spritesheet1.png
		id=swallow
		x=2
		y=269
		w=49
		h=38
		duration=6
		frames=6
		solid_area=6,13,20,35
		[/animation]

		[animation]
		image=characters/fat-frogatto-spritesheet1.png
		id=spit
		x=314
		y=269
		w=34
		h=35
		duration=4
		frames=3
		solid_area=6,8,20,30
		[/animation]

		[animation]
		id=attack
		sound=punch.ogg
		events="3:side_attack_fx_one,6:side_attack_fx_two,9:side_attack_fx_three,8:side_attack_contact"
		
		x=2
		y=269
		w=49
		h=37
		solid_area=7,12,21,34
		grab_area=32,24,49,34
		body_area=6,11,24,36
		frames=8
		duration=2
		reverse=no
		[/animation]

		[animation]
		id=up_attack
		sound=punch.ogg
		events="6:up_attack_contact"
		x=2
		y=351
		w=41
		h=44
		
		solid_area=7,19,21,41
		attack_area=16,0,28,10
		frames=6
		duration=2
		reverse=no
		[/animation]

		[animation]
		id=run_attack
		events="6:7:8:9:10:11:run_attack_contact"
		sound=slash.ogg

		solid_area=18,6,32,28
		accel_x=3200
		x=2
		y=403
		w=68
		h=29
		attack_area=20,14,70,40
		frames=5
		duration=3
		reverse=no
		[/animation]

		[animation]
		id=jump_attack
		events="3:side_attack_fx_one,6:side_attack_fx_two,9:side_attack_fx_three,8:side_attack_contact"
		sound=kick.ogg
		x=2
		y=310
		w=49
		h=37
		grab_area=28,19,43,31
		body_area=6,11,24,36
		frames=9
		duration=2
		reverse=no
		[/animation]

		[animation]
		id=fall_spin_attack
		events="3:6:9:12:15:18:21:24:spin_attack_contact"
		sound=SpinAttack.ogg
		x=3
		y=436
		w=32
		h=42
		attack_area=solid:13,30,23,42
		frames=8
		duration=3
		reverse=no
		[/animation]

		[animation]
		id=hurt
		sound=TakeDamage.wav
		velocity_x=-1000
		velocity_y=-1000
		rect=271,351,303,383
		frames=1
		duration=18
		events="6:12:18:hurtflicker"
		[/animation]

		[animation]
		id=interact
		image=characters/frogatto-spritesheet1.png
		collide_x=10
		collide_y=6
		collide_w=15
		collide_h=16
		feet_x=16
		feet_y=32
		accel_y=80
		x=72
		y=161
		w=32
		h=32
		frames=4
		duration=4
		scale=2
		pad=3
		reverse=yes
		events="15:interacting"
		[/animation]



		[animation]
		id=slide
		image=characters/frogatto-spritesheet1.png
		accel_y=10
		x=352
		y=40
		w=32
		h=34
		duration=30
		frames=1
		solid_area=14,17,28,30
		[/animation]


		[animation]
		id=push
		image=characters/frogatto-spritesheet2.png
		x=413
		y=49
		w=47
		h=48
		frames=6
		frames_per_row=2
		duration=5
		[/animation]





		[animation]
		id=swim_side_idle
		image=characters/frogatto-spritesheet2.png
		accel_y=0
		x=3
		y=85
		w=39
		h=36
		frames=6
		frames_per_row=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=swim_down_idle
		image=characters/frogatto-spritesheet2.png
		accel_y=0
		x=129
		y=85
		w=39
		h=36
		frames=6
		frames_per_row=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=swim_up_idle
		image=characters/frogatto-spritesheet2.png
		accel_y=0
		x=255
		y=85
		w=39
		h=36
		frames=6
		frames_per_row=3
		duration=6
		reverse=yes
		[/animation]

		[animation]
		id=swim_side
		image=characters/frogatto-spritesheet2.png
		sound=Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg
		accel_y=0
		accel_x=0
		x=3
		y=163
		w=39
		h=36
		frames=3
		duration=6
		[/animation]

		[animation]
		id=swim_down
		image=characters/frogatto-spritesheet2.png
		sound=Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg
		accel_x=0
		accel_y=0
		x=129
		y=163
		w=39
		h=36
		frames=3
		duration=6
		[/animation]

		[animation]
		id=swim_up
		image=characters/frogatto-spritesheet2.png
		sound=Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg
		accel_x=0
		accel_y=0
		x=255
		y=163
		w=39
		h=36
		frames=3
		duration=6
		[/animation]



		[animation]
		id=energyshot
		image=characters/frogatto-spritesheet2.png
		rect=3,202,43,245
		frames=2
		frames_per_row=1
		duration=3
		solid_area=6,14,20,36
		[/animation]

		[animation]
		id=energyshot_jump
		image=characters/frogatto-spritesheet2.png
		rect=47,202,87,245
		frames=2
		frames_per_row=1
		duration=5
		[/animation]

		[animation]
		id=up_energyshot
		image=characters/frogatto-spritesheet2.png
		rect=91,202,131,245
		frames=2
		frames_per_row=1
		duration=5
		solid_area=12,14,26,36
		[/animation]

		[animation]
		id=energyshot_down
		rect=135,202,175,245
		image=characters/frogatto-spritesheet2.png
		frames=2
		frames_per_row=1
		duration=5
		[/animation]

		[animation]
		id=energyshot_crouch
		solid_area=6,14,20,27
		rect=179,202,219,245
		image=characters/frogatto-spritesheet2.png
		frames=2
		frames_per_row=1
		duration=8
		[/animation]

		[animation]
		id=energyshot_swim_side
		rect=307,202,345,237
		accel_y=0
		accel_x=0
		image=characters/frogatto-spritesheet2.png
		frames=2
		frames_per_row=1
		duration=8
		[/animation]

		[animation]
		id=energyshot_swim_down
		rect=265,202,303,237
		accel_y=0
		accel_x=0
		image=characters/frogatto-spritesheet2.png
		frames=2
		frames_per_row=1
		duration=8
		[/animation]

		[animation]
		id=energyshot_swim_up
		rect=223,202,261,237
		accel_y=0
		accel_x=0
		image=characters/frogatto-spritesheet2.png
		frames=2
		frames_per_row=1
		duration=8
		[/animation]

	[/object_type]
