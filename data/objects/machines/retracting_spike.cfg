[object_type]
id=retracting_spike
on_create="[set(vars.y_extended, y + 60*up), set(vars.y_retracted, y)]"

#we create a 'schedule' for the spike. The spike goes through several states:
# (1) retracted, starting at 0: the spike remains retracted and does nothing, the default state
# (2) stabbing, starting at vars.retracted_ticks: the spike begins extending, and will fully extend within vars.stab_ticks
#               cycles. The spike starts doing damage during this stage.
# (3) extended, starting after vars.stab_ticks: the spike is extended, and remains still.
# (4) retracting, starting after vars.extended_ticks: the spike is retracting, and will fully retract within vars.retract_ticks.
#
# we record this entire schedule within the tmp.command_schedule variable. Then we can just execute this command to
# conveniently set up a full cycle worth of movement for the object.
on_done_create="[
set(tmp.command_schedule,	[schedule(vars.retracted_ticks, [set(vars.damage, 1), set(velocity_y, (100*(vars.y_extended - vars.y_retracted))/vars.stab_ticks)]),
	                   schedule(vars.retracted_ticks + vars.stab_ticks, [set(y, vars.y_extended), set(velocity_y, 0)]),
					   schedule(vars.retracted_ticks + vars.stab_ticks + vars.extended_ticks, [set(vars.damage, 0), set(velocity_y, (100*(vars.y_retracted - vars.y_extended))/vars.retract_ticks)]),
					   schedule(vars.retracted_ticks + vars.stab_ticks + vars.extended_ticks + vars.retract_ticks,
					                           [set(y, vars.y_retracted), set(velocity_y, 0), fire_event('start_cycle')])
	]),
	schedule(vars.initial_delay, fire_event('start_cycle'))
]"

on_start_cycle="tmp.command_schedule"

	[vars]
	damage=0
	y_extended=0
	y_retracted=0

	initial_delay=0
	retracted_ticks=0
	stab_ticks=0
	extended_ticks=0
	retract_ticks=0

	[/vars]

	[tmp]
	command_schedule="null()"
	[/tmp]

	[animation]
	id=normal
	image=props/retractingspike1.png
	rect=24,9,37,41
	frames=1
	duration=1000000
	attack_area=all
	[/animation]

[/object_type]
