{
function: [
	{
		name: "list_add",
		args: "list_one, list_two",
		formula: "map(range(size(list_one)), 'index', list_one[index] + list_two[index])",
	},
	{
		name: "list_subtract",
		args: "list_one, list_two",
		formula: "map(range(size(list_one)), 'index', list_one[index] - list_two[index])",
	},
	{
		name: "list_multiply",
		args: "list_one, list_two",
		formula: "map(range(size(list_one)), 'index', list_one[index] * list_two[index])",
	},
	{
		name: "list_divide",
		args: "list_one, list_two",
		formula: "map(range(size(list_one)), 'index', list_one[index] / list_two[index])",
	},
	{
		name: "list_single_add",
		args: "list_one, by",
		formula: "map(range(size(list_one)), 'index', list_one[index] + by)",
	},
	{
		name: "list_single_subtract",
		args: "list_one, by",
		formula: "map(range(size(list_one)), 'index', list_one[index] - by)",
	},
	{
		name: "list_single_multiply",
		args: "list_one, by",
		formula: "map(range(size(list_one)), 'index', list_one[index] * by)",
	},
	{
		name: "list_single_divide",
		args: "list_one, by",
		formula: "map(range(size(list_one)), 'index', list_one[index] / by)",
	},
	{
		name: "list_tween",
		args: "list_one, list_two, percent_raw",
		formula: "map(range(size(list_one)), 'index', list_one[index]*(percent) + list_two[index]*(1.0-percent)) where percent = constrain(0, percent_raw, 1)",
	},
	{
		name: "flatten",
		args: "items",
		formula: "if(items.size = 0, [], if(is_list(items[0]), flatten(items[0]), [items[0]]) + flatten(items[1:size(items)]))",
	},

	#each element in data overwrites each element in list, starting with the element at index. If index is out of bounds or the data does not fit in the list, Bad Stuff Happensâ„¢.
	#eg., args [1,2,3,4,5], 2, ['a', 'b'] would return [1,2,'a','b',5].
	{
		name: "list_replace_elements",
		args: "list, index, data",
		formula: "list[0:index] + data + list[index+size(data):size(list)]",
	},
	{
		name: "list_get_random",
		args: "list",
		formula: "list[(1 d size(list)) - 1]",
	},
	{
		name: "_list_cat",
		args: "list, sum, delim",
		formula: "if(size(list) > 0, _list_cat(list[1:size(list)], if(sum = '', str(list[0]), sum + str(list[0])) + if(size(list) > 1, delim, ''), delim), sum)",
	},
	{
		name: "list_cat",
		args: "list",
		formula: "_list_cat(list, '', '')",
	},
	{
		name: "list_cat_delim",
		args: "list, delim",
		formula: "_list_cat(list, '', delim)",
	},
	{
		name: "join",
		args: "list",
		formula: "list_cat(list)",
	},
	{
		name: "join_d",
		args: "list, delim",
		formula: "list_cat_delim(list, delim)",
	},

	#given a list and an index, return [the object at that index, the rest of the list without that object]
	{
		name: "list_pop",
		args: "list, index",
		formula: "[list[index], list[0:index] + list[index+1:size(list)]]",
	},
	{
		name: "best_between",
		args: "list1, list2, criteria",
		formula: "transform(range(size(list1)), if(criteria(list1[v], list2[v]), list1[v], list2[v]))",
	},
	{
		name: "best_of",
		args: "lists, criteria",
		formula: "switch(size(lists), 
		0, [],
		1, lists[0],
		2, best_between(lists[0], lists[1], criteria),
		best_between(lists[0], best_of(lists[1:size(lists)], criteria), criteria))",
	},
	{
		name: "find_index",

		#doesn't work
		#
		args: "list, target, index",
		formula: "if(list[index] = target, index, find_index(list, target, index+1))",
	},
	{

		#list:	A list of something to be added into sum.
		#sum:	An empty member of a type which is addition-compatible with all members of the list.
		name: "flex_sum",
		args: "list, sum",
		formula: "if(size(list), flex_sum(list[1:size(list)], sum+list[0]) ,sum)",
	},
	{

		#list - a list of stuff to apply a function to, and so collapse to one value.
		#method - the /property/, taking two args, with which to collapse the list. Must be a property as defined by def(). The things in this file are functions, and will not work. However, they may be called from properties.
		#Reduces list by calling /method/ with the first arg being the first element of the list and the second arg being the reduction of the rest of the list or the last element.
		#/method/ doesn't need to check for the end of the list. It just specifies how to combine any two elements into one.
		#For example, method = "def(u,v) u+v" would make list_reduce behave equivalent to sum(list), albeit slower.
		name: "list_reduce",
		args: "list, method",
		formula: "if(size(list) > 0, if(size(list) > 1, method(list[0], list_reduce(list[1:size(list)], method)), list[0]))",
	},
],
}