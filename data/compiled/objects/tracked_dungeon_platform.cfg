[object_type]
id="tracked_dungeon_platform"
on_button_pressed="go"
on_button_released="stop"
on_create="if(size(points) > 2, [
		points[0:size(points)-1],
		draw_track(
			if(not vars.on_end = 1, [self], [])
				+ got 
				+ if(got[size(got)-1].vars.linked_object, 
					[get_object(level, got[size(got)-1].vars.linked_object)], []) 
			) where got = points[size(points)-1],
		if(always_moving, fire_event('move'), set(tmp.go, 0)),
		set(vars.move_speed, decimal(vars.move_speed)/4),
		if(find(level.chars, 'ch', self.vars.linked_object = context.label), set(vars.jumped_on, 1)),
		]) where points = get_points"
on_jumped_on="[
		if(vars.jumped_on != 1 and vars.always_moving !=1, go),
		set(level.player.control_lock, ['ctrl_up']),
		schedule(2, set(level.player.control_lock, null())),
		]"
on_move="if(tmp.stop, 
		set(tmp.stop, 0),
		[	schedule(1, fire_event('move')),
			set(tmp.go, 1),
			advance,
		])"
platform_area="0,0,48,1"
surface_friction="100"
zorder="-1"
	[editor_info]
	category="platforms"
	help="A platform which moves on tracks between points.
				Usually, these points are track_platform_point_targets.
				Group points + platform in editor for proper activation.
				
				move_speed: How fast to move. Default is 10.
				linked_object: Which object to move to.
				always_moving: Start in motion, or wait for player?
				on_end: What to do at the end of the track.
				     -1: Fall off.
				     0: Stay still.
				     1: Reverse.
				fudge: Offset player by x pixels upward. Increase if
				  Frogatto is falling through the platform, decrease
				  if he is floating on it or noticably jumping."
		[var]
		name="move_speed"
		type="int"
		value="10"
		[/var]

		[var]
		name="linked_object"
		type="label"
		value="''"
		[/var]

		[var]
		name="always_moving"
		type="boolean"
		value="0"
		[/var]

		[var]
		name="on_end"
		type="int"
		value="0"
		[/var]

	[/editor_info]

	[properties]
	_advance="def(start, distance, target) 
		#If we're not nearer to our target than we can move in a frame, normalize the vector of approach, multiply by speed, and add it to our current position. However, if we are near enough to reach the target, then select the next target to go to and call this function again to determine how much farther we go toward this new target.#
			if(point_length(start, get_target_pos(target)) > distance,
				set_pos(list_add(
					start, 
					list_single_multiply(
						list_single_divide(
							list_subtract(
								start,
								get_target_pos(target)), 
							decimal(-point_length(
								start, 
								get_target_pos(target)))), 
						distance))),
				[	set_pos(get_target_pos(target)),
					if(new_target, 
						[	set(vars.target, new_target),
							_advance(get_target_pos(target), distance-point_length(get_pos, get_target_pos(target)), new_target)], 
						switch(vars.on_end,
							1, set(vars.get_next_point, if(vars.get_next_point = _get_next_point_forward or vars.get_next_point = null(), _get_next_point_reverse, null())),
							0, stop,
							-1, [	stop,
									set(accel_y, 50)],
							[	debug('Bad end value for {self.type}. ({self})'), 
								stop]))
				] where new_target = get_next_point(target))"
	_get_next_point_forward="def(obj) find(vars.points, 'vp', vp.label = obj.vars.linked_object)"
	_get_next_point_reverse="def(obj) find(vars.points, 'vp', vp.vars.linked_object = obj.label)"
	_get_points="def(got, next) if(next_obj and (not next_obj in got), 
			_get_points(got+[next_obj], next_obj.vars.linked_object),
			[	set(vars.points, got),
				if(size(got), set(vars.target, got[0])),
				got
			]) where next_obj = get_object(level, next)"
	add_track_plate="def(coords) [
			set(plate.midpoint_x, coords[0]),
			set(plate.midpoint_y, coords[1]),
			add_object(plate),
			spawn(self.type + '.track_bolt', coords[0], coords[1], facing),
			] where plate = object(self.type + '.track_plate')"
	advance="_advance(get_pos, vars.move_speed, vars.target)"
	draw_track="def(track_points)	if(size(track_points) > 1, #Draw points between each object in the list.#
			[map(range(size(track_points)-1), 'index', [
				[obj.set_ends(	track_points[index].midpoint_x,
								track_points[index].midpoint_y,
								track_points[index+1].midpoint_x,
								track_points[index+1].midpoint_y),
				set(obj.animation, 'track'),
				set(obj.z, self.z-2),
				add_object(obj)] where obj = object('rope_angled_controller'),
				add_track_plate([track_points[index].midpoint_x, track_points[index].midpoint_y])]),
				add_track_plate([track_points[size(track_points)-1].midpoint_x, track_points[size(track_points)-1].midpoint_y])])"
	get_next="def(label) filter(vars.points, 'point', point.label = label)"
	get_next_point="if(vars.get_next_point, vars.get_next_point, _get_next_point_forward)"
	get_points="if(vars.linked_object, #Return list of commands, with points at the end.#
			_get_points([], vars.linked_object), 
			[stop, []])"
	get_pos="if(vars.decimal_position, vars.decimal_position, get_target_pos(self))"
	get_target_pos="def(target) [target.midpoint_x, target.midpoint_y]"
	go="if(size(vars.points) > 1 and tmp.go = 0, [fire_event('move'), set(vars.jumped_on, 1)])"
	pause="[set(tmp.stop, 1), set(vars.jumped_on, 0)]"
	point_length="def(p1, p2) length(p1[0], p1[1], p2[0], p2[1])"
	set_pos="def(coords) [set(vars.decimal_position, coords), set(self.midpoint_x, coords[0]), set(self.midpoint_y, coords[1])]"
	stop="[set(tmp.stop, 1), set(tmp.go, 0)]"
	switch_track="def(from_point, to_point) [
			#Make the point from_point to link to the point to_point.
			Note: The reverse code doesn't like junctions, so be careful to set the switches correctly for reversing if you plan to reverse.#
			set(from_point.vars.linked_object, to_point.label), 
			_get_points(vars.points, to_point.label)]"
	[/properties]

	[animation]
	frame_info="0,0,0,0,206,819,48,16"
	id="normal"
	image="compiled-2.png"
	rect="206,819,253,834"
	[/animation]

	[object_type]
	id="track_plate"
	zorder="-4"
		[animation]
		h="16"
		id="normal"
		image="props/elevator-track-mount.png"
		w="16"
		x="0"
		y="0"
		[/animation]

	[/object_type]

	[object_type]
	id="track_bolt"
	zorder="-2"
		[animation]
		h="16"
		id="normal"
		image="props/elevator-track-mount.png"
		w="16"
		x="16"
		y="0"
		[/animation]

	[/object_type]

[/object_type]

