[prototype]
friction="1000"
has_feet="no"
hitpoints="50"
id="fish_purple"
mass="5"
on_add_object_fail="[if(collide_with.vars.team != vars.team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"
on_change_animation_failure="[die()]"
on_change_solid_dimensions_fail="if(tmp.in_change_dimensions_fail or (not collide_with), die(),
	          [set(tmp.in_change_dimensions_fail, 1),
			   fire_event(collide_with, 'blocking_thrown_object'),
			   set(solid_dimensions_in, consts.solid_dimensions),
			   set(tmp.in_change_dimensions_fail, 0)
			  ])"
on_collide_object_body="if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area = 'attack', get_hit_by(collide_with)))"
on_collide_side="[set(velocity_x, 0), facing(-facing)]"
on_die="[score(level,points_value), spawn_item(self), death_burst(self)]"
on_end_hurt_anim="set(animation, 'swim')"
on_end_swim_anim="if(facing < 0 and x < vars.x_bound or
	                facing > 0 and x2 > vars.x2_bound,
					[facing(-facing), animation('swim')],
					animation('swim'))"
on_exit_water="die()"
on_process_swim="if(abs(y - target_y()) > 10, set(accel_y, (20*if(target_y() < y, -1, 1))), [set(accel_y,0)])"
on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"
on_surface_damage="die()"
on_timer="if(solid(level, front + facing*90, y, 1, y2 - y),
	            [facing(-facing)])"
solid_area="3,3,27,19"
solid_dimensions="enemy,common"
timer_frequency="10"
traction_in_air="0"
traction_in_water="1000"
	[consts]
	flinch_threshold="3"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	cause_flinch="def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])"
	damage_cooldown="0"
	display_hurt_visuals="def() execute(me, 
					[
					hurt_flash_sequence()
					])"
	display_posthit_invincibility_flash_sequence="def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )"
	flash_bright="def() [set(me.brightness, 1023)]"
	flash_off="def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]"
	flash_red="def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage >= consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage >= consts.flinch_threshold, cause_flinch(collide_with)))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_flash_sequence="def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]"
	hurt_velocity_x="-200"
	hurt_velocity_y="-400"
	is_invincible="if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[vars]
	points_value="20"
	[/vars]

	[editor_info]
	category="animals"
		[var]
		name="x_bound"
		type="x"
		value="x - 200"
		[/var]

		[var]
		name="x2_bound"
		type="x"
		value="x2 + 200"
		[/var]

		[var]
		name="desired_height"
		type="y"
		value="y"
		[/var]

	[/editor_info]

	[properties]
	attack_damage="1"
	hurt_velocity_x="0"
	hurt_velocity_y="0"
	ideal_x="def() ((vars.x2_bound + vars.x_bound) / 2)"
	inside_aggro_range="def(distance) if(abs(ideal_x() - midpoint_x) < distance, 1, 0)"
	player_within="def(distance) if((level.player.midpoint_x > midpoint_x - distance) and (level.player.midpoint_x < midpoint_x + distance) and (level.player.midpoint_y > midpoint_y - distance) and (level.player.midpoint_y < midpoint_y + distance), 1, 0)"
	target_y="def() (vars.desired_height + (wave(cycle*10+1000)/15))"
	team="'evil'"
	[/properties]

	[animation]
	accel_x="20"
	attack_area="all"
	body_area="all"
	duplicates="6"
	duration="6"
	frame_info="3,4,11,3,103,702,27,22,4,3,11,3,130,702,26,23,7,2,10,4,156,702,24,23,4,3,11,3,180,702,26,23"
	frames="4"
	id="swim"
	image="compiled-2.png"
	rect="100,698,140,726"
	[/animation]

	[animation]
	accel_x="20"
	attack_area="all"
	body_area="all"
	duration="6"
	frame_info="3,4,11,3,0,702,27,22,4,3,11,3,27,702,26,23,7,2,10,4,53,702,24,23,4,3,11,3,77,702,26,23"
	frames="4"
	id="swim"
	image="compiled-2.png"
	rect="-3,698,37,726"
	[/animation]

	[animation]
	attack_area="all"
	body_area="all"
	duration="10"
	frame_info="7,3,11,3,880,678,23,23"
	frames="1"
	id="startle"
	image="compiled-2.png"
	rect="873,675,913,703"
	[/animation]

	[animation]
	attack_area="all"
	body_area="all"
	duration="10"
	frame_info="6,2,9,2,549,629,26,25"
	frames="1"
	id="hurt"
	image="compiled-2.png"
	rect="543,627,583,655"
	[/animation]

	[animation]
	accel_x="30"
	attack_area="all"
	body_area="all"
	duration="6"
	frame_info="41,29,0,0,1023,297,0,0,41,29,0,0,1023,297,0,0,41,29,0,0,1023,297,0,0,41,29,0,0,1023,297,0,0"
	frames="4"
	id="swimMad"
	image="compiled-0.png"
	rect="982,268,1022,296"
	[/animation]

[/prototype]

