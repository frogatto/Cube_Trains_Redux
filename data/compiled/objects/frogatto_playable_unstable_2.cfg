[prototype]
affected_by_currents="yes"
feet_width="5"
friction="2000"
functions="#Function to do a water-equivalent of standing.#
	  def float(object_type obj)
		animation('swim_side_idle');
	  #function which returns true if the object is in an animation that
	   requires frogatto be on the ground#	
	  def animation_requires_standing(object_type obj)
	    obj.animation in ['stand', 'stand_up_slope', 'stand_down_slope', 'run', 'walk', 'land', 'lookup', 'crouch', 'enter_crouch', 'leave_crouch', 'turn', 'roll','skid'];
	  def set_facing(object_type obj, facing) if(obj.facing != facing and (not (obj.animation in ['interact', 'slide'])),
	           [facing(facing), if(obj.is_standing, animation('turn'))]);

	  def stand(object_type obj)
	   if(abs(obj.velocity_x) > 240 and (not obj.animation in ['walk']), animation('skid'),
	     if(abs(obj.slope_standing_on) < 20, animation('stand'),
		   if(obj.slope_standing_on*obj.facing > 0, animation('stand_down_slope'),
			                                animation('stand_up_slope'))));


	  #make Frogatto walk. anim can be either 'walk' or 'run'. Does checking
	   to make sure Frogatto is in a state where he can walk or run.
	   Will make Frogatto 'glide' if in mid air.#
	  def walk(object_type obj, dir, anim)
	    if(obj.is_standing and (not (obj.animation in ['walk', 'run', 'jump', 'fall', 'jump_attack', 'turn', 'run', 'crouch', 'enter_crouch', 'roll', 'run_attack', 'energyshot', 'attack', 'up_attack', 'interact', 'spit'])), [animation(anim), if(anim = 'run', [sound('run.wav')])],
	       #Frogatto is in the air, so make him glide.#
		   if(((not obj.is_standing) and (not (obj.animation in ['slide', 'swim_up', 'swim_down', 'swim_side']))), add(obj.velocity_x, obj.vars.jump_glide*dir)));

	  #Function to attempt to make Frogatto crouch; does checking to make
	   sure he's in a state that allows entering a crouch.#
	  def crouch(object_type obj)
	  	if(((not obj.animation in ['crouch', 'enter_crouch', 'roll', 'interact'] ) and obj.is_standing), animation('enter_crouch'));
	  def roll(object_type obj)
	    if( (not FAT) and (obj.animation in ['crouch']) and obj.is_standing, #animation('roll')#0);
	
	 def tongue(object_type obj)
	  if('fat' in obj.variations,
				if(not (obj.animation in ['interact']), [animation('spit')]),
				[
					if(obj.animation in ['run'], animation('run_attack')),
					if(obj.animation in ['stand', 'leave_crouch', 'stand_up_slope', 'stand_down_slope', 'walk', 'enter_lookup', 'lookup','skid', 'land'],
					    animation(if(obj.ctrl_up, 'up_', '') + 'attack')),
					if(obj.animation in ['jump', 'fall'], animation('jump_attack'))
				]
		);
	
	  #Function to make Frogatto attack. Does checking and chooses the
	   appropriate type of attack animation, if any.#
	  def attack(object_type obj, charge_cycles)
	  [if('fat' in obj.variations, tongue(obj),
				[
					if((obj.animation in ['stand', 'leave_crouch', 'stand_up_slope', 'stand_down_slope', 'walk', 'enter_lookup', 'lookup','skid', 'land']) and
					  charge_cycles >= obj.vars.charge_time, animation(if(obj.ctrl_up, 'up_', '') + 'energyshot')),
					
					if(obj.animation in ['run'], animation('run_attack')),
	
					if(obj.animation in ['swim_side','swim_side_idle'], animation(if(charge_cycles >= obj.vars.charge_time, 'energyshot_swim_side', 'swim_side')) ),

					if(obj.animation in ['swim_down','swim_down_idle'], animation(if(charge_cycles >= obj.vars.charge_time, 'energyshot_swim_down', 'swim_down')) ),

					if(obj.animation in ['swim_up','swim_up_idle'], animation(if(charge_cycles >= obj.vars.charge_time, 'energyshot_swim_up', 'swim_up')) ),
					
					if((obj.animation in ['jump', 'fall']) and
					   charge_cycles >= obj.vars.charge_time,
					   if(obj.ctrl_down, animation('energyshot_down'),
						  if(obj.ctrl_up, animation('up_energyshot'),
							animation('energyshot_jump')))),
					
					if(obj.animation in ['enter_crouch', 'crouch'] and (charge_cycles >= obj.vars.charge_time), animation('energyshot_crouch'))]
				
	    )];

	  #Function to enter swimming frames.#
	  def swim(object_type obj,dirx,diry)
	    if(dirx or diry,
		 [
		  if(obj.animation != anim_wanted, animation(anim_wanted)),
		 add(obj.velocity_x, (obj.swim_accel*dirx)/1000),
		 add(obj.velocity_y, (obj.swim_accel*diry)/1000)
		 ])
			where anim_wanted = if(abs(diry) > 500, if(diry < 0, 'swim_up', 'swim_down'), 'swim_side')	
		;

	  #function to decide if frogatto can slide down a wall#
		def can_slide(object_type obj)
		   (not FAT) and
           solid(obj.level, if(obj.facing > 0, obj.solid_rect.x2+1, obj.solid_rect.x-1), (obj.solid_rect.y + obj.solid_rect.y2*2)/3) and
		   (obj.velocity_y < 300 and obj.velocity_y > -1000 or obj.ctrl_jump and obj.tmp.pressed_jump_in_air);


	   def swallowing_object(object_type frog)
	     if(frog.attached_objects, map(frog.attached_objects, 'obj',
	      if(abs(obj.midpoint_x - context.frog.midpoint_x) < 4, set(attached_objects, []), add(obj.midpoint_x, if(obj.midpoint_x > context.frog.midpoint_x, -4, 4)))
		  ));
	   
	   


	  1"
hitpoints="4"
id="frogatto_playable_unstable_2"
is_human="true"
load_variations="fat"
mass="5"
no_compile_image="characters/frogatto-spritesheet1.png"
on_add_object_fail="[if(object and vars.swallowed = null(),
	  [set(object.vars.removed_from_play, 1),
	   set(vars.swallowed, object),
	   add(gravity_shift, object.vars.swallow_gravity),
	   add(variations, ['fat'])])]"
on_change_animation_failure="if(not tmp.tried_fixing_solidity,
	          [set(tmp.tried_fixing_solidity, 1),
			   schedule(1, set(tmp.tried_fixing_solidity, 0)),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			  ])"
on_change_solid_dimensions_fail="[if(not is_invincible_posthit,
	                    [add(hitpoints, -1), set(vars.time_last_hit, cycle)]),
	          if(not is_blinking_invincible(self), animation(if(FAT, 'spit', 'hurt')))]"
on_check_water="[if(underwater, animation('swim_side')), if(IPHONE_SYSTEM, set(underwater_controls, underwater))]"
on_child_spawned="if(child.type = 'frogatto_playable.tongue_tip',
	                  [set(tmp.tongue_tip, child), set(child.tmp.tongue_shaft, tmp.tongue_shaft)],
					  if(child.type = 'frogatto_playable.tongue_shaft',
					  set(tmp.tongue_shaft, child)))"
on_collide_damage="[if((not is_invincible(self)), [add(hitpoints, -max(1, surface_damage)), animation(if(FAT, 'spit', 'hurt')), set(tmp.time_last_hit, cycle), set(solid_dimensions_in, ['player'])])]"
on_collide_feet="[
	if(IPHONE_SYSTEM, if((not underwater), set(underwater_controls, 0))),
	if(collide_with and collide_with.consts.springiness > 0,
		bounce_on(me, collide_with),
	    [set(velocity_x, velocity_x/2),
		 if(has_feet and animation != 'spit' and animation != 'jump_attack', if(velocity_y > 1300, animation('land'),stand(self))  )])]"
on_collide_head="[if(animation = 'jump', animation('bumphead')), if(velocity_y < 0, set(velocity_y, 0))]"
on_collide_object_attack="if(collide_with_area = 'body' and animation = 'fall_spin_attack' and collide_with.consts.springiness > 0 and velocity_y > 0,
	   bounce_on(me, collide_with))"
on_collide_object_body="if( collide_with_area = 'attack' and ((not collide_with.spat_out_at) or collide_with.spat_out_at < level.cycle - 20) and collide_with.team != team and collide_with.attack_damage > 0,
		  if((not is_invincible(self)),
		  [ 
			add(hitpoints, -collide_with.attack_damage),
			set(solid_dimensions_in, ['player']),
			animation(if(FAT, 'spit', 'hurt')),
			set(velocity_y,-1000),
            set(velocity_x,400 * collide_with.facing),
			set(tmp.time_last_hit, cycle)
			],
			
			#avoiding being hit due to being invincible. if we have a shield,
			 we make it flash#
			 if(tmp.shield, fire_event(tmp.shield, 'flash'))
			),

			#see if we're colliding with another object's interact area, in which case
			 we set it so we can interact with them.#
			if(collide_with_area = 'interact', set(can_interact, 2))
			)"
on_collide_object_grab="[if(collide_with_area = 'body' and (not vars.swallowed),
	            if(collide_with.tags.swallowable and collide_with.consts.size <= consts.max_swallow_size,
	                        [remove_object(collide_with),
	  if(animation in ['attack', 'jump_attack', 'up_attack'], set(attached_objects, [collide_with])),
	  [set(collide_with.vars.removed_from_play, 1),sound('Gulp.wav')],
	  set(vars.swallowed, collide_with), fire_event(collide_with, 'swallowed'),
	  add(gravity_shift, collide_with.vars.swallow_gravity),
	  add(variations, ['fat'])],
	  
	 #object is not swallowable, so do damage to it instead#
	 if(collide_with.get_hit_by, collide_with.get_hit_by(me))
	  ))]"
on_collide_side="[set(velocity_x, 0), if((animation in ['jump', 'fall']) and can_slide(self) and (abs(velocity_x) > 200 or ctrl_jump and tmp.pressed_jump_in_air), [animation('slide'), set(velocity_y, 0)])]"
on_create="[set(lights, circle_light(me, vars.lightSize)), animation('stand'),]"
on_ctrl_down="if(animation = 'slide', animation('fall'))"
on_ctrl_jump="[set(tmp.pressed_jump_in_air, (not is_standing)),
				if(is_standing and (not (animation in ['interact', 'fall', 'jump'])), [
    animation('jump'),
    set(velocity_x, velocity_x + velocity_x/2),
    if(ctrl_down and is_standing_on_platform,
        [set(fall_through_platforms, 10),
        set(velocity_y, velocity_y + jump_power/10)],
        [set(velocity_y, -jump_power),
        add(velocity_x, velocity_x/2)])]),
	            if(animation = 'slide', [facing(-facing), animation('jump'), set(velocity_x, -facing*800), set(velocity_y, -1000)])]"
on_ctrl_left="[set_facing(self, -1), roll(self), if(tmp.left and tmp.left > cycle - 15 or tmp.running = 1, [walk(self, -1, 'run'), set(tmp.running, 1)]), set(tmp.left, cycle), set(tmp.right, null())]"
on_ctrl_right="[set_facing(self, 1), roll(self), if(tmp.right and tmp.right > cycle - 15 or tmp.running = 1, [walk(self, 1, 'run'), set(tmp.running, 1)]), set(tmp.right, cycle), set(tmp.left, null())]"
on_ctrl_tongue="if(vars.has_energy_shot, attack(self, energy_charge), tongue(self))"
on_ctrl_up="[
	if(abs(velocity_x) < 100 and is_standing, map(filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 'obj', [set(tmp.interacting_with, obj), fire_event(obj, 'interact')]))]"
on_die="[remove_object(tmp.tongue_tip), remove_object(tmp.tongue_shaft), spawn('die_cloud', midpoint_x, midpoint_y, facing)]"
on_display_gold="[ if( (cycle - vars.last_got_gold > 20) and (vars.gold_counter > 0), [spawn('text_flash',midpoint_x,midpoint_y,1,[set_var('txt','+'+vars.gold_counter)]), set(vars.gold_counter,0)], schedule(10,fire_event('display_gold')))]"
on_end_attack_anim="[
		 if(('fat' in variations), animation('swallow')),
	                               stand(self)]"
on_end_bumphead_anim="animation('fall')"
on_end_crouch_anim="if(ctrl_down, animation('crouch'), animation('leave_crouch'))"
on_end_ctrl_left="[set(tmp.running, 0),
	     if((not (ctrl_left or ctrl_right)) and (animation in ['walk', 'run']), stand(self))]"
on_end_ctrl_right="[set(tmp.running, 0),
	     if((not (ctrl_left or ctrl_right)) and (animation in ['walk', 'run']), stand(self))]"
on_end_ctrl_up="if((animation in ['enter_lookup', 'lookup']), stand(self))"
on_end_emote_confused_anim="animation('stand')"
on_end_emote_geez_anim="animation('stand')"
on_end_emote_impatient_anim="animation('stand')"
on_end_emote_nod_anim="animation('stand')"
on_end_emote_oh_anim="animation('stand')"
on_end_emote_raisedfinger_anim="animation('stand')"
on_end_emote_talk_anim="animation('stand')"
on_end_energyshot_anim="stand(self)"
on_end_energyshot_crouch_anim="stand(self)"
on_end_energyshot_down_anim="stand(self)"
on_end_energyshot_jump_anim="stand(self)"
on_end_energyshot_swim_down_anim="float(self)"
on_end_energyshot_swim_side_anim="float(self)"
on_end_energyshot_swim_up_anim="float(self)"
on_end_enter_crouch_anim="animation('crouch')"
on_end_enter_lookup_anim="animation('lookup')"
on_end_fall_spin_attack_anim="animation('fall')"
on_end_hurt_anim="if((not FAT) and underwater, animation('swim_side_idle'), animation('stand'))"
on_end_interact_anim="animation('stand')"
on_end_jump_anim="animation('fall')"
on_end_jump_attack_anim="animation('fall')"
on_end_land_anim="stand(self)"
on_end_leave_crouch_anim="stand(self)"
on_end_lookup_anim="animation('lookup')"
on_end_roll_anim="animation('crouch')"
on_end_run_anim="[animation('run'),  if(abs(velocity_x) > 300, spawn('dust_cloud_run', midpoint_x + 30*facing, y2 - 12, -facing))]"
on_end_run_attack_anim="[animation('skid'), set(tmp.running, 0)]"
on_end_skid_anim="stand(self)"
on_end_spit_anim="if(underwater, float(self), stand(self))"
on_end_stand_anim="stand(self)"
on_end_stand_down_slope_anim="stand(self)"
on_end_stand_up_slope_anim="stand(self)"
on_end_swallow_anim="stand(self)"
on_end_swim_down_anim="if(underwater,animation('swim_down'),stand(self))"
on_end_swim_side_anim="if(underwater,animation('swim_side'),stand(self))"
on_end_swim_side_idle_anim="float(self)"
on_end_swim_up_anim="if(underwater,animation('swim_up'),stand(self))"
on_end_turn_anim="stand(self)"
on_end_up_attack_anim="stand(self)"
on_end_up_energyshot_anim="stand(self)"
on_end_walk_anim="animation('walk')"
on_enter_energyshot_anim="[set(tmp.start_attack_cycle, cycle),
	        spawn('frogatto_energy_ball', midpoint_x + facing*30, midpoint_y +10, facing, [set(velocity_x, velocity_x/2 + facing*700), set(velocity_y, velocity_y/2)])]"
on_enter_energyshot_crouch_anim="[set(tmp.start_attack_cycle, cycle),
	        spawn('frogatto_energy_ball', midpoint_x + facing*30, midpoint_y, facing, [set(velocity_x, velocity_x/2 + facing*700), set(velocity_y, velocity_y/2)])]"
on_enter_energyshot_down_anim="[set(tmp.start_attack_cycle, cycle),
	       spawn('frogatto_energy_ball', midpoint_x, midpoint_y + 40, facing, [set(velocity_x, velocity_x/4), set(velocity_y, velocity_y + 1500)])]"
on_enter_energyshot_jump_anim="[set(tmp.start_attack_cycle, cycle),
	             spawn('frogatto_energy_ball', midpoint_x + facing*30, midpoint_y +10, facing, [set(velocity_x, if(velocity_x*facing > 0, velocity_x/2, 0) + facing*700)])]"
on_enter_energyshot_swim_down_anim="[set(tmp.start_attack_cycle, cycle),
	      spawn('frogatto_energy_ball', midpoint_x, midpoint_y + 40, facing, [set(velocity_x, velocity_x/4), set(velocity_y, velocity_y/2 + 1500)])]"
on_enter_energyshot_swim_side_anim="[set(tmp.start_attack_cycle, cycle),
	     spawn('frogatto_energy_ball', midpoint_x + facing*30, midpoint_y +10, facing, [set(velocity_x, velocity_x/2 + facing*700), set(velocity_y, velocity_y/2)])]"
on_enter_energyshot_swim_up_anim="[set(tmp.start_attack_cycle, cycle),
	         spawn('frogatto_energy_ball', midpoint_x, midpoint_y -40, facing, [set(velocity_x, velocity_x/2), set(velocity_y, velocity_y/2 - 700)])]"
on_enter_fall_anim="set(zorder, 10)"
on_enter_fall_spin_attack_anim="[set(zorder, 10), add(velocity_y, 500), set(velocity_x, velocity_x/2), set(tmp.no_flinch_attack, 1)]"
on_enter_jump_anim="set(zorder, 10)"
on_enter_jump_attack_anim="set(zorder, 10)"
on_enter_land_anim="[spawn('dust_cloud_skid', midpoint_x + 20*facing, y2 - 8, facing), spawn('dust_cloud_skid', midpoint_x - 20*facing, y2 - 8, -facing)]"
on_enter_level="[if(not (level.id in vars.levels_visited),
	                 add(vars.levels_visited, [level.id])),
					 animation('stand')]"
on_enter_run_anim="[set(accel_x, vars.run_accel), set(vars.bounced_on_chain,0),]"
on_enter_skid_anim="if(abs(velocity_x) > 300, spawn('dust_cloud_skid', midpoint_x + 36*facing, y2 - 10, facing))"
on_enter_slide_anim="[set(zorder, 10),
	  if(IPHONE_SYSTEM, set(underwater_controls, 0))]"
on_enter_spit_anim="[set(tmp.spit_force, 0), set(variations, filter(variations, 'v', v != 'fat'))]"
on_enter_stand_anim="if(abs(slope_standing_on) > 20, stand(self))"
on_enter_stand_down_slope_anim="if(slope_standing_on*facing < 20, stand(self))"
on_enter_stand_up_slope_anim="if(slope_standing_on*facing > -20, stand(self))"
on_enter_up_energyshot_anim="[set(tmp.start_attack_cycle, cycle),
	       spawn('frogatto_energy_ball', midpoint_x, midpoint_y -40, facing, [set(velocity_x, velocity_x/2), set(velocity_y, min(velocity_y/2, 0) - 700)])]"
on_enter_walk_anim="[set(accel_x, vars.walk_accel), set(vars.bounced_on_chain,0),]"
on_enter_water="[
	    if(IPHONE_SYSTEM, set(underwater_controls, 1)),
	    if((not FAT), [float(self), set(has_feet, 0)]),
		
		sound('water-enter.ogg'),

		#splash if we are entering the water with reasonable velocity#
		if(velocity_y > 200, [
			spawn('water_splash', midpoint_x, water_bounds[1]+10, if(1d2=2,facing,-facing)),
			spawn('water_particles', midpoint_x, water_bounds[1]+10, facing)]),
		#record the surface level of the water for future reference,
		 especially for splashing when we exit the water#
		set(tmp.water_surface, water_bounds[1]),
	    
	    if(HIGH_END_SYSTEM,
	    [add_wave(midpoint_x, y2, -2000, 5*velocity_y, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, 2000, 5*velocity_y, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, -1000, 3*velocity_y, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, 1000, 3*velocity_y, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, -500, 2*velocity_y, 10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2, 500, 2*velocity_y, 10*velocity_y, 100, 100)])
	]"
on_exit_water="[
	    set(has_feet, 1),
		sound('water-exit.ogg'),
		schedule(60, fire_event('check_water')),

		if(velocity_y < -200,
	      [spawn('water_splash', midpoint_x, tmp.water_surface+10, if(1d2=2,facing,-facing)),
	      spawn('water_particles', midpoint_x, tmp.water_surface+10, facing),
	      
	      if(HIGH_END_SYSTEM,
	    [add_wave(midpoint_x, y2+100, 2000, -5*velocity_y, -30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2+100, -2000, -5*velocity_y, -30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2+100, 1000, -3*velocity_y, -20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2+100, -1000, -3*velocity_y, -20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2+100, 500, -2*velocity_y, -10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2+100, -500, -2*velocity_y, -10*velocity_y, 100, 100)])]),

	
	animation('fall'), if(velocity_y < 0, add(velocity_y, -JUMP_OUT_OF_WATER_BOOST)),
	set(velocity_x, (velocity_x*JUMP_OUT_OF_WATER_BOOST_HORIZONTAL)/100)
	
	]"
on_get_powerup="null()"
on_handle_move_script="if(abs(midpoint_x - tmp.scripted_target_x) < 10,
		  if(abs(tmp.scripted_target_facing) = 1 and facing != tmp.scripted_target_facing,
		  [set(control_lock, if(tmp.scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))],

		  [set(control_lock, null()),
		   set(me.tmp.scripted_target_x, null()),
		   set(me.tmp.scripted_target_facing, null()),
		   set(me.tmp.scripted_move_callback, null()),
		   tmp.scripted_move_callback]),
	   
		[set(control_lock, if(tmp.scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))])"
on_interacting="if(tmp.interacting_with and tmp.fired_talk = 0, [set(tmp.fired_talk, 1), fire_event(tmp.interacting_with, 'talk')])"
on_leave_attack_anim="[if(tmp.tongue_tip, fire_event('remove_tongue')), set(attached_objects, [])]"
on_leave_crouch_anim="[set(tmp.lookdown_time, 0), set(vertical_look, 0)]"
on_leave_fall_anim="set(zorder, 0)"
on_leave_fall_spin_attack_anim="[set(zorder, 0), set(tmp.no_flinch_attack, 0)]"
on_leave_jump_anim="set(zorder, 0)"
on_leave_jump_attack_anim="[fire_event('leave_attack_anim'), set(zorder, 0), set(attached_objects, [])]"
on_leave_lookup_anim="[set(tmp.lookup_time, 0), set(vertical_look, 0)]"
on_leave_roll_anim="stop_sound('roll.ogg')"
on_leave_slide_anim="[set(zorder, 0), if(ctrl_left, facing(-1)), if(ctrl_right, facing(1))]"
on_leave_spit_anim="if(vars.swallowed, [
	     set(green, 255), set(blue, 255),
		 add(gravity_shift, -vars.swallowed.vars.swallow_gravity),
	     set(vars.swallowed.vars.removed_from_play, 0),
	     set(vars.swallowed.velocity_x, velocity_x + facing*(200 + tmp.spit_force*if(ctrl_up, vars.spit_power/2, vars.spit_power*2))),
	     set(vars.swallowed.velocity_y, velocity_y - (600 + if(ctrl_up, 200 + tmp.spit_force*vars.spit_power))),

	     #set the object's timestamp for when it was spat out, so we
		  can make ourselves invincible to it for a little while#
		 set(vars.swallowed.spat_out_at, level.cycle),
		 set(vars.swallowed, null()),

         #set the enemy to be dimensionless, meaning it will only collide
		  with the level. If it collides with another object we expect
		  it to die.#
	     set(vars.swallowed.solid_dimensions_in, ['thrown']),
		 if(vars.swallowed.consts.thrown_type, set(vars.swallowed.type, vars.swallowed.consts.thrown_type)),
		 set(vars.swallowed.animation, 'thrown'),
		 
		 set(vars.swallowed.midpoint_x, midpoint_x),
		 set(vars.swallowed.y, y),
		 resolve_solid(vars.swallowed, facing, 0, 50),
		 resolve_solid(vars.swallowed, -facing, 0, 50),

	     add_object(vars.swallowed),
		 fire_event(vars.swallowed, 'spat'),
		 if(underwater, set(has_feet, 0)),
		 sound('Spit.wav')
		 ])"
on_leave_up_attack_anim="set(attached_objects, [])"
on_light_size="[set(lights, circle_light(me, vars.lightSize))]"
on_load="[if((not lights), set(lights, circle_light(me, vars.lightSize))),
	          set(invincible, 50), set(brightness, 255)]"
on_load_checkpoint="[if((not lights), set(lights, circle_light(me, vars.lightSize))),
	                     #TODO: Respawn frogatto with partial health, depending on difficulty level#
	                     #set(hitpoints, (max_hitpoints*3)/4),#
	                     set(hitpoints, max_hitpoints),
	                     set(level.player.vars.score, (level.player.vars.score*9)/10),

	                     #make it so that if we had a swallowed object
						  we create a fresh version of the object in our
						  stomach.#
	                     if(vars.swallowed,
							[
						    set(vars.swallowed, obj),
							set(obj.vars.removed_from_play, 1),
							fire_event(obj, 'swallowed')
							] where obj = object(vars.swallowed.type,
							                midpoint_x, midpoint_y, facing)
							),
						 set(vars.powerup_time, 0),
						 set(vars.has_energy_shot, 0),
						 fire_event('lose_powerup'),

	                     #remove variations that aren't upgrades#
						 set(variations, filter(variations, 'v', strstr(v, 'upgrade') or v = 'fat')),
						 animation('stand'),
						 set(velocity_x, 0),
						 set(velocity_y, 0),
						 move_to_standing(),
						 set(brightness, 255),
						 schedule(2, fire_event('check_water'))
						 ]"
on_lose_powerup="null()"
on_process="[
	    if((not is_standing) and animation_requires_standing(self), [animation('fall')]),
		if((not FAT) and underwater,
		  if(IPHONE_SYSTEM,
		    [
			  swim(self, ctrl_x, ctrl_y),
			  if((not ctrl_x) and (not ctrl_y), float(self)),
			  if(ctrl_x < 0 and facing > 0 or ctrl_x > 0 and facing < 0, set(facing, -facing))
			],

			[
			swim(self, (ctrl_right - ctrl_left)*if(ctrl_down or ctrl_up, 700, 1000), (ctrl_down - ctrl_up)*if(ctrl_left or ctrl_right, 700, 1000)),
			if((not (ctrl_left or ctrl_right or ctrl_up or ctrl_down)) and (animation in ['swim_side','swim_up','swim_down']),
		   float(self)) ]
		     ),
		   
		   ),

		   if(ctrl_left, if(tmp.running, walk(self, -1, 'run'), walk(self, -1, 'walk'))),
			if(ctrl_right, if(tmp.running, walk(self, 1, 'run'), walk(self, 1, 'walk'))),
			if(ctrl_down and (not (ctrl_left or ctrl_right)), crouch(self)),
		
		
		if(ctrl_attack and animation != 'eyeball', animation('eyeball')),
	]"
on_process_attack="if(tmp.tongue_tip and tmp.tongue_tip.tmp.hit and time_in_animation < 9,
				   [add(time_in_animation, 2*(9-time_in_animation) + 1),
								fire_event('process_attack')],
	
	              [if(time_in_animation = 4,
	                    [
						 spawn('frogatto_playable.tongue_shaft',
						       if(facing > 0, x + 30, x), y + 44, facing),
						 spawn('frogatto_playable.tongue_tip', 
						      if(facing > 0, x + 30, x), y + 46, facing)
						 ]),
						if(tmp.tongue_tip and time_in_animation = 14,
						   fire_event('remove_tongue')),
						if(tmp.tongue_tip,
						   [
					         set(tmp.tongue_tip.midpoint_x,
							    midpoint_x + facing*(10 + tongue_length)),
						   
						    set(tmp.tongue_tip.midpoint_y, y + 47),
							set(tmp.tongue_shaft.x,
							    if(facing > 0, midpoint_x + 10,
								   midpoint_x - 2 - tongue_length)),
							tmp.tongue_shaft.set_length(tongue_length - 6),
							set(tmp.tongue_shaft.midpoint_y, y + 44)
							]),
							if(tmp.tongue_tip, fire_event(tmp.tongue_tip, 'calculate_position')),
	                     swallowing_object(self)])
					   where tongue_length = vars.tongue_length*(5 - abs(9 - time_in_animation))"
on_process_crouch="[add(tmp.lookdown_time, 1), if(tmp.lookdown_time = 50, set(vertical_look, 200))]"
on_process_fall="[
	    if(IPHONE_SYSTEM, if(underwater_controls, [
		         add(velocity_x, (jump_glide*ctrl_x)/1000),
		         add(velocity_y, (jump_glide*ctrl_y)/1000)])),
	    if(is_standing, if(tmp.last_standing_cycle = cycle-1, animation('stand'), set(tmp.last_standing_cycle, cycle)))]"
on_process_jump="if(ctrl_jump, [add(velocity_y, -vars.jump_boost)])"
on_process_jump_attack="if(tmp.tongue_tip and tmp.tongue_tip.tmp.hit and time_in_animation < 9,
				   [add(time_in_animation, 2*(9-time_in_animation) + 1),
								fire_event('process_jump_attack')],
	
	              [if(time_in_animation = 4,
	                    [
						 spawn('frogatto_playable.tongue_shaft',
						       if(facing > 0, x + 30, x), y + 32, facing),
						 spawn('frogatto_playable.tongue_tip', 
						      if(facing > 0, x + 30, x), y + 34, facing)
									   ]),
						if(tmp.tongue_tip and time_in_animation = 14,
						   fire_event('remove_tongue')),
						if(tmp.tongue_tip,
						    [
							 set(tmp.tongue_tip.midpoint_x, midpoint_x + facing*(10 + tongue_length)),
						    set(tmp.tongue_tip.midpoint_y, y + 35),
							set(tmp.tongue_shaft.x,
							    if(facing > 0, midpoint_x + 10,
								   midpoint_x - 10 - tongue_length)),
							tmp.tongue_shaft.set_length(tongue_length - 6),
							set(tmp.tongue_shaft.midpoint_y, y + 32)
							
							]),
							if(tmp.tongue_tip, fire_event(tmp.tongue_tip, 'calculate_position')),
	                     swallowing_object(self)])
					   where tongue_length = vars.tongue_length*(5 - abs(9 - time_in_animation))"
on_process_lookup="[add(tmp.lookup_time, 1), if(tmp.lookup_time = 50, set(vertical_look, -200))]"
on_process_slide="if(not can_slide(self), animation('fall'))"
on_process_spit="if(ctrl_attack or ctrl_tongue, add(tmp.spit_force, 1))"
on_remove_tongue="[if(tmp.tongue_tip.vars.swallowed,
	                        [set(vars.swallowed, tmp.tongue_tip.vars.swallowed),
		             add(gravity_shift, tmp.tongue_tip.vars.swallowed.vars.swallow_gravity),
							 add(variations, ['fat'])]),
	                       set(tmp.tongue_tip.hitpoints, 0),
	                       set(tmp.tongue_tip, null()),
	                       set(tmp.tongue_shaft.hitpoints, 0),
	                       set(tmp.tongue_shaft, null())]"
on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"
on_start_interact="[animation('interact'), set(tmp.fired_talk, 0)]"
on_stuck="if(not underwater, if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -vars.jump_power), add(velocity_x, if(facing=1, 300, -300))))"
on_surface_damage="[fire_event('collide_damage')]"
on_timer="[
	    if(ctrl_right - ctrl_left != 0 and ctrl_right - ctrl_left != facing, set_facing(me, -facing)),
	    if(ctrl_up and (animation in ['stand','stand_up_slope','stand_down_slope']), animation('enter_lookup')),

	   [
#handle ending of invincibility#
	    if((cycle - vars.time_last_hit)/2 <= 50 and (cycle - vars.time_last_hit)/2 > 10, set(solid_dimensions_in, ['player', 'common', 'boss'])),
		if(not is_invincible_posthit,
		    [if(underwater and water_object.consts.damage,
				[add(hitpoints, -water_object.consts.damage), display_hurt_visuals(),
				 set(vars.time_last_hit, cycle)]),
			set(alpha,255)])]]"
solid_area="9,8,23,30"
solid_dimensions="player,common,boss"
timer_frequency="2"
traction_in_water="1000"
vehicle="false"
	[consts]
	FAT="0"
	JUMP_OUT_OF_WATER_BOOST="1400"
	JUMP_OUT_OF_WATER_BOOST_HORIZONTAL="200"
	flinch_threshold="3"
	max_swallow_size="16"
	posthit_invicibility_period="100"
	powerup_name="''"
	powerup_recharge="0"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	cause_flinch="def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])"
	damage_cooldown="0"
	display_hurt_visuals="def() execute(me, 
					[
					hurt_flash_sequence()
					])"
	display_posthit_invincibility_flash_sequence="def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )"
	flash_bright="def() [set(me.brightness, 1023)]"
	flash_off="def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]"
	flash_red="def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage >= consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage >= consts.flinch_threshold, cause_flinch(collide_with)))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_flash_sequence="def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]"
	hurt_velocity_x="-200"
	hurt_velocity_y="-400"
	is_invincible="if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[properties]
	handle_damage="def(collide_with) execute(me,[
						add(me.hitpoints, - collide_with.attack_damage),
						player_damage_screen_flash(collide_with.attack_damage),
						set(solid_dimensions_in, ['player']),
						player_specific_damage_response()
					])"
	hurt_velocity_x="-1000"
	hurt_velocity_y="-1000"
	player_damage_screen_flash="def(dmg_amt)
							if(dmg_amt > 2 or dmg_amt >= hitpoints, screen_flash([255, 0, 0,255], 4), if(dmg_amt = 2, screen_flash([255, 0, 0,200], 3), screen_flash([255, 0, 0,70], 2)))"
	player_specific_damage_response="def() null()"
	scripted_move_to_x="def(target_x, target_facing, callback)
		                    [
		                    set(me.tmp.scripted_target_x, target_x),
							set(me.tmp.scripted_target_facing, target_facing),
							set(me.tmp.scripted_move_callback, callback),
							fire_event(me, 'handle_move_script')
							]"
	[/properties]

	[tmp]
	last_shield="0"
	last_standing_cycle="-1"
	left="0"
	lookup_time="0"
	no_flinch_attack="0"
	pressed_jump_in_air="0"
	right="0"
	running="0"
	scripted_move_callback="null()"
	scripted_target_facing="null()"
	scripted_target_x="null()"
	shield="null()"
	start_attack_cycle="0"
	time_last_hit="0"
	tongue_shaft="null()"
	tongue_tip="null()"
	[/tmp]

	[vars]
	achievement_kill_chain="[[null,-1000], [null,-2000], [null,-3000], [null,-4000], [null,-4000], [null,-5000], [null,-6000], [null,-7000], [null,-8000], [null,-9000], [null,-10000], [null,-11000], [null,-12000], [null,-13000], [null,-14000], [null,-15000]]"
	charge_time="50"
	coins="0"
	enemies_tasted="[]"
	has_energy_shot="0"
	items_owned="[]"
	jump_boost="90"
	jump_glide="30"
	jump_power="1200"
	levels_visited="[]"
	lightSize="60"
	name="'Frogatto'"
	next_unlocked_item="null()"
	num_partial_hearts="0"
	powerup_time="0"
	run_accel="2800"
	spit_power="80"
	swallowed="null()"
	swim_accel="140"
	tongue_length="14"
	unlocked_items="['heart_object','points_cube','points_cube']"
	walk_accel="1600"
	[/vars]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duplicates="6"
	duration="6"
	feet_width="5"
	frames="3"
	id="stand"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="2,2,33,34"
	reverse="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duplicates="6"
	duration="100000000"
	feet_width="5"
	frames="3"
	id="freeze"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="2,2,33,34"
	reverse="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="3"
	id="stand"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="107,2,138,34"
	reverse="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="3"
	h="35"
	id="stand_up_slope"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	reverse="yes"
	solid_area="9,4,23,26"
	w="32"
	x="212"
	y="2"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="3"
	h="35"
	id="stand_down_slope"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	reverse="yes"
	solid_area="9,2,23,24"
	w="32"
	x="317"
	y="2"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="3"
	feet_width="5"
	frames="1"
	id="lookup"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="37,233,68,265"
	reverse="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="3"
	feet_width="5"
	frames="1"
	id="enter_lookup"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="2,233,33,265"
	reverse="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="1"
	feet_width="5"
	frames="1"
	id="crouch"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="107,197,138,229"
	rotate_on_slope="yes"
	solid_area="9,17,23,30"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="3"
	feet_width="5"
	frames="3"
	id="enter_crouch"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="2,197,33,229"
	rotate_on_slope="yes"
	solid_area="9,17,23,30"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="3"
	feet_width="5"
	frames="3"
	id="leave_crouch"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	play_backwards="yes"
	rect="2,197,33,229"
	rotate_on_slope="yes"
	[/animation]

	[animation]
	accel_x="1000"
	accel_y="80"
	body_area="all"
	duration="3"
	feet_width="5"
	frames="11"
	h="33"
	id="roll"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	scale="2"
	solid_area="8,17,24,30"
	sound="roll.ogg"
	velocity_x="500"
	w="32"
	x="107"
	y="197"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="5"
	feet_width="5"
	frames="8"
	id="walk"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="2,110,49,157"
	solid_area="17,18,31,40"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="5"
	feet_width="5"
	frames="4"
	frames_per_row="2"
	h="48"
	id="run"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	solid_area="17,18,31,40"
	w="48"
	x="410"
	y="95"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="10"
	feet_width="5"
	frames="1"
	h="48"
	id="skid"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	solid_area="17,18,31,40"
	w="48"
	x="461"
	y="40"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="5"
	feet_width="5"
	frames="1"
	h="33"
	id="turn"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	w="32"
	x="387"
	y="40"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="2"
	h="48"
	id="jump"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	solid_area="9,13,23,35"
	sound="FrogJump1.ogg,FrogJump2.ogg"
	w="32"
	x="2"
	y="38"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="5"
	feet_width="5"
	frames="1"
	id="bumphead"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="422,2,453,36"
	solid_area="9,12,23,34"
	sound="bumphead.wav"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="12"
	feet_width="5"
	frames="2"
	h="48"
	id="fall"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	solid_area="9,13,23,35"
	w="32"
	x="72"
	y="38"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="4"
	feet_width="5"
	frames="2"
	h="48"
	id="land"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	solid_area="9,17,23,39"
	sound="bumphead.wav"
	w="32"
	x="142"
	y="38"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frame_info="2,9,23,2,262,106,24,27,4,7,25,2,286,106,20,29,3,13,24,2,306,106,22,23,3,3,24,2,328,106,22,33,2,5,23,2,350,106,24,31,0,6,21,2,374,106,28,30"
	frames="6"
	id="swallow"
	image="compiled-2.png"
	rect="260,97,308,134"
	solid_area="6,13,20,35"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="3"
	feet_width="5"
	frame_info="6,3,5,3,864,299,23,29,8,2,6,4,887,299,20,29,5,3,5,4,907,299,24,28"
	frames="3"
	id="spit"
	image="compiled-2.png"
	rect="858,296,891,330"
	solid_area="6,8,20,30"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="6,11,24,36"
	duration="2"
	events="3:side_attack_fx_one,6:side_attack_fx_two,9:side_attack_fx_three,8:side_attack_contact"
	feet_width="5"
	frames="8"
	grab_area="32,24,49,34"
	h="37"
	id="attack"
	image="characters/frogatto-spritesheet1.png"
	pad="26"
	reverse="no"
	solid_area="7,12,21,34"
	sound="tongueOut1.wav,tongueOut2.wav,tongueOut3.wav,tongueOut4.wav,tongueOut5.wav,tongueOut6.wav"
	w="26"
	x="2"
	y="269"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="0,18,41,44"
	duration="2"
	events="6:up_attack_contact"
	feet_width="5"
	frames="6"
	grab_area="16,0,28,10"
	h="44"
	id="up_attack"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	reverse="no"
	solid_area="7,19,21,41"
	sound="tongueOut1.wav,tongueOut2.wav,tongueOut3.wav,tongueOut4.wav,tongueOut5.wav,tongueOut6.wav"
	w="41"
	x="2"
	y="351"
	[/animation]

	[animation]
	accel_x="3200"
	accel_y="80"
	attack_area="20,14,70,40"
	body_area="0,0,30,40"
	duration="3"
	events="6:7:8:9:10:11:run_attack_contact"
	feet_width="5"
	frames="5"
	h="30"
	id="run_attack"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	reverse="no"
	solid_area="18,6,32,28"
	sound="slash.ogg"
	w="68"
	x="2"
	y="403"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="6,11,24,36"
	duration="2"
	events="3:side_attack_fx_one,6:side_attack_fx_two,9:side_attack_fx_three,8:side_attack_contact"
	feet_width="5"
	frames="9"
	grab_area="28,19,43,31"
	h="37"
	id="jump_attack"
	image="characters/frogatto-spritesheet1.png"
	pad="27"
	reverse="no"
	sound="tongueOut1.wav,tongueOut2.wav,tongueOut3.wav,tongueOut4.wav,tongueOut5.wav,tongueOut6.wav"
	w="26"
	x="2"
	y="310"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	attack_area="solid:13,30,23,42"
	body_area="all"
	duration="3"
	events="3:6:9:12:15:18:21:24:spin_attack_contact"
	feet_width="5"
	frames="8"
	h="42"
	id="fall_spin_attack"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	reverse="no"
	sound="SpinAttack.ogg"
	w="32"
	x="3"
	y="436"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="18"
	events="1:6:12:18:hurtflicker"
	feet_width="5"
	frames="1"
	id="hurt"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	rect="271,351,303,383"
	sound="TakeDamage.wav"
	velocity_x="-1000"
	velocity_y="-1000"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	collide_h="16"
	collide_w="15"
	collide_x="10"
	collide_y="6"
	duration="4"
	events="15:interacting"
	feet_width="5"
	feet_x="16"
	feet_y="32"
	frames="4"
	h="33"
	id="interact"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	reverse="yes"
	scale="2"
	w="32"
	x="72"
	y="161"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="10"
	body_area="all"
	duration="30"
	feet_width="5"
	frames="1"
	h="34"
	id="slide"
	image="characters/frogatto-spritesheet1.png"
	pad="3"
	solid_area="14,8,28,30"
	w="32"
	x="352"
	y="40"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="5"
	feet_width="5"
	frame_info="13,14,13,6,418,329,21,28,12,14,13,6,439,329,22,28,13,15,12,5,461,329,22,28,11,14,11,5,483,329,25,29,11,14,11,6,508,329,25,28,13,15,12,6,533,329,22,27"
	frames="6"
	frames_per_row="2"
	id="push"
	image="compiled-2.png"
	rect="405,315,451,362"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="6"
	feet_width="5"
	frame_info="4,5,4,5,681,551,31,26,4,5,4,5,712,551,31,26,4,5,4,5,743,551,31,26,4,5,4,5,774,551,31,26,4,5,4,5,805,551,31,26,4,5,4,5,836,551,31,26"
	frames="6"
	frames_per_row="3"
	id="swim_side_idle"
	image="compiled-2.png"
	rect="677,546,715,581"
	reverse="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="6"
	feet_width="5"
	frame_info="3,4,3,5,667,470,33,27,3,5,3,5,700,470,33,26,3,4,3,5,733,470,33,27,3,4,3,5,766,470,33,27,3,5,3,5,799,470,33,26,3,4,3,5,832,470,33,27"
	frames="6"
	frames_per_row="3"
	id="swim_down_idle"
	image="compiled-2.png"
	rect="664,466,702,501"
	reverse="yes"
	solid_area="12,8,26,30"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="6"
	feet_width="5"
	frame_info="7,1,6,2,0,140,26,33,7,1,6,3,26,140,26,32,7,1,6,2,52,140,26,33,7,1,6,2,78,140,26,33,7,1,6,3,104,140,26,32,7,1,6,2,130,140,26,33"
	frames="6"
	frames_per_row="3"
	id="swim_up_idle"
	image="compiled-2.png"
	rect="-7,139,31,174"
	reverse="yes"
	solid_area="12,8,26,30"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="10"
	feet_width="5"
	frame_info="5,5,4,6,619,629,30,25,5,5,4,6,649,629,30,25,4,5,2,7,679,629,33,24"
	frames="3"
	id="swim_side"
	image="compiled-2.png"
	rect="614,624,652,659"
	sound="Paddle1.ogg,Paddle2.ogg,Paddle3.ogg,Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="10"
	feet_width="5"
	frame_info="11,8,11,2,921,470,17,26,6,7,6,8,938,470,27,21,7,1,5,8,965,470,27,27"
	frames="3"
	id="swim_down"
	image="compiled-2.png"
	rect="910,462,948,497"
	solid_area="12,8,26,30"
	sound="Paddle1.ogg,Paddle2.ogg,Paddle3.ogg,Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="10"
	feet_width="5"
	frame_info="8,2,7,8,336,237,24,26,6,2,6,4,360,237,27,30,9,2,7,3,387,237,23,31"
	frames="3"
	id="swim_up"
	image="compiled-2.png"
	rect="328,235,366,270"
	solid_area="12,8,26,30"
	sound="Paddle1.ogg,Paddle2.ogg,Paddle3.ogg,Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frame_info="1,12,10,6,414,551,30,26,1,12,7,6,444,551,33,26"
	frames="2"
	frames_per_row="1"
	id="energyshot"
	image="compiled-2.png"
	rect="413,539,453,582"
	solid_area="6,14,20,36"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="5"
	feet_width="5"
	frame_info="4,9,7,5,753,269,30,30,4,9,4,5,783,269,33,30"
	frames="2"
	frames_per_row="1"
	id="energyshot_jump"
	image="compiled-2.png"
	rect="749,260,789,303"
	solid_area="12,14,26,36"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="5"
	feet_width="5"
	frame_info="5,3,10,6,650,911,26,35,5,1,10,6,676,911,26,37"
	frames="2"
	frames_per_row="1"
	id="up_energyshot"
	image="compiled-1.png"
	rect="645,908,685,951"
	solid_area="12,14,26,36"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="5"
	feet_width="5"
	frame_info="6,8,9,8,284,237,26,28,6,8,9,5,310,237,26,31"
	frames="2"
	frames_per_row="1"
	id="energyshot_down"
	image="compiled-2.png"
	rect="278,229,318,272"
	solid_area="12,14,26,36"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="8"
	feet_width="5"
	frame_info="3,16,6,10,644,784,32,18,3,16,3,10,676,784,35,18"
	frames="2"
	frames_per_row="1"
	id="energyshot_crouch"
	image="compiled-2.png"
	rect="641,768,681,811"
	solid_area="6,14,20,27"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="8"
	feet_width="5"
	frame_info="0,5,2,5,338,551,37,26,0,5,0,5,375,551,39,26"
	frames="2"
	frames_per_row="1"
	id="energyshot_swim_side"
	image="compiled-2.png"
	rect="338,546,376,581"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="8"
	feet_width="5"
	frame_info="3,2,11,3,137,106,25,31,3,2,11,0,162,106,25,34"
	frames="2"
	frames_per_row="1"
	id="energyshot_swim_down"
	image="compiled-2.png"
	rect="134,104,172,139"
	solid_area="12,8,26,30"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="8"
	feet_width="5"
	frame_info="4,3,10,0,948,911,25,33,4,0,10,0,973,911,25,36"
	frames="2"
	frames_per_row="1"
	id="energyshot_swim_up"
	image="compiled-1.png"
	rect="944,908,982,943"
	solid_area="12,8,26,30"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	body_area="all"
	duration="6"
	feet_width="5"
	frame_info="6,6,8,2,0,524,20,26,6,6,8,2,20,524,20,26,6,5,7,2,40,524,21,27,7,6,5,2,61,524,22,26,7,7,8,2,83,524,19,25,7,8,9,2,102,524,18,24,7,9,9,2,120,524,18,23,8,8,7,2,138,524,19,24,7,9,9,2,157,524,18,23,8,8,7,2,175,524,19,24,6,8,8,2,194,524,20,24,6,8,6,2,214,524,22,24,6,8,3,2,236,524,25,24,6,7,2,2,261,524,26,25,6,7,2,2,287,524,26,25,6,7,2,2,313,524,26,25,6,7,2,2,339,524,26,25,6,7,2,2,365,524,26,25,6,7,2,2,391,524,26,25,6,7,2,2,417,524,26,25,6,7,2,2,443,524,26,25,6,7,2,2,469,524,26,25,6,7,2,2,495,524,26,25,6,7,2,2,521,524,26,25,6,7,2,2,547,524,26,25,6,7,2,2,573,524,26,25,6,7,2,2,599,524,26,25,6,7,2,2,625,524,26,25,6,7,2,2,651,524,26,25,6,7,2,2,677,524,26,25,6,9,2,2,703,524,26,23,6,10,3,2,729,524,25,22,6,8,5,2,754,524,23,24,6,11,7,2,777,524,21,21,6,9,8,2,798,524,20,23,7,9,9,2,818,524,18,23,7,8,9,2,836,524,18,24,7,9,9,2,854,524,18,23,7,8,9,2,872,524,18,24,7,7,8,2,890,524,19,25,7,6,5,2,909,524,22,26,6,5,7,2,931,524,21,27,6,6,8,2,952,524,20,26"
	frames="43"
	id="eyeball"
	image="compiled-2.png"
	rect="-6,518,27,551"
	solid_area="12,8,26,30"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="8"
	id="emote_geez"
	image="characters/frogatto-spritesheet3.png"
	pad="3"
	rect="1,1,32,33"
	reverse="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="15"
	frames_per_row="5"
	id="emote_oh"
	image="characters/frogatto-spritesheet4.png"
	pad="3"
	rect="1,1,32,33"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="14"
	frames_per_row="7"
	id="emote_confused"
	image="characters/frogatto-spritesheet3.png"
	pad="3"
	rect="1,40,32,72"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="16"
	frames_per_row="4"
	id="emote_impatient"
	image="characters/frogatto-spritesheet3.png"
	pad="3"
	rect="286,1,317,33"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="14"
	frames_per_row="7"
	id="emote_raisedfinger"
	image="characters/frogatto-spritesheet3.png"
	pad="3"
	rect="1,116,32,148"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="16"
	frames_per_row="8"
	id="emote_talk"
	image="characters/frogatto-spritesheet3.png"
	pad="3"
	rect="1,189,32,221"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	feet_width="5"
	frames="16"
	frames_per_row="4"
	id="emote_nod"
	image="characters/frogatto-spritesheet3.png"
	pad="3"
	rect="286,150,317,182"
	[/animation]

	[editor_info]
	category="player"
	[/editor_info]

	[properties]
	attack_damage="if(animation = 'fall_spin_attack', 1, 0)"
	attack_knockback="if(animation = 'run_attack', 300, 20)"
	bounce_on="def(object_type frog, obj)
			[set(frog.velocity_y, -max(obj.consts.spring_amount,
						(((frog.velocity_y*obj.consts.springiness)/100)*
							(100 - abs(bounce_angle)))/100)),
			add(frog.velocity_x, (((frog.velocity_y*obj.consts.springiness)/100)*bounce_angle)/100),
			[fire_event(obj, 'bounced_on'),
			set(vars.bounced_on_chain, vars.bounced_on_chain + 1),
			if(obj.team != 'evil', set(vars.bounced_on_chain, 0)),
			#debug(vars.bounced_on_chain + 1),#
			if(vars.bounced_on_chain > 8, achievement('jackalope')),
			],
			if(frog.animation = 'fall_spin_attack', [fire_event(obj, 'stomped_on'),
			set(vars.bounced_on_chain,0),
			])
			]
			where bounce_angle = (obj.consts.bounce_roundness*(frog.midpoint_x - obj.midpoint_x))/(max(1, obj.w))"
	damage_cooldown="10"
	damage_type="if(animation = 'run_attack','stun')"
	energy_charge="if((not FAT) and vars.has_energy_shot,
		            min(vars.charge_time, cycle - tmp.start_attack_cycle), 0)"
	set_light_size="def(lsize) [set(vars.lightSize, lsize), fire_event(self, 'light_size')]"
	shoot_bubbles="if(cycle%8=0, [spawn('frogatto_playable_unstable_2.bubble_shot',midpoint_x+10*facing,midpoint_y,facing, [set(velocity_x,(400+1d100)*facing),set(velocity_y,1d100-50)])])"
	shoot_fire="[spawn('frogatto_playable_unstable_2.fire_shot',midpoint_x+10*facing,midpoint_y,facing, [set(velocity_x,(1000+1d1000)*facing),set(velocity_y,1d900-450)])]"
	shoot_ice="spawn('frogatto_playable_unstable_2.ice_shot',midpoint_x+10*facing,midpoint_y,facing, [set(velocity_x,(1000)*facing),debug(self.type),set(velocity_y,0)])"
	team="'player'"
	[/properties]

	[particle_system]
	id="invincible_particles"
	max_x="40"
	max_y="50"
	min_x="0"
	min_y="0"
	spawn_rate="500"
	time_to_live="20"
	type="simple"
		[animation]
		duration="6"
		frame_info="1,1,1,1,334,24,9,9,2,2,2,2,343,24,7,7,3,3,3,3,350,24,5,5,4,4,4,4,355,24,3,3"
		frames="4"
		id="sparkle"
		image="compiled-0.png"
		rect="333,23,343,33"
		[/animation]

		[animation]
		duration="4"
		frame_info="2,2,2,2,395,24,7,7,3,3,3,3,402,24,5,5,4,4,4,4,407,24,3,3"
		frames="3"
		id="sparkle"
		image="compiled-0.png"
		rect="393,22,403,32"
		[/animation]

		[animation]
		duration="6"
		frame_info="3,3,3,3,668,18,5,5,4,4,4,4,673,18,3,3"
		frames="2"
		id="sparkle"
		image="compiled-0.png"
		rect="665,15,675,25"
		[/animation]

		[animation]
		duration="6"
		frame_info="4,4,4,4,721,15,3,3"
		frames="1"
		id="sparkle"
		image="compiled-0.png"
		rect="717,11,727,21"
		[/animation]

	[/particle_system]

	[object_variation]
	id="powerup_invincible"
		[set_str]
		_target="elements.consts"
		powerup_name="'powerup_invincible'"
		powerup_recharge="100"
		[/set_str]

		[set_str]
		_target="self"
		on_get_powerup="[set(vars.powerup_time, 200), add_particles('invincible_particles')]"
		on_lose_powerup="[set(brightness, 255), set(invincible_particles.spawn_rate, -1)]"
		on_process="[{on_process}, set(brightness, (wave(cycle*30)+1000)/3 + 255)]"
		on_timer="[{on_timer}, set(invincible, 10), add(vars.powerup_time, -1), if(vars.powerup_time <= 0, [fire_event('lose_powerup'), set(variations, filter(variations, 'v', v != 'powerup_invincible'))])]"
		[/set_str]

	[/object_variation]

	[object_variation]
	id="powerup_shooting"
		[set_str]
		_target="elements.consts"
		powerup_name="'powerup_shooting'"
		powerup_recharge="150"
		[/set_str]

		[set_str]
		_target="self"
		on_get_powerup="[set(vars.has_energy_shot, 1), set(vars.powerup_time, 300)]"
		on_lose_powerup="[set(vars.has_energy_shot, 0), set(brightness, 255)]"
		on_timer="[{on_timer},  add(vars.powerup_time, -1), if(vars.powerup_time <= 0, [fire_event('lose_powerup'), set(variations, filter(variations, 'v', v != 'powerup_shooting'))])]"
		[/set_str]

	[/object_variation]

	[object_variation]
	id="powerup_reflexes"
		[set_str]
		_target="elements.consts"
		powerup_name="'powerup_reflexes'"
		powerup_recharge="150"
		[/set_str]

		[set_str]
		_target="self"
		on_enter_level="[{on_enter_level}, set(level.chars_immune_from_freeze, [me])]"
		on_get_powerup="[set(vars.powerup_time, 300), set(level.chars_immune_from_freeze, [me]), set(tmp.start_powerup, cycle)]"
		on_lose_powerup="[set(brightness, 255), blur(0, 0, 0)]"
		on_process="[{on_process}, set(level.time_freeze, level.time_freeze + min(50, cycle - tmp.start_powerup, vars.powerup_time/2)*12),
		  screen_flash([0, 64, 32, (((wave(cycle*16)+2000)/16)*min(50, cycle - tmp.start_powerup, vars.powerup_time/2))/50], 1)]"
		on_timer="[{on_timer},  blur(40, 10, 10), set(vars.powerup_time, vars.powerup_time-1), if(vars.powerup_time <= 0, [fire_event('lose_powerup'), set(variations, filter(variations, 'v', v != 'powerup_reflexes'))])]"
		[/set_str]

	[/object_variation]

	[object_variation]
	id="fat"
		[set_str]
		_target="filter(elements.animation, image = 'characters/frogatto-spritesheet1.png')"
		image="characters/fat-frogatto-spritesheet1.png"
		[/set_str]

		[set_str]
		FAT="1"
		_target="elements.consts"
		jump_boost="80"
		jump_glide="20"
		jump_power="1200"
		[/set_str]

		[set_str]
		_target="filter(elements.animation, id = 'walk')"
		accel_x="1300"
		[/set_str]

		[set_str]
		_target="filter(elements.animation, id = 'run')"
		accel_x="1900"
		[/set_str]

		[set_str]
		_target="self"
		[/set_str]

	[/object_variation]

	[object_variation]
	id="upgrade_shield"
		[set_str]
		_target="self"
		on_enter_enter_crouch_anim="if((not tmp.shield),
			    [if(invincible < 25, set(invincible, 25)),
				 add_object(shield_obj), set(tmp.shield, shield_obj),
				 schedule(50, set(tmp.shield, null()))]
				  where shield_obj = object('frogatto_playable.shield', x+30, y+30, 1))"
		[/set_str]

	[/object_variation]

	[object_type]
	id="shield"
	on_end_flash_anim="die()"
	on_end_normal_anim="die()"
	on_flash="[set(animation, 'flash'), set(time_in_animation, time_in_animation)]"
	on_process="if(cycle < 20, set(alpha, cycle*4), set(alpha, 80 - (cycle-20)*14))"
		[animation]
		duration="25"
		frames="1"
		id="normal"
		image="characters/frogatto-spritesheet1.png"
		rect="286,439,317,471"
		[/animation]

		[animation]
		duration="25"
		frames="1"
		id="flash"
		image="characters/frogatto-spritesheet1.png"
		rect="321,439,352,471"
		[/animation]

	[/object_type]

	[object_type]
	id="tongue_shaft"
		[properties]
		set_length="def(len) [set(me.draw_area, [0, 0, len/2, 4]), set(me.tmp.length, len)]"
		team="'player'"
		[/properties]

		[tmp]
		length="4"
		[/tmp]

		[animation]
		area="0,0,8,4"
		frames="1"
		image="characters/frogatto-tongue.png"
		[/animation]

	[/object_type]

	[object_type]
	id="tongue_tip"
	on_calculate_position="[if(vars.swallowed, [add(vars.swallowed.x, x - last_x),
		                                 add(vars.swallowed.y, y - last_y)]),
		                set(last_x, x), set(last_y, y),
						if(collides_with_level(me),
						  [fire_event('resolve_collide_level'),
						   set(tmp.hit, 1)])]"
	on_collide_object_grab="[if(collide_with_area = 'body' and (not vars.swallowed) and collide_with.team != team,
	            [set(tmp.hit, 1), 
	            	if((entype) and (not (entype in level.player.enemies_tasted)), 
	            			[
	            			if(size(level.player.enemies_tasted) + 1 >= 25, achievement('frogourmet')),
	            			add(level.player.enemies_tasted, [entype])
	            			])
	            			where entype = collide_with.consts.basic_type,
				 if(collide_with.tags.swallowable and collide_with.consts.size <= consts.max_swallow_size,
	                        [remove_object(collide_with),
	  set(attached_objects, [collide_with]),
	  [set(collide_with.vars.removed_from_play, 1),sound('Gulp.wav')],
	  set(vars.swallowed, collide_with), fire_event(collide_with, 'swallowed')],
	  
	 #object is not swallowable, so do damage to it instead#
	 if(collide_with.get_hit_by, collide_with.get_hit_by(me))
	  )])]"
	on_resolve_collide_level="if(collides_with_level(me) and tmp.tongue_shaft.tmp.length > 1,
		                            [add(x, -facing*2),
									 tmp.tongue_shaft.set_length(tmp.tongue_shaft.tmp.length-2),
									 if(facing < 0, add(tmp.tongue_shaft.x, 2)),
									 fire_event('resolve_collide_level')])"
	solid_dimensions="player,common,boss,thrown"
		[consts]
		damage_cooldown="10"
		[/consts]

		[properties]
		team="'player'"
		[/properties]

		[vars]
		swallowed="null()"
		[/vars]

		[tmp]
		hit="0"
		last_x="null()"
		last_y="null()"
		tongue_shaft="null()"
		[/tmp]

		[consts]
		max_swallow_size="16"
		[/consts]

		[animation]
		duration="100"
		frames="1"
		grab_area="all"
		id="normal"
		image="characters/frogatto-spritesheet1.png"
		rect="197,289,205,295"
		[/animation]

	[/object_type]

	[object_type]
	id="fire_shot"
	on_end_normal_anim="animation('normal')"
	on_end_pop_anim="die()"
	on_enter_pop_anim="[set(velocity_x,0),set(velocity_y,0)]"
	on_spawned="set(vars.parent_obj, spawner)"
	on_timer="if(animation = 'pop',die(),animation('pop'))"
	prototype="shot"
	timer_frequency="5"
		[properties]
		attack_damage="1"
		damage_cooldown="10"
		dies_when_hit="0"
		team="'player'"
		[/properties]

		[animation]
		attack_area="all"
		duration="3"
		frames="4"
		id="normal"
		image="effects/particles2.png"
		pad="3"
		rect="3,2,12,11"
		[/animation]

		[animation]
		duration="3"
		frames="2"
		id="pop"
		image="effects/particles2.png"
		pad="4"
		rect="6,30,12,36"
		[/animation]

	[/object_type]

	[object_type]
	id="bubble_shot"
	on_end_normal_anim="animation('pop')"
	on_end_pop_anim="die()"
	on_enter_pop_anim="[set(velocity_x,0),set(velocity_y,0)]"
	on_spawned="set(vars.parent_obj, spawner)"
	prototype="shot"
		[properties]
		attack_damage="1"
		damage_cooldown="20"
		dies_when_hit="0"
		team="'player'"
		[/properties]

		[animation]
		attack_area="all"
		duration="8"
		frames="3"
		id="normal"
		image="effects/particles2.png"
		pad="3"
		rect="62,2,71,11"
		[/animation]

		[animation]
		duration="4"
		frames="2"
		id="pop"
		image="effects/particles2.png"
		pad="3"
		rect="101,2,110,11"
		[/animation]

	[/object_type]

	[object_type]
	id="ice_shot"
	on_end_normal_anim="die()"
	on_spawned="set(vars.parent_obj, spawner)"
	prototype="shot"
		[properties]
		attack_damage="1"
		damage_cooldown="20"
		dies_when_hit="0"
		team="'player'"
		[/properties]

		[animation]
		attack_area="all"
		duration="42"
		frames="1"
		h="6"
		id="normal"
		image="effects/powerup-fx.png"
		pad="3"
		w="20"
		x="43"
		y="93"
		[/animation]

	[/object_type]

[/prototype]

