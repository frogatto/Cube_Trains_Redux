{
	"animation": [
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 10000,
			"id": "normal",
			"image": "props/keys.png",
			"rect": [0,0,15,15]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 10000,
			"id": "thrown",
			"image": "props/keys.png",
			"rect": [0,0,15,15]
		}
	],
	"collide_dimensions": ["~key"],
	"consts": null,
	"editor_info": {
		"category": "props",
		"var": [
			{
				"enum_values": "gold,silver,green,red,purple,blue,cyan",
				"name": "color",
				"type": "enum",
				"value": "'gold'"
			},
			{
				"name": "event_name",
				"type": "text",
				"value": "''"
			}
		]
	},
	"friction": 1000,
	"id": "padlock_key",
	"mass": 5,
	"no_compile_image": "props/keys.png",
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_collide_feet": "[set(velocity_x, (velocity_x*50)/100), if(abs(velocity_x) < 50, set(velocity_x, 0)), set(velocity_y, if(abs(velocity_y) > 50, -velocity_y/2, 0))]",
	"on_collide_head": "set(velocity_y, -velocity_y)",
	"on_collide_object_body": "if(collide_with_area in ['attack'], get_hit_by(collide_with))",
	"on_collide_side": "set(velocity_x, -(velocity_x*70)/100)",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_start_level": "[ if(level.player.vars.stored_events[event_name] = 1, remove_object(me)),
					add(variations, [vars.color]),animation('normal')]",
	"properties": {
		"attack_damage": 0,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])",
		"damage_cooldown": 0,
		"difficulty_casual": 0,
		"difficulty_intense": 1,
		"difficulty_unfair": 2,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with)  null",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": -200,
		"hurt_velocity_y": -400,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"standard_thrown_damage": 400
	},
	"solid_area": [0,0,15,15],
	"solid_dimensions": ["thrown"],
	"tags": "swallowable",
	"tmp": null,
	"variations": {
		"blue": "[map(filter(doc.animation, rect = [0,0,15,15]), 'anim', set(anim.rect, [80,0,95,15]))]",
		"cyan": "[map(filter(doc.animation, rect = [0,0,15,15]), 'anim', set(anim.rect, [96,0,111,15]))]",
		"gold": "null",
		"green": "[map(filter(doc.animation, rect = [0,0,15,15]), 'anim', set(anim.rect, [32,0,47,15]))]",
		"purple": "[map(filter(doc.animation, rect = [0,0,15,15]), 'anim', set(anim.rect, [64,0,79,15]))]",
		"red": "[map(filter(doc.animation, rect = [0,0,15,15]), 'anim', set(anim.rect, [48,0,63,15]))]",
		"silver": "[map(filter(doc.animation, rect = [0,0,15,15]), 'anim', set(anim.rect, [16,0,31,15]))]"
	},
	"vars": null,
	"zorder": -1
}