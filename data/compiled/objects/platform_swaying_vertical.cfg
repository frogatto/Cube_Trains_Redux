[object_type]
id="platform_swaying_vertical"
on_button_pressed="go"
on_button_released="stop"
on_create="[
		set(alpha,0),
		set(activation_border, actBsize),
		set(vars.move_x1, move_x1 - if(facing < 0, 9, 0)),
		set(vars.move_x2, move_x2 - if(facing > 0, 9, 0)),
		set(vars.move_y1, move_y1 - 34),
		set(vars.move_y2, move_y2),
		
		[add_object(obj),
		set(vars.knot, obj)
		] where obj = object('platform_swaying_vertical.knot',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		if(1, #here, we'd want to switch based on available types of platform, for now we'll just have one.#
			[add_object(obj),
			set(vars.the_platform, obj)
			] where obj = object('platform_swaying_vertical.simple_platform_controller',vars.move_x1,vars.move_y1,facing,{'parent'->me,'activation_border'->actBsize})
		),

		[add_object(obj),
		set(vars.top_pulley, obj)
		] where obj = object('platform_swaying_vertical.pulley',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),

		[add_object(obj),
		set(vars.bottom_pulley, obj)
		] where obj = object('platform_swaying_vertical.pulley',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		
		[add_object(obj),
		set(vars.left_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		[add_object(obj),
		set(vars.right_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		if(is_zipline, [set(vars.dist, 95), set(vars.stopped, 1)]),
		]"
on_done_create="set(vars.speed, vars.speed*50/distance(point1, point2))"
on_process="[
		add(vars.dist, vars.speed*(1-vars.stopped)),
		setPos(newPos),
		] where newPos = list_add(list_tween(point1, point2, (sin(vars.dist)+1)/2), [0, sqrt(min(distance(pos, point1), distance(pos, point2)))])"
on_start_level="set(activation_border, actBsize)"
	[vars]
	children="[]"
	[/vars]

	[editor_info]
	category="platforms"
	help="A moving platform rigged from ropes."
		[var]
		name="speed"
		value="10"
		[/var]

		[var]
		name="move_x1"
		type="x"
		value="x"
		[/var]

		[var]
		name="move_y1"
		type="y"
		value="y"
		[/var]

		[var]
		name="move_y2"
		type="y"
		value="y + 200"
		[/var]

		[var]
		name="rope_height"
		value="128"
		[/var]

		[var]
		name="stopped"
		type="boolean"
		value="0"
		[/var]

		[var]
		name="dist"
		type="int"
		value="0"
		[/var]

		[var]
		name="is_zipline"
		type="boolean"
		value="0"
		[/var]

	[/editor_info]

	[properties]
	actBsize="max(abs(vars.move_x1-vars.move_x2),abs(vars.move_y1-vars.move_y2))*2"
	go="map(range(steps+1), 'step', schedule(step, set(vars.stopped,   (steps-step)/decimal(steps)))) where steps = 100"
	point1="[vars.move_x1, vars.move_y1]"
	point2="[vars.move_x1, vars.move_y2]"
	polarity="sign(vars.move_x2-vars.move_x1)"
	pos="[vars.knot.midpoint_x, vars.knot.midpoint_y]"
	pulleyDiameter="18"
	sagOffset="15"
	setPos="def(to) [
			set(vars.knot.midpoint_x, to[0] + pulleyDiameter/2 + sway_x), 
			set(vars.knot.midpoint_y, to[1] + pulleyDiameter/2),
			set(top_pulley.midpoint_x, point1[0] + pulleyDiameter/2),
			set(top_pulley.midpoint_y, point1[1]),
			set(top_pulley.rotate, polarity*(sin(vars.dist)+1)/2*180*15),
			set(bottom_pulley.midpoint_x, to[0] + pulleyDiameter/2 + sway_x),
			set(bottom_pulley.midpoint_y, to[1]),
			set(bottom_pulley.rotate, polarity*(sin(vars.dist)+1)/2*180*15),
			
			
			left_rope.set_ends( point1[0], point1[1],to[0] + sway_x, to[1]),
			right_rope.set_ends(to[0]+pulleyDiameter + sway_x, to[1],point1[0]+pulleyDiameter, point1[1]),
			right_rope.set_offset(length(point1[0], point1[1],to[0],to[1])/2),
			]"
	stop="map(range(steps+1), 'step', schedule(step, set(vars.stopped, 1-(steps-step)/decimal(steps)))) where steps = 100"
	sway_x="sin(dist*4)*5"
	topRopeW="pulleyDiameter"
	[/properties]

	[animation]
	duration="1000"
	frame_info="1,1,2,1,246,497,25,26"
	frames="1"
	id="normal"
	image="compiled-2.png"
	rect="245,496,272,523"
	[/animation]

	[object_type]
	id="knot"
	zorder="2"
		[animation]
		duration="1000"
		frames="1"
		id="normal"
		image="props/rope-platform.png"
		rect="81,1,93,13"
		[/animation]

	[/object_type]

	[object_type]
	id="pulley"
	zorder="2"
		[animation]
		duration="1000"
		frames="1"
		id="normal"
		image="props/rope-platform.png"
		rect="65,1,77,13"
		[/animation]

	[/object_type]

	[object_type]
	id="simple_platform_controller"
	on_create="[	
					set(alpha,0),
					set(x,parent.vars.knot.x),
					set(y,parent.vars.knot.y),
					set(vars.bwmag,8.0),
					
					[add_object(obj),
					set(vars.vert_rope, obj)
					] where obj = object('rope_angled_controller'),
					
					[add_object(obj),
					set(vars.basket, obj)
					] where obj = object('platform_swaying_vertical.shakebasket',x,y,facing,{'source'->me})
					
			]"
	on_process="[setPos(),setInertia(),decayBasketWobble(),testZipline()]"
	zorder="2"
		[properties]
		basketWobble="sin(cycle*8)*vars.bwmag*0.55"
		decayBasketWobble="def() set(vars.bwmag, max(6.0,decimal(vars.bwmag)*(0.99/1)))"
		not_in_zipline_bottomOut="if(mod(parent.vars.dist-90,360) < 150 or mod(parent.vars.dist-90,360) > 210, 1, 0)"
		not_in_zipline_topOut="if(mod(parent.vars.dist-90,360) > 50 and mod(parent.vars.dist-90,360) < 300, 1, 0)"
		parentSpeed="(1.0 - parent.vars.stopped)"
		player_is_standing_on_us="if(level.player.standing_on = vars.basket,1,0)"
		setInertia="def() [
						schedule(2, 
						
						set(vars.inertia, 50*(sin(parent.vars.dist+90*parent.polarity))))
			]"
		setPos="def() [
				vert_rope.set_ends(parent.vars.knot.midpoint_x, parent.vars.knot.midpoint_y, parent.vars.knot.midpoint_x + sway_x, parent.vars.knot.midpoint_y + parent.vars.rope_height),
				
				set(vars.basket.midpoint_x, parent.vars.knot.midpoint_x+sway_x),
				set(vars.basket.midpoint_y, parent.vars.knot.midpoint_y + parent.vars.rope_height),
				set(vars.basket.rotate, (parentSpeed*(-vars.inertia/6.0 + basketWobble))/2.0)
	
			]"
		sway_x="-parent.sway_x"
		testZipline="def() if(parent.vars.is_zipline,
				[if(player_is_standing_on_us, if(not_in_zipline_bottomOut, [if(mod(parent.vars.dist-90,360) > 180, set(parent.vars.dist,parent.vars.dist - 2*mod(parent.vars.dist-90,180) )),
				if(parent.stopped = 1.0, [parent.go ])], if(parent.stopped = 0.0,parent.stop))),
			
				if((not player_is_standing_on_us), if(not_in_zipline_topOut, if(parent.stopped = 1.0, parent.go), if(parent.stopped = 0.0, parent.stop)) )])"
		tilt="0"
		[/properties]

		[animation]
		duration="1000"
		frames="1"
		h="28"
		id="normal"
		image="effects/particles.png"
		w="28"
		x="210"
		y="166"
		[/animation]

	[/object_type]

	[object_type]
	id="shakebasket"
	next_animation="'normal'"
	on_jumped_on="if(level.player.standing_on = me, [add(source.vars.bwmag, 10),fire_event(source.parent,'tripped')])"
	platform_area="22,86,52,87"
	zorder="-1"
		[animation]
		duration="4"
		frames="11"
		id="normal"
		image="wip/basket-mockup2.png"
		no_remove_alpha_borders="true"
		palettes="forest_graveyard_shift,forest_autumn,forest_decay,forest_clean,forest_verdant"
		rect="75,0,146,99"
		reverse="yes"
		[/animation]

		[animation]
		duration="4"
		frames="7"
		id="normal"
		image="wip/basket-mockup2.png"
		no_remove_alpha_borders="true"
		palettes="forest_graveyard_shift,forest_autumn,forest_decay,forest_clean,forest_verdant"
		rect="219,0,290,99"
		reverse="yes"
		[/animation]

	[/object_type]

[/object_type]

