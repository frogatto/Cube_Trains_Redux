[prototype]
has_feet="no"
hitpoints="5"
id="large_breakable_block"
mass="5"
on_collide_object_body="if(collide_with.vars.team != vars.team, if(collide_with_area = 'attack', get_hit_by(collide_with)))"
on_die="[score(level,10),sound('BlockBreak.ogg'), map([0] * 30, spawn('breakable_block_particle', x + 1d30, y + 1d30, facing))]"
on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
solid_area="0,0,47,47"
zorder="-1"
	[consts]
	flinch_threshold="3"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	damage_cooldown="0"
	flash_color="def(collide_with) execute(me, if(collide_with.attack_damage < me.hitpoints,
					[schedule(4, [set(me.green, 255), set(me.blue, 255)]), set(me.animation, 'hurt'), set(me.green, 100), set(me.blue, 100)]))"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible_posthit) and (collide_with.attack_damage > 0) and (collide_with.attack_damage > consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[flash_color(collide_with),handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage > consts.flinch_threshold, [add(me.velocity_x,me.hurt_velocity_x), add(me.velocity_y,me.hurt_velocity_y)]))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_velocity_x="200"
	hurt_velocity_y="-400"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[tmp]
	time_last_hit="0"
	[/tmp]

	[animation]
	body_area="all"
	duration="1000000"
	frame_info="0,0,0,0,576,555,48,48"
	frames="1"
	id="normal5"
	image="compiled-1.png"
	rect="576,555,623,602"
	[/animation]

	[animation]
	body_area="all"
	duration="1000000"
	frame_info="0,0,0,0,528,555,48,48"
	frames="1"
	id="normal4"
	image="compiled-1.png"
	rect="528,555,575,602"
	[/animation]

	[animation]
	body_area="all"
	duration="1000000"
	frame_info="0,0,0,0,240,555,48,48"
	frames="1"
	id="normal3"
	image="compiled-1.png"
	rect="240,555,287,602"
	[/animation]

	[animation]
	body_area="all"
	duration="1000000"
	frame_info="0,0,0,0,931,504,48,48"
	frames="1"
	id="normal2"
	image="compiled-1.png"
	rect="931,504,978,551"
	[/animation]

	[animation]
	body_area="all"
	duration="1000000"
	frame_info="0,0,0,0,0,555,48,48"
	frames="1"
	id="normal1"
	image="compiled-1.png"
	rect="0,555,47,602"
	[/animation]

	[properties]
	flash_color="def(collide_with) null()"
	handle_damage="def(collide_with) execute(me, [add(me.hitpoints, - collide_with.attack_damage),if(hitpoints > 1, set(animation, 'normal' + (hitpoints-1)))])"
	handle_knockback="def(collide_with) null()"
	hurt_velocity_x="0"
	hurt_velocity_y="0"
	[/properties]

[/prototype]

