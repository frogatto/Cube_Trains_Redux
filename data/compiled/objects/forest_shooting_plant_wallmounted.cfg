[prototype]
feet_width="4"
friction="1000"
hitpoints="4"
id="forest_shooting_plant_wallmounted"
mass="5"
on_add_object_fail="[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"
on_bounced_on="[if(jumped_on_by.mass >= 1000, die(), animation('spring'))]"
on_change_animation_failure="fire_event('solidity_fail')"
on_change_solid_dimensions_fail="fire_event('solidity_fail')"
on_child_spawned="set(vars.child, [child])"
on_collide_object_body="if(collide_with.team != team and collide_with_area in ['attack'], get_hit_by(collide_with))"
on_create="[null(), fire_event('shoot')]"
on_die="[score(level,points_value), spawn_item(self), death_burst_tracked(self)]"
on_end_hurt_anim="animation('normal')"
on_enter_anim="set(tmp, 'already_hit', [])"
on_shoot="if(filter(level.chars, 'foo', foo.type = 'forest_shooting_plant_wallmounted.shot').size = 0,
				spawn('forest_shooting_plant_wallmounted.shot', x + 70*facing, midpoint_y, facing, [set(velocity_x,500*facing),set_var('x_init',x),set_var('y_init',y)]  ))"
on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"
on_surface_damage="die()"
on_timer="fire_event('shoot')"
springiness="100"
timer_frequency="20"
traction="1000"
traction_in_air="1000"
zorder="30"
	[consts]
	basic_type="'forest_shooting_plant_wallmounted'"
	chargeup_repeat="1"
	flinch_threshold="3"
	frogourmet_tag="'super_shooting_plant'"
	normal_repeat="1"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	cause_flinch="def(collide_with) execute(me, [add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y)])"
	damage_cooldown="0"
	display_hurt_visuals="def() execute(me, 
					[if('hurt' in available_animations,set(me.animation, 'hurt')),
					hurt_flash_sequence()
					])"
	display_posthit_invincibility_flash_sequence="def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )"
	flash_bright="def() [set(me.brightness, 1023)]"
	flash_off="def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]"
	flash_red="def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage > consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage > consts.flinch_threshold, cause_flinch(collide_with)))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_flash_sequence="def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]"
	hurt_velocity_x="-200"
	hurt_velocity_y="-400"
	is_invincible="if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[vars]
	child="null()"
	damage="1"
	points_value="7"
	[/vars]

	[properties]
	hurt_velocity_x="0"
	hurt_velocity_y="0"
	team="'evil'"
	[/properties]

	[animation]
	accel_y="00"
	body_area="all"
	duration="6"
	frame_info="3,1,5,1,774,165,24,30"
	frames="1"
	id="normal"
	image="compiled-2.png"
	rect="771,164,802,195"
	reverse="yes"
	[/animation]

	[animation]
	duration="18"
	frames="1"
	id="hurt"
	[/animation]

	[editor_info]
	category="plants"
	[/editor_info]

	[properties]
	handle_knockback="def(collide_with) null()"
	[/properties]

	[tmp]
	anim_repeat="0"
	[/tmp]

	[object_type]
	dies_on_inactive="yes"
	id="shot"
	on_process="[track_player()]"
	on_timer="die()"
	prototype="shot"
	timer_frequency="300"
	traction_in_air="1000"
		[properties]
		track_player="def() [if(level.player.midpoint_y > midpoint_y, add(velocity_y, 5), add(velocity_y, -5))]"
		[/properties]

		[vars]
		angle="90"
		[/vars]

		[animation]
		attack_area="all"
		duration="60"
		frames="1"
		id="normal"
		image="enemies/generic.png"
		rect="90,5,102,17"
		[/animation]

	[/object_type]

	[object_type]
	dies_on_inactive="yes"
	id="shot_deprecated"
	on_process="[track_player(),if(length(x,y,vars.x_init,vars.y_init) > 500, die())]"
	on_timer="die()"
	prototype="shot"
	timer_frequency="300"
	traction_in_air="1000"
		[properties]
		capped="def(value,cap) max(-cap,min(cap,value))"
		correct_angle="if(shorter_rotation_direction, add(vars.angle,2), add(vars.angle,-2))"
		desired_x_vel="250 * cos(vars.angle)"
		desired_y_vel="250 * sin(vars.angle)"
		player_angle="angle_to(me,level.player)"
		shorter_rotation_direction="if( mod(vars.angle - player_angle, 360) > mod(player_angle - vars.angle, 360), 1,0)"
		shot_max="450"
		shot_speed="10"
		track_player="def() [correct_angle,
										#set(vars.angle, integer(vars.angle)%360),#
										set(velocity_x, desired_x_vel),
										set(velocity_y, desired_y_vel)
									]"
		[/properties]

		[vars]
		angle="90"
		[/vars]

		[animation]
		attack_area="all"
		duration="60"
		frames="1"
		id="normal"
		image="enemies/generic.png"
		rect="90,5,102,17"
		[/animation]

	[/object_type]

[/prototype]

