{
	"always_active": true,
	"animation": [
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 18,
			"frame_info": [5,5,5,1,605,344,31,30],
			"frames": 1,
			"id": "stand",
			"image": "compiled-2.png",
			"rect": [600,339,640,374]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 2,
			"frame_info": [5,5,5,1,605,344,31,30],
			"frames": 1,
			"frames_per_row": 1,
			"id": "turn",
			"image": "compiled-2.png",
			"rect": [600,339,640,374]
		},
		{
			"accel_x": 360,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [5,5,5,1,543,247,31,30,5,4,5,1,574,247,31,31,5,3,5,1,605,247,31,32],
			"frames": 3,
			"id": "walk",
			"image": "compiled-2.png",
			"rect": [538,242,578,277]
		},
		{
			"accel_x": 300,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"frame_info": [5,5,5,1,222,280,31,30,5,4,5,1,253,280,31,31,5,3,5,1,284,280,31,32],
			"frames": 3,
			"frames_per_row": 3,
			"id": "walk",
			"image": "compiled-2.png",
			"rect": [217,275,257,310]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 2,
			"frame_info": [9,8,1,1,348,247,41,27,7,8,1,1,389,247,43,27,9,6,1,1,432,247,41,29,13,5,2,1,473,247,36,30,14,3,3,1,509,247,34,32],
			"frames": 5,
			"frames_per_row": 5,
			"id": "spring",
			"image": "compiled-2.png",
			"rect": [339,239,389,274],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 18,
			"frame_info": [5,5,5,1,605,344,31,30],
			"frames": 1,
			"id": "hurt",
			"image": "compiled-2.png",
			"rect": [600,339,640,374]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 2,
			"frame_info": [3,7,1,1,443,520,37,28,3,8,1,1,480,520,37,27,2,8,1,1,517,520,38,27],
			"frames": 3,
			"frames_per_row": 3,
			"id": "prepare_lunge",
			"image": "compiled-2.png",
			"rect": [440,513,480,548]
		},
		{
			"accel_x": 2800,
			"accel_y": 80,
			"body_area": "all",
			"duration": 10,
			"frame_info": [0,6,0,1,404,626,41,29,4,6,0,1,445,626,37,29,6,7,7,1,482,626,28,28],
			"frames": 3,
			"id": "lunge",
			"image": "compiled-0.png",
			"rect": [404,620,444,655]
		},
		{
			"accel_x": 2800,
			"accel_y": 80,
			"attack_area": [12,0,40,34],
			"body_area": "all",
			"duration": 6,
			"frame_info": [1,7,2,1,555,520,52,28,1,7,2,1,607,520,52,28,4,9,3,1,659,520,48,26],
			"frames": 3,
			"frames_per_row": 3,
			"id": "lunge_attack",
			"image": "compiled-2.png",
			"rect": [554,513,608,548]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [12,7,1,1,707,520,42,28,10,8,1,1,749,520,44,27,7,7,1,1,793,520,47,28],
			"frames": 3,
			"frames_per_row": 3,
			"id": "lunge_stuck",
			"image": "compiled-2.png",
			"rect": [695,513,749,548],
			"rows": 2,
			"solid_area": [10,10,30,35]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 10,
			"frame_info": [1,23,2,2,752,599,38,29,6,5,8,2,790,599,27,47,7,5,8,2,817,599,26,47],
			"frames": 3,
			"frames_per_row": 3,
			"id": "jump",
			"image": "compiled-1.png",
			"rect": [751,576,791,629],
			"solid_area": [13,29,33,54],
			"velocity_y": -1600
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 2,
			"frame_info": [7,10,6,2,645,985,28,37,7,10,6,2,673,985,28,37],
			"frames": 2,
			"frames_per_row": 2,
			"id": "prepare_jump",
			"image": "compiled-1.png",
			"rect": [638,975,678,1023]
		},
		{
			"accel_x": -80,
			"accel_y": 120,
			"attack_area": [12,0,40,34],
			"body_area": "all",
			"duration": 10,
			"frame_info": [6,3,6,5,310,405,48,28,6,6,6,1,358,405,48,29,6,9,6,1,406,405,48,26],
			"frames": 3,
			"frames_per_row": 3,
			"id": "jump_attack",
			"image": "compiled-2.png",
			"rect": [304,402,363,437]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 10,
			"frame_info": [13,2,11,2,534,312,31,32],
			"frames": 1,
			"frames_per_row": 1,
			"id": "lunge_unstuck",
			"image": "compiled-2.png",
			"rect": [521,310,575,345],
			"solid_area": [10,10,30,35]
		}
	],
	"consts": {
		"basic_type": "kitty_sword",
		"bounce_roundness": 200,
		"charge_duration": 80,
		"posthit_invicibility_period": 100,
		"spring_amount": 1400,
		"springiness": 200
	},
	"editor_info": {
		"category": "milgramen"
	},
	"friction": 1000,
	"functions": "#looks for the player and turns to face it#	
	  def set_facing(obj,level) if(desired_facing != obj.facing, [animation('turn'),set(obj.facing, desired_facing)], animation('walk')
	           ) where desired_facing = if(level.player.x < obj.x, -1, 1);


	  #if the player is in an opportune spot, attack it#	
	  def consider_attacking(obj,level) if((desired_facing = obj.facing) and (abs(level.player.x - obj.x) < 150) and (abs(level.player.y - obj.y) < 50), animation('prepare_jump'), animation('walk')
	           ) where desired_facing = if(level.player.x < obj.x, -1, 1);
	1",
	"hitpoints": 2000,
	"id": "kitty_sword",
	"mass": 64,
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_bounced_on": "if(is_invincible_posthit,null,[add(hitpoints, -200),set(vars.time_last_hit, cycle), hurt_flash_sequence(),display_posthit_invincibility_flash_sequence(), if(jumped_on_by.mass >= 1000, die(), animation('spring'))])",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area = 'attack', get_hit_by(collide_with)))",
	"on_collide_side": "if(collide_with = level.player,
   #make it so if we collide with the player we immediately jump/attack.
    this ensures the kitty can't simply get stuck between the player and a wall#
   animation('jump'),
  [
  if(animation = 'lunge_attack' and (not collide_with),
		    [animation('lunge_stuck'), add(x,-50*facing),set(velocity_x,0), set(tmp.stuck_count, 0)]),
  if(not (animation in ['jump_attack', 'lunge_attack', 'lunge_stuck', 'lunge_unstuck']), [set(facing, -facing), animation('turn'), set(velocity_x, 0)])
		 ])",
	"on_create": "set(level.gui.vars.bosses, level.gui.vars.bosses + [me])",
	"on_die": "[score(level,points_value), spawn_item(self), death_burst(self)]",
	"on_end_hurt_anim": "animation('stand')",
	"on_end_jump_attack_anim": "[animation('walk'), set(tmp.can_attack_at, cycle+50)]",
	"on_end_lunge_anim": "animation('walk')",
	"on_end_lunge_attack_anim": "[animation('walk')]",
	"on_end_lunge_stuck_anim": "if(tmp.stuck_count > 4, animation('lunge_unstuck'), [animation('lunge_stuck'), set(tmp.stuck_count, tmp.stuck_count+1)])",
	"on_end_lunge_unstuck_anim": "animation('stand')",
	"on_end_prepare_jump_anim": "if(cycle - vars.began_charging > consts.charge_duration,fire_event('initiate_jump'),animation('prepare_jump'))",
	"on_end_prepare_lunge_anim": "if(cycle - vars.began_charging > consts.charge_duration,animation('lunge'),animation('prepare_lunge'))",
	"on_end_spring_anim": "animation('stand')",
	"on_end_stand_anim": "if(is_standing, animation('walk'), animation('stand'))",
	"on_end_turn_anim": "animation('walk')",
	"on_end_walk_anim": "if((not facing_player),
  if(abs(level.player.midpoint_x - midpoint_x) < 800, set(facing, -facing)),

  if(cycle > tmp.can_attack_at and abs(level.player.midpoint_x - midpoint_x) < (300 + 1d200),

   if((1d4 = 1) or (abs(level.player.y - y) > 50),
    [animation('prepare_jump'),set(vars.began_charging,cycle)],
	[animation('prepare_lunge'),set(vars.began_charging,cycle)]
	),

if(distance_to_cliff < 80, [set(facing, -facing), animation('turn')], animation('walk'))))",
	"on_enter_water": "die()",
	"on_initiate_jump": "[animation('jump'), if(level.player.x > midpoint_x,facing(1),facing(-1)),set(velocity_x, (level.player.midpoint_x - midpoint_x)*4), if(level.player.y > y2 and is_standing_on_platform, [set(fall_through_platforms, 20), set(velocity_y, 0)], if(midpoint_y - level.player.midpoint_y > 200, [set(velocity_y, -2200)]))]",
	"on_process_jump": "if(abs(level.player.midpoint_x - midpoint_x) < 80 and level.player.y2 > y,
                       [animation('jump_attack')],
						if(is_standing, animation('stand')))",
	"on_process_lunge": "if(abs(level.player.midpoint_x - midpoint_x) < 200,
                     animation('lunge_attack'))",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"properties": {
		"attack_damage": 2,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])",
		"damage_cooldown": 0,
		"difficulty_casual": 0,
		"difficulty_intense": 1,
		"difficulty_unfair": 2,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"facing_player": "if(level.player.x < x, facing < 0, facing > 0)",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 40,
		"get_hit_by": "def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": 0,
		"hurt_velocity_y": 0,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"standard_thrown_damage": 400,
		"team": "'evil'"
	},
	"solid_area": [13,9,33,34],
	"solid_dimensions": ["common"],
	"tmp": {
		"can_attack_at": -1
	},
	"traction": 1000,
	"traction_in_air": 200,
	"variations": null,
	"vars": {
		"began_charging": 0,
		"points_value": 500,
		"turns_at_cliffs": 1,
		"turns_towards_player": 1
	}
}