{
	"always_active": true,
	"animation": {
		"activate_area": "all",
		"duration": 1000,
		"frame_info": [0,0,0,0,670,549,32,48],
		"frames": 1,
		"id": "normal",
		"image": "compiled-1.png",
		"no_remove_alpha_borders": true,
		"rect": [670,549,701,596]
	},
	"editor_info": {
		"category": "props",
		"var": [
			{
				"name": "x_bound",
				"type": "x",
				"value": "mid_x-150"
			},
			{
				"name": "x2_bound",
				"type": "x",
				"value": "mid_x+150"
			},
			{
				"name": "y_bound",
				"type": "y",
				"value": "mid_y-150"
			},
			{
				"name": "y2_bound",
				"type": "y",
				"value": "mid_y+150"
			},
			{
				"enum_values": "grey,blue,red,green",
				"name": "color",
				"type": "enum",
				"value": "'grey'"
			}
		]
	},
	"id": "ethereal_block_activator",
	"next_animation": "'normal'",
	"object_type": [
		{
			"animation": {
				"duration": 1000,
				"feet_x": 63,
				"feet_y": 63,
				"frames": 1,
				"id": "normal",
				"image": "effects/silhouette/soft-glow.png",
				"no_remove_alpha_borders": true,
				"rect": [0,0,255,255]
			},
			"id": "soft_glow"
		},
		{
			"animation": [
				{
					"duration": 1000,
					"frames": 1,
					"id": "grey",
					"image": "props/cement-block-ethereal-activator.png",
					"no_remove_alpha_borders": true,
					"rect": [0,48,31,95]
				},
				{
					"duration": 1000,
					"frames": 1,
					"id": "blue",
					"image": "props/cement-block-ethereal-activator.png",
					"no_remove_alpha_borders": true,
					"rect": [32,48,63,95]
				},
				{
					"duration": 1000,
					"frames": 1,
					"id": "red",
					"image": "props/cement-block-ethereal-activator.png",
					"no_remove_alpha_borders": true,
					"rect": [64,48,95,95]
				},
				{
					"duration": 1000,
					"frames": 1,
					"id": "green",
					"image": "props/cement-block-ethereal-activator.png",
					"no_remove_alpha_borders": true,
					"rect": [96,48,127,95]
				}
			],
			"id": "glow",
			"on_child_spawned": "if( child.type = 'ethereal_block_activator.soft_glow', set(vars.big_glow, child))",
			"on_create": "[set(brightness, 500),set(alpha,100),spawn('ethereal_block_activator.soft_glow',mid_x+1,mid_y+1,facing,[set(zsub_order,zsub_order +1),set(alpha,0)])]",
			"on_die": "[remove_object(vars.big_glow),remove_object(me)]",
			"on_timer": "[set(alpha, val),set(vars.big_glow.alpha, val/2),set(vars.big_glow.scale, 0.3*val/255.0 +0.1)] where val = (150 +65*sin(level.cycle*10) +15*sin(level.cycle*2)+10*min(1,tan(level.cycle*33)))",
			"timer_frequency": 1
		}
	],
	"on_bumped": "[sound('MenuConfirm.ogg'),if(vars.glow, toggle_blocks(), toggle_blocks()), map(filter(level.chars, 'ob', ob.type = 'ethereal_block_activator' and ob.variations = context.variations), 'hob', fire_event(hob, 'triggered'))]",
	"on_child_spawned": "if( child.type = 'ethereal_block_activator.glow', [set(vars.glow, child)])",
	"on_collide_object_activate": "if(collide_with_area in ['body', 'thrown'], [set(vars.last_triggered, cycle), if(cycle > vars.last_triggered + 10, fire_event('bumped'))])",
	"on_end_anim": "animation('normal')",
	"on_start_level": "[add(variations, [vars.color]),animation('normal')]",
	"on_triggered": "[if(vars.glow, [schedule(1,fire_event(vars.glow,'die')),set(vars.glow,null) ], [spawn('ethereal_block_activator.glow',mid_x,mid_y+if(upside_down>0, -4,0),facing,[set(zsub_order,zsub_order +1),set(animation,vars.color)]) ] )]",
	"properties": {
		"toggle_blocks": "def() map(filter(level.chars, 'foo', foo.type='ethereal_block' and foo.variations = context.variations), 'bar', fire_event(bar, 'toggled'))",
		"toggle_blocks_off": "def() map(filter(level.chars, 'foo', foo.type='ethereal_block' and foo.variations = context.variations), 'bar', fire_event(bar, 'toggled_off'))",
		"toggle_blocks_on": "def() map(filter(level.chars, 'foo', foo.type='ethereal_block' and foo.variations = context.variations), 'bar', fire_event(bar, 'toggled_on'))"
	},
	"variations": {
		"blue": "[map(filter(doc.animation, rect = [0,0,31,47]), 'anim', set(anim.rect, [32,0,63,47]))]",
		"green": "[map(filter(doc.animation, rect = [0,0,31,47]), 'anim', set(anim.rect, [96,0,127,47]))]",
		"grey": "null",
		"red": "[map(filter(doc.animation, rect = [0,0,31,47]), 'anim', set(anim.rect, [64,0,95,47]))]"
	},
	"vars": {
		"last_triggered": -400
	},
	"zorder": -1,
	"zsub_order": 0
}