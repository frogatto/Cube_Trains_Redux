[prototype]
hitpoints="2"
id="civ-tile_war"
on_calculate_kingdom="[
	      if(vars.cache_version != arg.vars.cache_version,
				  [
				  map(new_kingdom, 't', set(t.vars.kingdom_in, new_kingdom)),
				  map(new_kingdom, 't', set(t.vars.connected_to_farm, has_farm)) where has_farm = if(find(new_kingdom, 't', t.type = 'civ-tile_farm' and t.animation = self.animation), 1, 0),
				  map(new_kingdom, 't', set(t.vars.cache_version, context.arg.vars.cache_version))
				  ]
				   where new_kingdom = kingdom_internal([])
				  )]"
on_calculate_surroundings="[
		   set(vars.tile_left, find(logic.vars.play, 'obj', obj.midpoint_x = (context.midpoint_x - 32) and obj.midpoint_y = context.midpoint_y)),
		   set(vars.tile_right, find(logic.vars.play, 'obj', obj.midpoint_x = (context.midpoint_x + 32) and obj.midpoint_y = context.midpoint_y)),
		   set(vars.tile_up, find(logic.vars.play, 'obj', obj.midpoint_x = context.midpoint_x and obj.midpoint_y = (context.midpoint_y - 32))),
		   set(vars.tile_down, find(logic.vars.play, 'obj', obj.midpoint_x = context.midpoint_x and obj.midpoint_y = (context.midpoint_y + 32)))
	] where logic = get_object(level, 'logic')"
on_create="set(vars.logic, get_object(level, 'logic'))"
on_end_anim="set(animation, animation)"
on_lmb_down="if(abs(arg.pos_x()-midpoint_x) < logic.consts.tile_size and abs(arg.pos_y()-midpoint_y) < logic.consts.tile_size, 
			[fire_event('track_mouse'), 
			set(zorder, zorder + 10),
			vars.logic.draw_blackout(self),
			])"
on_nix="die()"
on_track_mouse="[
		set(midpoint_x, level.player.vars.mouse.pos_x()),
		set(midpoint_y, level.player.vars.mouse.pos_y()),
		if('left' in level.player.vars.mouse.vars.parent_player.ctrl_mice[level.player.vars.mouse.vars.parent_player.vars.number], 
			schedule(1, fire_event('track_mouse')), 
			[fire_event(get_object(level, 'logic'), 'release_tile', self), [set(zorder, zorder - 10), logic.clear_blackout]]),
		]"
zorder="0"
	[vars]
	cache_version="-1"
	connected_to_farm="0"
	kingdom_in="null()"
	tile_down="null()"
	tile_left="null()"
	tile_right="null()"
	tile_up="null()"
	[/vars]

	[properties]
	go_to="def(pos) map(range(frames), 'step', schedule(frames - step, [	set(self.x, pos[0] + ((self.x-pos[0])/frames)*step ) , 
																				set(self.y, pos[1] + ((self.y-pos[1])/frames)*step ) ])) where frames = 20"
	kingdom="vars.kingdom_in"
	kingdom_internal="def(already_found)
		        if([midpoint_x,midpoint_y] in already_found, [],
		   [me] + if(vars.tile_left, vars.tile_left.kingdom_internal(fnd), [])
			    + if(vars.tile_right, vars.tile_right.kingdom_internal(fnd), [])
			    + if(vars.tile_up, vars.tile_up.kingdom_internal(fnd), [])
			    + if(vars.tile_down, vars.tile_down.kingdom_internal(fnd), []))
		      where fnd = already_found + [[midpoint_x,midpoint_y]]"
	kingdom_internal_pos="def(already_found, xpos, ypos, side)
		 if([xpos,ypos] in already_found, [],
		   [me] + if(tile_left, tile_left.kingdom_internal(fnd), [])
			    + if(tile_right, tile_right.kingdom_internal(fnd), [])
			    + if(tile_up, tile_up.kingdom_internal(fnd), [])
			    + if(tile_down, tile_down.kingdom_internal(fnd), []))
		      where fnd = already_found + [[xpos,ypos]],
		            tile_left = find(logic.vars.play, 'obj', obj.midpoint_x = (xpos - 32) and obj.midpoint_y = ypos and obj.animation = side),
		            tile_right = find(logic.vars.play, 'obj', obj.midpoint_x = (xpos + 32) and obj.midpoint_y = ypos and obj.animation = side),
		            tile_up = find(logic.vars.play, 'obj', obj.midpoint_x = xpos and obj.midpoint_y = (ypos - 32) and obj.animation = side),
		            tile_down = find(logic.vars.play, 'obj', obj.midpoint_x = xpos and obj.midpoint_y = (ypos + 32) and obj.animation = side)
			  where logic = get_object(level, 'logic')"
	kingdom_pos="def(coords) kingdom_internal_pos([], coords[0], coords[1], self.animation)"
	search_adjacent_connected_to_farm="def(xpos, ypos, side)
		       (tile_left  and tile_left.vars.connected_to_farm) or
		       (tile_right and tile_right.vars.connected_to_farm) or
		       (tile_up    and tile_up.vars.connected_to_farm) or
		       (tile_down  and tile_down.vars.connected_to_farm)
			    where
		            tile_left = find(logic.vars.play, 'obj', obj.midpoint_x = (xpos - 32) and obj.midpoint_y = ypos and obj.animation = side),
		            tile_right = find(logic.vars.play, 'obj', obj.midpoint_x = (xpos + 32) and obj.midpoint_y = ypos and obj.animation = side),
		            tile_up = find(logic.vars.play, 'obj', obj.midpoint_x = xpos and obj.midpoint_y = (ypos - 32) and obj.animation = side),
		            tile_down = find(logic.vars.play, 'obj', obj.midpoint_x = xpos and obj.midpoint_y = (ypos + 32) and obj.animation = side)
		        where logic = get_object(level, 'logic')"
	[/properties]

	[animation]
	duration="6531"
	frame_info="2,2,2,2,520,801,13,13"
	id="normal"
	image="compiled-2.png"
	rect="518,799,534,815"
	[/animation]

	[animation]
	duration="6531"
	frame_info="2,2,2,2,507,801,13,13"
	id="gold"
	image="compiled-2.png"
	rect="505,799,521,815"
	[/animation]

	[animation]
	duration="6531"
	frame_info="2,2,2,2,494,801,13,13"
	id="silver"
	image="compiled-2.png"
	rect="492,799,508,815"
	[/animation]

	[animation]
	duration="6531"
	frame_info="2,2,2,2,481,801,13,13"
	id="black"
	image="compiled-2.png"
	rect="479,799,495,815"
	[/animation]

[/prototype]

