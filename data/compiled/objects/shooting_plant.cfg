{
	"animation": [
		{
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 30,
			"frame_info": [5,4,6,1,997,848,16,19],
			"frames": 1,
			"id": "normal",
			"image": "compiled-2.png",
			"rect": [992,844,1018,867]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 30,
			"frame_info": [5,4,6,1,997,848,16,19],
			"frames": 1,
			"id": "stand",
			"image": "compiled-2.png",
			"rect": [992,844,1018,867]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 30,
			"frame_info": [5,5,6,1,662,888,16,18],
			"frames": 1,
			"id": "stand",
			"image": "compiled-2.png",
			"rect": [657,883,683,906]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"events": "40:shoot",
			"frame_info": [4,3,7,1,370,826,16,20,3,3,7,1,386,826,17,20,2,2,7,1,403,826,18,21,4,3,7,1,421,826,16,20,3,9,4,1,437,826,20,14,3,9,3,1,457,826,21,14,4,7,5,1,478,826,18,16,3,9,4,1,496,826,20,14],
			"frames": 8,
			"id": "shoot",
			"image": "compiled-2.png",
			"rect": [366,823,392,846]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 10,
			"frame_info": [6,5,6,1,617,888,15,18,6,5,6,1,632,888,15,18,6,5,6,1,647,888,15,18],
			"frames": 3,
			"id": "turn",
			"image": "compiled-2.png",
			"rect": [611,883,637,906]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [3,10,3,1,178,826,21,13,3,15,3,1,199,826,21,8,5,4,6,1,220,826,16,19,6,1,8,1,236,826,13,22],
			"frames": 4,
			"id": "spring",
			"image": "compiled-2.png",
			"rect": [175,816,201,839]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 15,
			"frame_info": [3,3,8,1,401,848,16,20,0,3,10,1,417,848,17,20],
			"frames": 2,
			"id": "hurt",
			"image": "compiled-2.png",
			"rect": [398,845,424,868]
		}
	],
	"consts": {
		"basic_type": "shooting_plant",
		"frogourmet_tag": "shooting_plant",
		"solid_dimensions": ["enemy","common"],
		"springiness": 160,
		"thrown_type": "shooting_plant.thrown"
	},
	"editor_info": {
		"category": "plants"
	},
	"feet_width": 4,
	"friction": 1000,
	"hitpoints": 50,
	"id": "shooting_plant",
	"mass": 5,
	"object_type": {
		"animation": [
			{
				"body_area": null,
				"duration": 5,
				"frames": 2,
				"id": "thrown",
				"image": "enemies/plant-shooting.png",
				"rect": [93,83,119,106],
				"thrown_area": "all"
			},
			{
				"body_area": "all",
				"duration": 5,
				"frames": 2,
				"id": "on_back",
				"image": "enemies/plant-shooting.png",
				"rect": [93,83,119,106],
				"thrown_area": null
			}
		],
		"consts": {
			"basic_type": "shooting_plant",
			"frogourmet_tag": "shooting_plant",
			"thrown_type": "shooting_plant.thrown"
		},
		"id": "thrown",
		"prototype": ["throwable_small_enemy"],
		"solid_area": [5,8,19,21],
		"solid_dimensions": ["common","enemy"]
	},
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_bounced_on": "animation('spring')",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_collide_feet": "animation('stand')",
	"on_collide_head": "set(velocity_y, -velocity_y/2)",
	"on_collide_object_body": "if(collide_with.team != team and collide_with_area in ['attack'], get_hit_by(collide_with))",
	"on_collide_side": "if(not (animation in ['hurt']), [set(facing, -facing), animation('turn'), set(velocity_x,0)])",
	"on_create": "animation('stand')",
	"on_die": "[score(level,points_value), spawn_item(self), death_burst_tracked(self)]",
	"on_end_hurt_anim": "animation('stand')",
	"on_end_shoot_anim": "animation('stand')",
	"on_end_spring_anim": "animation('stand')",
	"on_end_stand_anim": "if(facing != desired_facing, animation('turn'), animation('shoot')) where desired_facing = if(level.player.x < x, -1, 1)",
	"on_end_turn_anim": "[facing(if(level.player.x < x, -1, 1)), animation('stand')]",
	"on_enter_anim": "set(tmp, 'already_hit', [])",
	"on_enter_water": "die()",
	"on_jumped_on": "[if(jumped_on_by.mass >= 20, die())]",
	"on_shoot": "spawn('pollen_ball', midpoint_x+20*facing, midpoint_y-12, facing, [set(velocity_x, 300*facing)])",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_stomped_on": "[add(hitpoints, -3), set(green, 100), set(blue, 100),
	                schedule(4, [set(green, 255), set(blue, 255)])]",
	"on_surface_damage": "die()",
	"properties": {
		"attack_damage": 0,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])",
		"damage_cooldown": 0,
		"difficulty_casual": 0,
		"difficulty_intense": 1,
		"difficulty_unfair": 2,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with)
						if(collide_with.damage_type = 'stun', if(consts.thrown_type, [add(velocity_y,hurt_velocity_y), set(type, consts.thrown_type), animation('on_back')] ))",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": 0,
		"hurt_velocity_y": 100,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"standard_thrown_damage": 400,
		"team": "'evil'"
	},
	"solid_area": [5,8,19,21],
	"solid_dimensions": ["enemy","common"],
	"springiness": 100,
	"tags": "swallowable",
	"timer_frequency": 2,
	"tmp": null,
	"traction": 1000,
	"traction_in_air": 1000,
	"variations": null,
	"vars": {
		"damage": 1,
		"points_value": 8
	},
	"zorder": 0
}