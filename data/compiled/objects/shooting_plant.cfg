[prototype]
feet_width="4"
friction="1000"
hitpoints="2"
id="shooting_plant"
mass="5"
on_add_object_fail="[if(collide_with.vars.team != vars.team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"
on_bounced_on="if(animation = 'thrown', die(), [if(jumped_on_by.mass >= 1000, die(), animation('spring'))])"
on_change_animation_failure="die()"
on_change_solid_dimensions_fail="if(tmp.in_change_dimensions_fail or (not collide_with), die(),
	          [set(tmp.in_change_dimensions_fail, 1),
			   fire_event(collide_with, 'blocking_thrown_object'),
			   set(solid_dimensions_in, consts.solid_dimensions),
			   set(tmp.in_change_dimensions_fail, 0)
			  ])"
on_collide="if(animation = 'thrown', set(velocity_x, -velocity_x/2))"
on_collide_feet="if(animation = 'thrown' and velocity_y + abs(velocity_x) > 600,
	   [set(velocity_y, -(velocity_y*3)/5 - (velocity_x*slope_standing_on)/90),
	    set(velocity_x, (velocity_x*4)/5 + (velocity_y*slope_standing_on)/90)])"
on_collide_object_body="if(collide_with.vars.team != vars.team and collide_with_area = 'attack', get_hit_by(collide_with))"
on_collide_object_thrown="[if(collide_with_area = 'body' and collide_with.vars.team != vars.team and tmp.anim_repeat < 4,
		 [if(collide_with.get_hit_by, [collide_with.get_hit_by(me)]), die()])]"
on_create="animation('normal')"
on_die="[score(level,points_value), spawn_item(self), spawn('die_cloud', midpoint_x, midpoint_y, facing)]"
on_end_hurt_anim="animation('normal')"
on_end_normal_anim="if(facing != desired_facing, animation('turn'), animation('shoot')) where desired_facing = if(level.player.x < x, -1, 1)"
on_end_shoot_anim="animation('normal')"
on_end_spring_anim="animation('normal')"
on_end_thrown_anim="[if(tmp.anim_repeat < consts.repeat_thrown,
	      [add(tmp.anim_repeat, 1), animation('thrown')],
		  [set(tmp.anim_repeat, 0), animation('normal'), set(solid_dimensions_in, consts.solid_dimensions), set(vars.team, 'evil')]),
		  if(tmp.anim_repeat = 4, [set(solid_dimensions_in,consts.solid_dimensions), set(vars.team, 'evil')])
		  ]"
on_end_turn_anim="[facing(if(level.player.x < x, -1, 1)), animation('normal')]"
on_enter_anim="set(tmp, 'already_hit', [])"
on_enter_thrown_anim="set(vars.damage, consts.thrown_damage)"
on_enter_water="die()"
on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
on_leave_thrown_anim="[set(vars.damage, consts.normal_damage), set(brightness, 255)]"
on_process_thrown="if(tmp.anim_repeat > 13,
	       if(tmp.anim_repeat = 14 and time_in_animation > 7,
				 set(velocity_y, velocity_y-300),
				 if(cycle%6 > 2, set(brightness, 256), set(brightness, 512))))"
on_shoot="spawn('pollen_ball', midpoint_x+20*facing, midpoint_y-12, facing, [set(velocity_x, 300*facing)])"
on_surface_damage="die()"
solid_area="5,8,18,22"
solid_dimensions="enemy,common"
springiness="100"
tags="swallowable"
timer_frequency="2"
traction="1000"
traction_in_air="1000"
zorder="0"
	[properties]
	get_hit_by="def(collide_with) execute(me,
	             if(not (me in collide_with.tmp.already_hit), [
				set(collide_with.tmp, 'already_hit', collide_with.tmp.already_hit + [me]),
				if(collide_with.vars.damage > consts.armor,
				  [
				   if(me.hitpoints > collide_with.vars.damage,
				    [
				      if(collide_with.vars.damage <= consts.flinch_threshold,
						schedule(4, [set(me.green, 255), set(me.blue, 255)]),
					    set(me.animation, 'hurt')),
				      set(me.green, 100), set(me.blue, 100)
					]),
				   set(me.hitpoints, me.hitpoints - collide_with.vars.damage)
				  ]),
				if(collide_with.vars.damage > consts.flinch_threshold and me.hurt_velocity_y and (not collide_with.tmp.no_flinch_attack), set(me.velocity_y,(me.hurt_velocity_y))),
				if(collide_with.vars.damage > consts.flinch_threshold and me.hurt_velocity_x and (not collide_with.tmp.no_flinch_attack), set(me.velocity_x, ((me.hurt_velocity_x * collide_with.facing + collide_with.velocity_x/2)*collide_with.mass*if(collide_with.attack_force, collide_with.attack_force, 100))/(me.mass*100)))]))"
	hurt_velocity_x="400"
	hurt_velocity_y="-800"
	[/properties]

	[vars]
	damage="1"
	points_value="50"
	team="'evil'"
	[/vars]

	[properties]
	hurt_velocity_x="0"
	hurt_velocity_y="0"
	[/properties]

	[animation]
	accel_y="80"
	body_area="all"
	duplicates="6"
	duration="30"
	frame_info="5,4,6,1,858,284,16,19"
	frames="1"
	id="normal"
	image="compiled-2.png"
	rect="853,280,879,303"
	[/animation]

	[animation]
	accel_y="80"
	body_area="all"
	duration="30"
	frame_info="5,5,6,1,683,324,16,18"
	frames="1"
	id="normal"
	image="compiled-2.png"
	rect="678,319,704,342"
	[/animation]

	[animation]
	accel_y="80"
	body_area="all"
	duration="6"
	events="40:shoot"
	frame_info="4,3,7,1,508,262,16,20,3,3,7,1,524,262,17,20,2,2,7,1,541,262,18,21,4,3,7,1,559,262,16,20,3,9,4,1,575,262,20,14,3,9,3,1,595,262,21,14,4,7,5,1,616,262,18,16,3,9,4,1,634,262,20,14"
	frames="8"
	id="shoot"
	image="compiled-2.png"
	rect="504,259,530,282"
	[/animation]

	[animation]
	accel_y="80"
	body_area="all"
	duration="10"
	frame_info="6,5,6,1,650,305,15,18,6,5,6,1,665,305,15,18,6,5,6,1,680,305,15,18"
	frames="3"
	id="turn"
	image="compiled-2.png"
	rect="644,300,670,323"
	[/animation]

	[animation]
	accel_y="80"
	body_area="all"
	duration="5"
	frame_info="3,10,3,1,134,262,21,13,3,15,3,1,155,262,21,8,5,4,6,1,176,262,16,19,6,1,8,1,192,262,13,22"
	frames="4"
	id="spring"
	image="compiled-2.png"
	rect="131,252,157,275"
	[/animation]

	[animation]
	accel_y="80"
	body_area="all"
	duration="15"
	events="6:12:18:hurtflicker"
	frame_info="3,3,8,1,386,284,16,20,0,3,10,1,402,284,17,20"
	frames="2"
	id="hurt"
	image="compiled-2.png"
	rect="383,281,409,304"
	[/animation]

	[animation]
	accel_y="80"
	body_area="none"
	duration="5"
	frame_info="5,2,6,1,205,262,16,21,5,1,6,1,221,262,16,22"
	frames="2"
	id="thrown"
	image="compiled-2.png"
	rect="200,260,226,283"
	thrown_area="all"
	[/animation]

	[consts]
	normal_damage="1"
	repeat_thrown="15"
	solid_dimensions="['enemy', 'common']"
	springiness="160"
	thrown_damage="5"
	[/consts]

	[tmp]
	anim_repeat="0"
	[/tmp]

[/prototype]

