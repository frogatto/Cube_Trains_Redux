{
	"animation": [
		{
			"accel_y": 0,
			"body_area": "all",
			"duration": 5,
			"feet_x": 16,
			"feet_y": 32,
			"frame_info": [6,9,5,11,633,976,21,12,4,7,4,11,654,976,24,14,6,9,5,11,678,976,21,12,6,12,5,11,699,976,21,9],
			"frames": 4,
			"id": "burrow_up",
			"image": "compiled-2.png",
			"rect": [627,967,658,998]
		},
		{
			"accel_y": 0,
			"body_area": "all",
			"duration": 100,
			"feet_x": 16,
			"feet_y": 32,
			"frame_info": [2,2,0,0,1023,573,0,0],
			"frames": 1,
			"id": "invisible",
			"image": "compiled-2.png",
			"rect": [1021,571,1022,572]
		},
		{
			"accel_y": 0,
			"body_area": "all",
			"duration": 40,
			"feet_x": 16,
			"feet_y": 32,
			"frame_info": [5,11,4,8,720,976,23,13],
			"frames": 1,
			"id": "burrow_down",
			"image": "compiled-2.png",
			"rect": [715,965,746,996]
		},
		{
			"accel_y": 20,
			"attack_area": "all",
			"body_area": "all",
			"duration": 5,
			"feet_x": 16,
			"feet_y": 32,
			"frame_info": [5,7,4,8,197,868,23,17,6,5,5,8,220,868,21,19,5,7,4,8,241,868,23,17,3,8,2,8,264,868,27,16],
			"frames": 4,
			"id": "leap",
			"image": "compiled-2.png",
			"rect": [192,861,223,892]
		}
	],
	"consts": {
		"basic_type": "worm_jumping",
		"frogourmet_tag": "worm_jumping"
	},
	"editor_info": {
		"category": "bugs",
		"var": [
			{
				"name": "x_bound",
				"type": "x",
				"value": "x - 200"
			},
			{
				"name": "x2_bound",
				"type": "x",
				"value": "x + 200"
			},
			{
				"name": "desired_height",
				"type": "y",
				"value": "midpoint_y"
			}
		]
	},
	"hitpoints": 400,
	"id": "worm_jumping",
	"mass": 5,
	"object_level_collisions": true,
	"object_type": [
		{
			"animation": {
				"accel_y": 0,
				"body_area": "all",
				"duration": 5,
				"frames": 4,
				"id": "normal",
				"image": "enemies/worm-burrowing.png",
				"pad": 0,
				"rect": [0,0,31,31]
			},
			"id": "segment",
			"on_collide_object_body": "null",
			"on_die": "[death_burst(self),remove_object(me)]",
			"on_end_normal_anim": "animation('normal')",
			"on_process": "[set_position_relative(parent.delayed_rotate),add(tmp.oldrotate, [rotate])]",
			"on_spawned": "[set(parent,tmp.head),set(zorder,tmp.head.zorder -1)]",
			"properties": {
				"delayed_rotate": "if(tmp.oldrotate.size>=4, tmp.oldrotate[ tmp.oldrotate.size-4 ], rotate)",
				"get_hit_by": "def(collide_with) [parent.get_hit_by(collide_with)]",
				"handle_damage": "def(collide_with) null",
				"segdist": 20,
				"set_position_relative": "def(rotation) [set(relative_x, cos(rotation+90-parent.facing) * segdist -img_w/2),
												set(relative_y, sin(rotation-90*parent.facing) * segdist -img_h/2),
												set(rotate,rotation)]"
			},
			"prototype": ["hittable"],
			"tmp": {
				"oldrotate": []
			}
		},
		{
			"animation": [
				{
					"body_area": null,
					"duration": 60,
					"frames": 1,
					"id": "thrown",
					"image": "enemies/generic.png",
					"rect": [29,1,53,28],
					"thrown_area": "all"
				},
				{
					"body_area": "all",
					"duration": 5,
					"frames": 2,
					"id": "on_back",
					"image": "enemies/generic.png",
					"rect": [29,1,53,28]
				}
			],
			"consts": {
				"basic_animation": "fly",
				"basic_type": "worm_jumping",
				"frogourmet_tag": "worm_jumping",
				"thrown_type": "worm_jumping.thrown"
			},
			"id": "thrown",
			"on_spat": "[%PROTO%, set(vars.bomb, null), set(attached_objects, [])]",
			"prototype": ["throwable_small_enemy"],
			"solid_dimensions": ["enemy","common"]
		}
	],
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_begin_burrow_down": "[set(particles.spawn_rate, 1000), set(velocity_y,20), animation('burrow_down'), schedule(40, fire_event('finish_burrowing_down')),
			map(range(vars.segments.size), 'thing', schedule(thing*4, fire_event('remove_segment')))]",
	"on_begin_burrow_up": "[schedule(60,fire_event('begin_leap')), set(particles.spawn_rate, 1000),set(rotate,0),set(velocity_y,0), animation('burrow_up'), 
			[[set(midpoint_x, xval), set(midpoint_y, 0 + find_floor(xval, y_target)[1])] where xval = x_target]]",
	"on_begin_leap": "[
			map(range(segment_count(hitpoints)),'thing',schedule(thing*2,spawn('worm_jumping.segment',midpoint_x,midpoint_y,facing,set(rotate,rotate)))),
			set(vars.leaptime, cycle),
			set(velocity_y,-1000),
			set(velocity_x,1d500 - 250),
			set(particles.spawn_rate, 0),
			animation('leap')
			]",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_child_spawned": "[set(child.tmp.head, if(vars.segments.size = 0, me, vars.segments[vars.segments.size-1])),add(vars.segments, [child])]",
	"on_collide_level": "if(animation in ['leap'] and abs(cycle - vars.leaptime) > 10, [set(velocity_y,0), set(velocity_x,0), fire_event('begin_burrow_down')])",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area = 'attack', get_hit_by(collide_with)))",
	"on_create": "[add_particles('particles'),animation('invisible'),schedule(50+1d100, fire_event('begin_burrow_up'))]",
	"on_die": "[map(vars.segments, 'thing', set(thing.hitpoints,0)), set(vars.segments, []),
			[score(level,points_value), spawn_item(self), death_burst_tracked(self)]]",
	"on_end_burrow_down_anim": "animation('burrow_down')",
	"on_end_burrow_up_anim": "animation('burrow_up')",
	"on_end_invisible_anim": "animation('invisible')",
	"on_end_leap_anim": "animation('leap')",
	"on_finish_burrowing_down": "[animation('invisible'),set(particles.spawn_rate, 0),schedule(50+1d100, fire_event('begin_burrow_up'))]",
	"on_lose_segment": "[fire_event(vars.segments[vars.segments.size-1],'die')#, schedule(1,set(vars.segments, vars.segments[0: vars.segments.size-1]))#]",
	"on_process_leap": "[set_rotation(),add(oldrotate, [rotate])]",
	"on_remove_segment": "[remove_object(vars.segments[vars.segments.size-1]), set(vars.segments, vars.segments[0: vars.segments.size-1])]",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"particle_system": {
		"accel_y": 40,
		"animation": [
			{
				"duration": 60,
				"frame_info": [4,4,6,6,1018,960,6,6],
				"frames": 1,
				"id": "normal",
				"image": "compiled-2.png",
				"rect": [1014,956,1029,971]
			},
			{
				"duration": 60,
				"frame_info": [4,6,6,5,1017,818,6,5],
				"frames": 1,
				"id": "normal",
				"image": "compiled-1.png",
				"rect": [1013,812,1028,827]
			},
			{
				"duration": 60,
				"frame_info": [6,6,5,5,1017,811,5,5],
				"frames": 1,
				"id": "normal",
				"image": "compiled-2.png",
				"rect": [1011,805,1026,820]
			},
			{
				"duration": 60,
				"frame_info": [4,4,6,6,1018,966,6,6],
				"frames": 1,
				"id": "normal",
				"image": "compiled-2.png",
				"rect": [1014,962,1029,977]
			}
		],
		"id": "particles",
		"max_x": 20,
		"max_y": 40,
		"min_x": 18,
		"min_y": 38,
		"spawn_rate": 0,
		"time_to_live": 40,
		"type": "simple",
		"velocity_magnitude": 1000,
		"velocity_magnitude_random": 500,
		"velocity_rotate": 90,
		"velocity_rotate_random": 180,
		"zorder": 9
	},
	"properties": {
		"attack_cooldown": 10,
		"attack_damage": 2,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])",
		"damage_cooldown": 0,
		"delayed_rotate": "if(tmp.oldrotate.size>=4, tmp.oldrotate[ tmp.oldrotate.size-4 ], rotate)",
		"difficulty_casual": 0,
		"difficulty_intense": 1,
		"difficulty_unfair": 2,
		"display_hurt_visuals": "def() execute(me, 
					[map(vars.segments, 'thing', thing.display_hurt_visuals() ),
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"find_floor": "def(u,v) find_floor_wrapped(u,v,0)",
		"find_floor_wrapped": "def(u,v,counter) if(solid(level,u-5,v,10,4), if(counter<50, find_floor_wrapped(u,v-4,counter+1), [u,v]), [u,v])",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) null",
		"handle_knockback": "def(collide_with) execute(me, 
			if(vars.segments.size > 0 and segments_lost > 0, map(range(segments_lost), 'counter', fire_event(vars.segments[vars.segments.size-(counter+1)],'die') ))
		
			where segments_lost = min(vars.segments.size, round(vars.segments.size * hitpoint_proportion(collide_with.attack_damage))  )
		)",
		"hitpoint_proportion": "def(portion) decimal(portion)/decimal(me.max_hitpoints)",
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": -200,
		"hurt_velocity_y": -400,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"segment_count": "def(hp) 6*hitpoint_proportion(me.hitpoints)",
		"set_rotation": "def() set(rotate, sign(velocity_x)*(90 + 90*decimal(min(max(velocity_y,-1000),1000))/1000))",
		"standard_thrown_damage": 400,
		"x_target": "min(vars.x_bound,vars.x2_bound) + 1d(abs(vars.x_bound-vars.x2_bound))",
		"y_target": "vars.desired_height - (vars.desired_height%8)"
	},
	"timer_frequency": 100,
	"tmp": {
		"oldrotate": []
	},
	"variations": null,
	"vars": {
		"damage": 1,
		"points_value": 14,
		"spots": [],
		"team": "evil"
	},
	"zorder": 20
}