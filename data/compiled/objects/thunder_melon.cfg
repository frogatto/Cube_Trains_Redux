[prototype]
feet_width="4"
friction="1000"
hitpoints="1"
id="thunder_melon"
mass="5"
object_level_collisions="true"
on_add_object_fail="[if(collide_with.vars.team != vars.team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"
on_bounced_on="die()"
on_change_animation_failure="fire_event('solidity_fail')"
on_change_solid_dimensions_fail="fire_event('solidity_fail')"
on_collide_level="die()"
on_collide_object_body="if(collide_with_area = 'body', die())"
on_collide_object_thrown="[if(collide_with_area = 'body' and collide_with.vars.team != vars.team and vars.damage > 0,
	 [if(collide_with.get_hit_by, [collide_with.get_hit_by(me)]), die()])]"
on_die="[spawn('explosion_big_harmful',midpoint_x,midpoint_y,facing),sound('BombExplode.wav')]"
on_end_hurt_anim="animation('normal')"
on_end_normal_anim="animation('normal')"
on_enter_anim="set(tmp, 'already_hit', [])"
on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"
on_surface_damage="die()"
springiness="100"
tags="swallowable"
timer_frequency="2"
traction="1000"
traction_in_air="1000"
zorder="0"
	[consts]
	flinch_threshold="3"
	normal_damage="1"
	springiness="0"
	thrown_damage="5"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	damage_cooldown="0"
	flash_color="def(collide_with) execute(me, if(collide_with.attack_damage < me.hitpoints,
					[schedule(4, [set(me.green, 255), set(me.blue, 255)]), set(me.animation, 'hurt'), set(me.green, 100), set(me.blue, 100)]))"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible_posthit) and (collide_with.attack_damage > 0) and (collide_with.attack_damage > consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[flash_color(collide_with),handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage > consts.flinch_threshold, [add(me.velocity_x,me.hurt_velocity_x), add(me.velocity_y,me.hurt_velocity_y)]))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_velocity_x="200"
	hurt_velocity_y="-400"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[tmp]
	time_last_hit="0"
	[/tmp]

	[vars]
	damage="1"
	points_value="1"
	team="'evil'"
	[/vars]

	[properties]
	hurt_velocity_x="0"
	hurt_velocity_y="0"
	[/properties]

	[animation]
	accel_y="00"
	body_area="all"
	duration="1000"
	frame_info="0,0,0,0,506,784,16,16"
	frames="1"
	id="normal"
	image="compiled-2.png"
	rect="506,784,521,799"
	[/animation]

	[animation]
	accel_y="80"
	body_area="none"
	duration="1000"
	frame_info="0,0,0,0,506,784,16,16"
	frames="1"
	id="thrown"
	image="compiled-2.png"
	rect="506,784,521,799"
	thrown_area="all"
	[/animation]

	[animation]
	duration="18"
	events="6:12:18:hurtflicker"
	frames="1"
	id="hurt"
	[/animation]

[/prototype]

