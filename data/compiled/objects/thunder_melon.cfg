[prototype]
feet_width="4"
friction="1000"
hitpoints="1"
id="thunder_melon"
mass="5"
object_level_collisions="true"
on_bounced_on="[if(jumped_on_by.mass >= 1000, die(), animation('spring'))]"
on_collide_level="die()"
on_collide_object_body="if(collide_with_area = 'body', die())"
on_collide_object_thrown="[if(collide_with_area = 'body' and collide_with.vars.team != vars.team and vars.damage > 0,
	 [if(collide_with.get_hit_by, [collide_with.get_hit_by(me)]), die()])]"
on_die="[spawn('explosion_big_harmful',midpoint_x,midpoint_y,facing),sound('BombExplode.wav')]"
on_end_hurt_anim="animation('normal')"
on_end_normal_anim="animation('normal')"
on_enter_anim="set(tmp, 'already_hit', [])"
on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
on_surface_damage="die()"
springiness="100"
tags="swallowable"
timer_frequency="2"
traction="1000"
traction_in_air="1000"
zorder="0"
	[properties]
	get_hit_by="def(collide_with) execute(me,
	             if(not (me in collide_with.tmp.already_hit), [
				set(collide_with.tmp, 'already_hit', collide_with.tmp.already_hit + [me]),
				if((not is_invincible_posthit) and (collide_with.vars.damage > 0),
					if(collide_with.vars.damage > consts.armor,
					  [
					   if(me.hitpoints > collide_with.vars.damage,
						[
						  if(collide_with.vars.damage <= consts.flinch_threshold,
							schedule(4, [set(me.green, 255), set(me.blue, 255)]),
							set(me.animation, 'hurt')),
						  set(me.green, 100), set(me.blue, 100)
						]),
					   set(me.hitpoints, me.hitpoints - collide_with.vars.damage),
					   set(tmp.time_last_hit, me.cycle)
					  ])),
				if(collide_with.vars.damage > consts.flinch_threshold and me.hurt_velocity_y and (not collide_with.tmp.no_flinch_attack), set(me.velocity_y,(me.hurt_velocity_y))),
				if(collide_with.vars.damage > consts.flinch_threshold and me.hurt_velocity_x and (not collide_with.tmp.no_flinch_attack), set(me.velocity_x, ((me.hurt_velocity_x * collide_with.facing + collide_with.velocity_x/2)*collide_with.mass*if(collide_with.attack_force, collide_with.attack_force, 100))/(me.mass*100)))]))"
	hurt_velocity_x="400"
	hurt_velocity_y="-800"
	is_invincible_posthit="if(tmp.time_last_hit and (abs(tmp.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[tmp]
	time_last_hit="0"
	[/tmp]

	[vars]
	damage="1"
	points_value="10"
	team="'evil'"
	[/vars]

	[properties]
	hurt_velocity_x="0"
	hurt_velocity_y="0"
	[/properties]

	[animation]
	accel_y="00"
	body_area="all"
	duration="1000"
	frame_info="0,0,0,0,564,400,16,16"
	frames="1"
	id="normal"
	image="compiled-0.png"
	rect="564,400,579,415"
	[/animation]

	[animation]
	accel_y="80"
	body_area="none"
	duration="1000"
	frame_info="0,0,0,0,564,400,16,16"
	frames="1"
	id="thrown"
	image="compiled-0.png"
	rect="564,400,579,415"
	thrown_area="all"
	[/animation]

	[animation]
	duration="18"
	events="6:12:18:hurtflicker"
	frames="1"
	id="hurt"
	[/animation]

	[consts]
	normal_damage="1"
	springiness="160"
	thrown_damage="5"
	[/consts]

[/prototype]

