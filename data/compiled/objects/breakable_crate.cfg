[prototype]
id="breakable_crate"
mass="5"
on_collide="set(velocity_x, -(velocity_x*70)/100)"
on_collide_feet="[set(velocity_x, (velocity_x*70)/100), set(velocity_y, if(abs(velocity_y) > 50, -velocity_y/2, 0))]"
on_collide_head="set(velocity_y, -velocity_y)"
on_collide_object_body="if(collide_with_area = 'attack', get_hit_by(collide_with))"
on_die="[if(vars.contents, spawn(vars.contents, midpoint_x, midpoint_y, facing)),
	         score(level,5),sound('BlockBreak.ogg')]"
on_enter_water="[
				add_wave(midpoint_x, y2, -2000, 5*velocity_y/2, 30*velocity_y, 300, 300),
				add_wave(midpoint_x, y2, 2000, 5*velocity_y/2, 30*velocity_y, 300, 300),
				add_wave(midpoint_x, y2, -1000, 3*velocity_y/2, 20*velocity_y, 200, 200),
				add_wave(midpoint_x, y2, 1000, 3*velocity_y/2, 20*velocity_y, 200, 200),
				add_wave(midpoint_x, y2, -500, 2*velocity_y/2, 10*velocity_y, 100, 100),
				add_wave(midpoint_x, y2, 500, 2*velocity_y/2, 10*velocity_y, 100, 100)
				]"
on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
solid_area="0,0,15,15"
zorder="-1"
	[properties]
	get_hit_by="def(collide_with) execute(me,
	             if(not (me in collide_with.tmp.already_hit), [
				set(collide_with.tmp, 'already_hit', collide_with.tmp.already_hit + [me]),
				if((not is_invincible_posthit) and (collide_with.vars.damage > 0),
					if(collide_with.vars.damage > consts.armor,
					  [
					   if(me.hitpoints > collide_with.vars.damage,
						[
						  if(collide_with.vars.damage <= consts.flinch_threshold,
							schedule(4, [set(me.green, 255), set(me.blue, 255)]),
							set(me.animation, 'hurt')),
						  set(me.green, 100), set(me.blue, 100)
						]),
					   set(me.hitpoints, me.hitpoints - collide_with.vars.damage),
					   set(tmp.time_last_hit, me.cycle)
					  ])),
				if(collide_with.vars.damage > consts.flinch_threshold and me.hurt_velocity_y and (not collide_with.tmp.no_flinch_attack), set(me.velocity_y,(me.hurt_velocity_y))),
				if(collide_with.vars.damage > consts.flinch_threshold and me.hurt_velocity_x and (not collide_with.tmp.no_flinch_attack), set(me.velocity_x, ((me.hurt_velocity_x * collide_with.facing + collide_with.velocity_x/2)*collide_with.mass*if(collide_with.attack_force, collide_with.attack_force, 100))/(me.mass*100)))]))"
	hurt_velocity_x="400"
	hurt_velocity_y="-800"
	is_invincible_posthit="if(tmp.time_last_hit and (abs(tmp.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[tmp]
	time_last_hit="0"
	[/tmp]

	[animation]
	accel_y="80"
	body_area="all"
	duration="100"
	frame_info="0,0,0,0,455,476,16,16"
	frames="1"
	id="normal"
	image="compiled-2.png"
	rect="455,476,470,491"
	[/animation]

	[animation]
	accel_y="80"
	body_area="all"
	duration="100"
	frame_info="0,0,0,0,487,476,16,16"
	frames="1"
	id="cracked"
	image="compiled-2.png"
	rect="487,476,502,491"
	[/animation]

	[vars]
	contents="''"
	[/vars]

	[properties]
	get_hit_by="def(collide_with) if(not (me in collide_with.tmp.already_hit), [
				set(collide_with.tmp.already_hit, collide_with.tmp.already_hit + [me]), 
		
			if(me.animation != 'cracked', set(me.animation, 'cracked'), [map([0] * 10, spawn('breakable_crate_particle', me.x + 1d10, me.y + 1d10, me.facing)), execute(me, die())])  ])"
	[/properties]

[/prototype]

