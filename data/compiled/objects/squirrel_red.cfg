[prototype]
friction="1000"
hitpoints="5"
id="squirrel_red"
mass="5"
on_add_object_fail="[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"
on_bounced_on="animation('spring')"
on_change_animation_failure="fire_event('solidity_fail')"
on_change_solid_dimensions_fail="fire_event('solidity_fail')"
on_collide_feet="animation('walk')"
on_collide_head="set(velocity_y, -velocity_y/2)"
on_collide_object_body="if(collide_with.team != team, if(collide_with_area = 'attack', get_hit_by(collide_with)))"
on_collide_side="if(not (animation in ['hurt']), [set(facing, -facing), animation('turn'), set(velocity_x,0)])"
on_die="[score(level,points_value), spawn_item(self), death_burst_tracked(self)]"
on_end_anim="animation('walk')"
on_end_hurt_anim="animation('walk')"
on_end_toss_anim="[set(vars.charge_up, 0), animation('walk')]"
on_end_turn_anim="animation('walk')"
on_enter_anim="set(tmp.already_hit, [])"
on_enter_walk_anim="[set(vars.charge_up, vars.charge_up+1), if(vars.charge_up >= vars.charge_time, animation('toss'))]"
on_enter_water="die()"
on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
on_jumped_on="[if(jumped_on_by.mass >= 20, die())]"
on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
on_process_stand="if(is_standing, animation('walk'))"
on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"
on_stomped_on="[add(hitpoints, -3), set(green, 100), set(blue, 100),
	                schedule(4, [set(green, 255), set(blue, 255)])]"
on_surface_damage="die()"
on_throw_acorn="spawn('acorn', midpoint_x + (20 * facing), y, facing, [animation('thrown'), set(velocity_x, velx),set(velocity_y, -700)])
		where velx = 500 * facing"
on_timer="if(not (animation in ['thrown', 'on_back']), [set(rotate, slope_standing_on), if(turns_at_cliffs and is_standing and animation = 'walk' and distance_to_cliff < DISTANCE_TO_CLIFF_CHECK,
			#if we're near the end of a branch, see if there's a spot to jump up to#
			if(standable(level, front + facing*96, y-140, 1, 180), [set(velocity_x,500*facing),set(velocity_y,-1800) ]  ,

				#there's not.  See if there's a place to jump forward to#
				if(standable(level, front + facing*160, midpoint_y, 1, 32), [set(velocity_x,1000*facing),set(velocity_y,-600) ] ,
				
					#there's not.  See if there's a place to jump down to#
					if(standable(level, front + facing*140, midpoint_y, 1, 160), [set(velocity_x,500*facing),set(velocity_y,-800) ] ,
	
					[set(facing, -facing),animation('turn')]))))])"
solid_area="17,11,28,27"
solid_dimensions="enemy,common"
tags="swallowable"
timer_frequency="3"
traction="1000"
	[consts]
	DISTANCE_TO_CLIFF_CHECK="50"
	basic_type="'squirrel_red'"
	bounce_roundness="70"
	flinch_threshold="3"
	solid_dimensions="['enemy', 'common']"
	spring_amount="1200"
	springiness="190"
	thrown_type="'squirrel_red.thrown'"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	damage_cooldown="0"
	flash_color="def(collide_with) execute(me, if(collide_with.attack_damage < me.hitpoints,
					[schedule(4, [set(me.green, 255), set(me.blue, 255)]), set(me.animation, 'hurt'), set(me.green, 100), set(me.blue, 100)]))"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible_posthit) and (collide_with.attack_damage > 0) and (collide_with.attack_damage > consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[flash_color(collide_with),handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage > consts.flinch_threshold, [add(me.velocity_x,me.hurt_velocity_x), add(me.velocity_y,me.hurt_velocity_y)]))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_velocity_x="200"
	hurt_velocity_y="-400"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[tmp]
	time_last_hit="0"
	[/tmp]

	[vars]
	charge_time="6"
	charge_up="0"
	jump_clearance="100"
	jump_distance="120"
	points_value="14"
	turns_at_cliffs="1"
	[/vars]

	[editor_info]
	category="animals"
		[var]
		name="charge_time"
		value="6"
		[/var]

	[/editor_info]

	[properties]
	attack_damage="1"
	handle_damage_type="def(collide_with)
						if(collide_with.damage_type = 'stun', if(consts.thrown_type, [add(velocity_y,hurt_velocity_y), set(type, consts.thrown_type), animation('on_back')] ))"
	hurt_velocity_x="200"
	hurt_velocity_y="-400"
	team="'evil'"
	[/properties]

	[animation]
	accel_x="0"
	accel_y="80"
	attack_area="26,18,35,28"
	body_area="all"
	duration="6"
	frame_info="4,1,12,1,484,524,29,27"
	frames="1"
	id="stand"
	image="compiled-2.png"
	rect="480,523,524,551"
	rotate_on_slope="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	attack_area="26,18,35,28"
	body_area="all"
	duration="6"
	frame_info="4,1,12,1,513,524,29,27"
	frames="1"
	id="stand"
	image="compiled-2.png"
	rect="509,523,553,551"
	rotate_on_slope="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="none"
	frame_info="12,11,13,1,829,824,20,17"
	id="thrown"
	image="compiled-2.png"
	rect="817,813,861,841"
	rotate_on_slope="yes"
	solid_area="8,12,28,27"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	frame_info="9,16,10,2,820,905,26,11"
	id="on_back"
	image="compiled-2.png"
	rect="811,889,855,917"
	rotate_on_slope="yes"
	solid_area="8,16,28,27"
	[/animation]

	[animation]
	accel_x="450"
	accel_y="80"
	attack_area="26,18,35,28"
	body_area="all"
	duration="2"
	frame_info="4,1,8,1,780,413,33,27,3,1,7,1,813,413,35,27,2,1,6,1,848,413,37,27,1,2,6,1,885,413,38,26,2,1,6,1,923,413,37,27,2,0,7,1,960,413,36,28"
	frames="6"
	frames_per_row="3"
	id="walk"
	image="compiled-2.png"
	rect="776,412,820,440"
	rotate_on_slope="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="4"
	frame_info="3,12,15,1,632,842,27,16"
	frames="1"
	id="spring"
	image="compiled-2.png"
	rect="629,830,673,858"
	rotate_on_slope="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	attack_area="11,18,35,28"
	body_area="all"
	duration="4"
	frame_info="13,2,2,1,96,577,30,26,13,2,8,1,126,577,24,26,13,2,13,1,150,577,19,26,8,2,13,1,169,577,24,26,2,2,13,1,193,577,30,26"
	frames="5"
	id="turn"
	image="compiled-2.png"
	rect="83,575,127,603"
	rotate_on_slope="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="18"
	events="6:12:18:hurtflicker"
	frame_info="3,3,13,1,314,629,29,25"
	frames="1"
	id="hurt"
	image="compiled-2.png"
	rect="311,626,355,654"
	rotate_on_slope="yes"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="80"
	body_area="all"
	duration="6"
	events="42:throw_acorn"
	frame_info="2,1,14,1,284,413,29,27,2,2,13,1,313,413,30,26,1,0,14,1,343,413,30,28,2,1,13,1,373,413,30,27,1,4,12,1,403,413,32,24,1,4,12,1,435,413,32,24,0,3,11,2,467,413,34,24,2,1,12,1,501,413,31,27,0,2,13,1,532,413,32,26"
	frames="9"
	frames_per_row="3"
	id="toss"
	image="compiled-2.png"
	rect="282,412,326,440"
	rotate_on_slope="yes"
	[/animation]

	[object_type]
	id="thrown"
	prototype="throwable_small_enemy"
	solid_area="17,11,28,27"
	solid_dimensions="common,enemy"
		[consts]
		basic_type="'squirrel_red'"
		thrown_type="'squirrel_red.thrown'"
		[/consts]

		[animation]
		body_area="none"
		duration="60"
		frames="1"
		id="thrown"
		image="enemies/squirrel-red.png"
		rect="97,129,141,157"
		thrown_area="all"
		[/animation]

		[animation]
		body_area="all"
		duration="5"
		frames="2"
		id="on_back"
		image="enemies/squirrel-red.png"
		rect="1,129,45,157"
		[/animation]

	[/object_type]

[/prototype]

