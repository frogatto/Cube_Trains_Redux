[prototype]
always_active="no"
friction="3000"
hitpoints="200"
id="spider_red"
mass="5"
on_add_object_fail="[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"
on_attack="attack()"
on_change_animation_failure="fire_event('solidity_fail')"
on_change_solid_dimensions_fail="fire_event('solidity_fail')"
on_collide_object_body="if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area = 'attack', get_hit_by(collide_with)))"
on_create="[
		]"
on_drop="[
		[set(vars.anchor, anchor),
		set(vars.position, [self.midpoint_x, self.midpoint_y]),
		[add_object(obj), set(vars.knot, obj)] where obj = object('spider_black.anchor', midpoint_x+anchor[0]-2*facing , midpoint_y+anchor[1]+2, facing),
		[add_object(obj), set(vars.silk, obj)] where obj = object(type + '.silk', x, y, facing, {'x_1' -> midpoint_x+vars.spinneret[0], 'y_1' -> midpoint_y+vars.spinneret[1], 'x_2' -> midpoint_x+anchor[0], 'y_2' -> midpoint_y+anchor[1]})
		] where anchor = solid_point([0,-8]),
		set(vars.low, list_subtract(list_single_divide(solid_point([0,16]), 1.2), [0, 20])),
		fire_event('attack')
		]"
on_end_dangle_anim="animation('dangle')"
on_end_drop_anim="animation('drop')"
on_end_recover_anim="animation('stand')"
on_end_retract_anim="animation('retract')"
on_end_stand_anim="if(1d2=2,animation('stand'),animation('walk'))"
on_end_walk_anim="if(1d2=2,animation('stand'),animation('walk'))"
on_process_stand="[if(cycle%5 = 0, fire_event('tryambush')),set(velocity_x, velocity_x*0.3)]"
on_process_walk="if((not solid(level, midpoint_x + 50*facing, midpoint_y -60, 20, 60)) or solid(level, midpoint_x + 50*facing, midpoint_y -20, 20, 20), facing(-facing))"
on_recover="[animation('recover'),remove_object(vars.silk),remove_object(vars.knot)]"
on_set_silk="me.vars.silk.set_ends(me.midpoint_x+me.vars.spinneret[0], me.midpoint_y+me.vars.spinneret[1], me.vars.position[0]+me.vars.anchor[0], me.vars.position[1]+me.vars.anchor[1])"
on_shoot="shoot()"
on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"
on_tryambush="if(level.player.midpoint_x > midpoint_x - 140 and level.player.midpoint_x < midpoint_x + 140,
			fire_event('drop'))"
solid_dimensions="none"
timer_frequency="15"
traction_in_air="1000"
zorder="15"
	[consts]
	basic_type="'spider_red'"
	flinch_threshold="3"
	frogourmet_tag="'spider_red'"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	cause_flinch="def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])"
	damage_cooldown="0"
	display_hurt_visuals="def() execute(me, 
					[
					hurt_flash_sequence()
					])"
	display_posthit_invincibility_flash_sequence="def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )"
	flash_bright="def() [set(me.brightness, 1023)]"
	flash_off="def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]"
	flash_red="def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage >= consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage >= consts.flinch_threshold, cause_flinch(collide_with)))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_flash_sequence="def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]"
	hurt_velocity_x="-200"
	hurt_velocity_y="-400"
	is_invincible="if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[animation]
	attack_area="18,30,40,46"
	body_area="all"
	duration="5"
	feet_x="28"
	feet_y="46"
	frame_info="10,10,9,16,969,269,38,30"
	frames="1"
	id="stand"
	image="compiled-2.png"
	rect="959,259,1015,314"
	[/animation]

	[animation]
	accel_x="10"
	attack_area="18,30,40,46"
	body_area="all"
	duration="5"
	feet_x="28"
	feet_y="46"
	frame_info="10,10,9,17,0,299,38,29,10,10,9,16,38,299,38,30,9,10,9,16,76,299,39,30"
	frames="3"
	id="walk"
	image="compiled-2.png"
	rect="-10,289,46,344"
	[/animation]

	[animation]
	attack_area="18,30,40,46"
	body_area="all"
	duration="5"
	feet_x="28"
	feet_y="46"
	frame_info="7,7,6,7,398,668,44,42,10,9,6,14,442,668,41,33"
	frames="2"
	id="recover"
	image="compiled-1.png"
	rect="391,661,447,716"
	[/animation]

	[animation]
	attack_area="18,30,40,46"
	body_area="all"
	duration="3"
	feet_x="28"
	feet_y="46"
	frame_info="2,1,3,10,0,623,52,45"
	frames="1"
	id="drop"
	image="compiled-1.png"
	rect="-2,622,54,677"
	[/animation]

	[animation]
	attack_area="18,30,40,46"
	body_area="all"
	duration="3"
	feet_x="28"
	feet_y="46"
	frame_info="2,9,3,10,702,911,52,37,2,9,3,10,754,911,52,37,2,9,3,10,806,911,52,37"
	frames="3"
	id="dangle"
	image="compiled-1.png"
	rect="700,902,756,957"
	reverse="yes"
	[/animation]

	[animation]
	attack_area="18,30,40,46"
	body_area="all"
	duration="3"
	feet_x="28"
	feet_y="46"
	frame_info="2,0,3,7,647,430,52,49,2,1,3,8,699,430,52,47,2,0,3,7,751,430,52,49"
	frames="3"
	id="retract"
	image="compiled-1.png"
	rect="645,430,701,485"
	reverse="yes"
	[/animation]

	[editor_info]
	category="bugs"
	help="An enemy that walks back and forth across flat sections of ceiling, and will opportunistically dive to bite the player, on a retracting line of silk."
	[/editor_info]

	[vars]
	points_value="10"
	spinneret="[0,-32]"
	[/vars]

	[properties]
	attack="def() [[
			animation('drop'),
			schedule(stepsDown,animation('dangle')),
			schedule(stepsDown + pause,animation('retract')),
			schedule(stepsDown + 0*pause/3, fire_event('shoot') ),
			schedule(stepsDown + 1*pause/3, fire_event('shoot') ),
			schedule(stepsDown + 2*pause/3, fire_event('shoot') ),
			map(range(stepsDown), 'step',
				schedule(step, set(me.y, me.y + (sin(step*(90.0/stepsDown))*me.vars.low[1]/2)*1))
				),

			map(range(stepsUp), 'step',
				schedule(step + stepsDown + pause, set(me.y, me.y + (me.vars.low[1] - (sin(step*(90.0/stepsUp))*me.vars.low[1]))/2 ))
				),
			
			map(range(0, newTime-20), 'step',
				schedule(step, set(x, x + ((sin((percent)*360.0*1.13))*20.0)) where percent = decimal(decimal(step)/decimal(stepsDown+pause)))
				),
			map(range(newTime), 'step',
				schedule(step, fire_event('set_silk'))
				),
			schedule(newTime, [set(x, x), set(y, y), fire_event('recover'), me.vars.silk.set_ends(me.midpoint_x+me.vars.spinneret[0], me.midpoint_y+me.vars.spinneret[1], me.midpoint_x+me.anchor[0], me.midpoint_y+me.anchor[1])])
			] where newTime = stepsUp + stepsDown + pause
			] where stepsDown = 20
			where stepsUp = 80
			where pause = 120"
	attack_damage="3"
	shoot="def() [	spawn('spider_red.fireball',midpoint_x,y+img_h,facing, set(velocity_y, 500)),
						spawn('spider_red.fireball',midpoint_x,y+img_h,facing, [set(velocity_x, 200), set(velocity_y, 440)]),
						spawn('spider_red.fireball',midpoint_x,y+img_h,facing, [set(velocity_x, -200), set(velocity_y, 440)])
					]"
	solid_point="def(vector) #takes a vector ([x,y]) in which to search exponentially for ground#
			if((solid(level, pointToCheck[0], pointToCheck[1]) where pointToCheck = list_add(vector, [me.midpoint_x, me.midpoint_y]))
			or size(filter(vector, 'vec', abs(vec) > 1000)) > 0, 
				vector, 
				solid_point(list_single_multiply(vector, 1.1))
			)"
	team="'evil'"
	[/properties]

	[object_type]
	id="silk"
	ignore_collide="true"
	on_create="[
			fire_event(me,'reset'),
		]"
	on_reset="[
			set(x, (x_2+x_1)/2 -2*facing),
			set(y, (y_2+y_1)/2 - (length/2)),
			set(draw_area, [0, 0, 8, length/2]),
			set(rotate,(angle(x_1,y_1,x_2,y_2)-90) ),
			]"
		[editor_info]
		category="controllers"
		help="A controller for angled ropes."
			[var]
			name="x_1"
			type="x"
			value="x-100"
			[/var]

			[var]
			name="y_1"
			type="y"
			value="y-100"
			[/var]

			[var]
			name="x_2"
			type="x"
			value="x+100"
			[/var]

			[var]
			name="y_2"
			type="y"
			value="y+100"
			[/var]

		[/editor_info]

		[properties]
		length="length(x_1,y_1,x_2,y_2)"
		set_ends="def(new_x1,new_y1,new_x2,new_y2) [set(vars.x_1,new_x1),set(vars.y_1,new_y1),set(vars.x_2,new_x2),set(vars.y_2,new_y2),fire_event(me,'reset')]"
		[/properties]

		[animation]
		h="8"
		id="normal"
		image="enemies/spider-thread.png"
		w="8"
		x="0"
		y="0"
		[/animation]

	[/object_type]

	[object_type]
	id="fireball"
	on_end_anim="animation('normal')"
	prototype="shot"
		[animation]
		duration="10"
		frames="1"
		id="normal"
		image="enemies/spider-hanging-red.png"
		rect="78,12,91,25"
		[/animation]

	[/object_type]

	[object_type]
	always_active="no"
	id="anchor"
	next_animation="'normal'"
	on_end_anim="animation('normal')"
	zorder="5"
		[animation]
		frames="1"
		h="4"
		id="normal"
		image="enemies/spider-hanging-black.png"
		w="4"
		x="80"
		y="1"
		[/animation]

	[/object_type]

[/prototype]

