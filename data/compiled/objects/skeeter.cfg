[prototype]
friction="1000"
hitpoints="40"
id="skeeter"
mass="5"
on_add_object_fail="[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"
on_change_animation_failure="fire_event('solidity_fail')"
on_change_solid_dimensions_fail="fire_event('solidity_fail')"
on_collide_object_body="if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area = 'attack', get_hit_by(collide_with)))"
on_create="[set(activation_border, max(abs(vars.zone_x2-vars.zone_x1), abs(vars.zone_y2-vars.zone_y1))),
					animation('hover'),
					schedule(delay_interval, fire_event('warn')),
					set(vars.randSeed, 1d400)]"
on_die="[score(level,points_value), spawn_item(self), death_burst_tracked(self)]"
on_end_anim="switch(animation,
					'hurt',animation('hover'),
					animation(animation))"
on_process_hover="[set(velocity_x,sin(cycle*(8+1d3)+vars.randSeed)*40),set(velocity_y,sin(cycle*(10+1d3)+vars.randSeed)*60)]"
on_process_normal="[if(target_close, if(max(velocity_x,velocity_y >20),decelerate(),animation('hover')), seek_target()),
						facing(sign(velocity_x))]"
on_process_warn="if(cycle%2=0, set(brightness,4000),set(brightness,50))"
on_set_goal="[set(vars.goal_x, vars.zone_x1 + 1d(zone_width)),
				set(vars.goal_y, vars.zone_y1 + 1d(zone_height)),
				animation('normal'),
				set(brightness,255),
				schedule(delay_interval, fire_event('warn'))] where zone_width = (vars.zone_x2-vars.zone_x1) where zone_height = (vars.zone_y2-vars.zone_y1)"
on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"
on_warn="[animation('warn'),schedule(20, fire_event('set_goal'))]"
tags="swallowable"
traction_in_air="1000"
zorder="100"
	[consts]
	basic_type="'skeeter'"
	flinch_threshold="3"
	frogourmet_tag="'skeeter'"
	thrown_type="'skeeter.thrown'"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	cause_flinch="def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])"
	damage_cooldown="0"
	display_hurt_visuals="def() execute(me, 
					[
					hurt_flash_sequence()
					])"
	display_posthit_invincibility_flash_sequence="def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )"
	flash_bright="def() [set(me.brightness, 1023)]"
	flash_off="def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]"
	flash_red="def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage >= consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage >= consts.flinch_threshold, cause_flinch(collide_with)))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_flash_sequence="def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]"
	hurt_velocity_x="-200"
	hurt_velocity_y="-400"
	is_invincible="if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[animation]
	accel_x="0"
	accel_y="0"
	attack_area="15,17,17,19"
	body_area="all"
	duration="1"
	feet_x="11"
	feet_y="21"
	frame_info="3,8,3,4,754,802,14,12,3,5,2,5,768,802,15,14,3,8,3,5,783,802,14,11,3,7,2,4,797,802,15,13,3,3,3,5,812,802,14,16"
	frames="5"
	id="normal"
	image="compiled-2.png"
	rect="751,794,770,817"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	attack_area="15,17,17,19"
	body_area="all"
	duration="1"
	feet_x="11"
	feet_y="21"
	frame_info="3,8,3,4,754,802,14,12,3,5,2,5,768,802,15,14,3,8,3,5,783,802,14,11,3,7,2,4,797,802,15,13,3,3,3,5,812,802,14,16"
	frames="5"
	id="hover"
	image="compiled-2.png"
	rect="751,794,770,817"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	attack_area="15,17,17,19"
	body_area="all"
	duration="1"
	feet_x="11"
	feet_y="21"
	frame_info="3,8,3,4,754,802,14,12,3,5,2,5,768,802,15,14,3,8,3,5,783,802,14,11,3,7,2,4,797,802,15,13,3,3,3,5,812,802,14,16"
	frames="5"
	id="warn"
	image="compiled-2.png"
	rect="751,794,770,817"
	[/animation]

	[animation]
	accel_x="0"
	accel_y="0"
	attack_area="15,17,17,19"
	body_area="all"
	duration="18"
	feet_x="11"
	feet_y="21"
	frame_info="3,1,4,5,1010,543,13,18"
	frames="1"
	id="hurt"
	image="compiled-0.png"
	rect="1007,542,1026,565"
	[/animation]

	[editor_info]
	category="bugs"
		[var]
		name="zone_x1"
		type="x"
		value="x - 400"
		[/var]

		[var]
		name="zone_x2"
		type="x"
		value="x + 400"
		[/var]

		[var]
		name="zone_y1"
		type="y"
		value="y - 400"
		[/var]

		[var]
		name="zone_y2"
		type="y"
		value="y + 400"
		[/var]

	[/editor_info]

	[properties]
	attack_damage="1"
	decelerate="def() [set(velocity_x, velocity_x*0.8), set(velocity_y, velocity_y*0.8)]"
	delay_interval="100*1d6"
	seek_target="def() [add(velocity_x, cos(angle(x,y,vars.goal_x,vars.goal_y)) * velMag),
							add(velocity_y, sin(angle(x,y,vars.goal_x,vars.goal_y)) * velMag),
				] where velMag = 30"
	target_close="if(length(x,y,vars.goal_x,vars.goal_y) < 50, 1, 0)"
	team="'evil'"
	[/properties]

	[object_type]
	id="thrown"
	on_die="[score(level,points_value), spawn_item(self), death_burst_tracked(self)]"
	on_enter_water="die()"
	on_return_to_normal="[%PROTO%, schedule(40,fire_event('warn'))]"
	on_spat="[%PROTO%,set(brightness,255)]"
	prototype="throwable_small_enemy"
	solid_dimensions="common,enemy"
		[consts]
		basic_animation="'hover'"
		basic_type="'skeeter'"
		frogourmet_tag="'skeeter'"
		thrown_type="'skeeter.thrown'"
		[/consts]

		[animation]
		body_area="none"
		duration="60"
		frames="1"
		id="thrown"
		image="enemies/skeeter.png"
		rect="47,28,66,51"
		thrown_area="all"
		[/animation]

		[animation]
		body_area="all"
		duration="5"
		frames="2"
		id="on_back"
		image="enemies/skeeter.png"
		rect="47,28,66,51"
		[/animation]

	[/object_type]

[/prototype]

