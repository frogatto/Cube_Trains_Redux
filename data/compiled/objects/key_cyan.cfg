[prototype]
collide_dimensions="~key"
friction="1000"
id="key_cyan"
mass="5"
on_collide_feet="[set(velocity_x, (velocity_x*50)/100), if(abs(velocity_x) < 50, set(velocity_x, 0)), set(velocity_y, if(abs(velocity_y) > 50, -velocity_y/2, 0))]"
on_collide_head="set(velocity_y, -velocity_y)"
on_collide_object_body="if(collide_with_area in ['attack','heat'], get_hit_by(collide_with))"
on_collide_side="set(velocity_x, -(velocity_x*70)/100)"
on_enter_water="[
		add_wave(midpoint_x, y2, -2000, 5*velocity_y/2, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, 2000, 5*velocity_y/2, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, -1000, 3*velocity_y/2, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, 1000, 3*velocity_y/2, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, -500, 2*velocity_y/2, 10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2, 500, 2*velocity_y/2, 10*velocity_y, 100, 100)
	]"
on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
solid_area="0,0,15,15"
solid_dimensions="thrown"
tags="swallowable"
zorder="-1"
	[consts]
	flinch_threshold="3"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	damage_cooldown="0"
	flash_color="def(collide_with) execute(me, if(collide_with.attack_damage < me.hitpoints,
					[schedule(4, [set(me.green, 255), set(me.blue, 255)]), set(me.animation, 'hurt'), set(me.green, 100), set(me.blue, 100)]))"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible_posthit) and (collide_with.attack_damage > 0) and (collide_with.attack_damage > consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[flash_color(collide_with),handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage > consts.flinch_threshold, [add(me.velocity_x,me.hurt_velocity_x), add(me.velocity_y,me.hurt_velocity_y)]))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_velocity_x="200"
	hurt_velocity_y="-400"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[tmp]
	time_last_hit="0"
	[/tmp]

	[vars]
	damage="1"
	[/vars]

	[properties]
	get_hit_by="def(collide_with)  null()"
	[/properties]

	[animation]
	accel_y="80"
	body_area="all"
	frame_info="0,0,0,0,421,661,16,16"
	id="normal"
	image="compiled-2.png"
	rect="421,661,436,676"
	[/animation]

	[animation]
	accel_y="80"
	body_area="all"
	frame_info="0,0,0,0,421,661,16,16"
	id="thrown"
	image="compiled-2.png"
	rect="421,661,436,676"
	[/animation]

[/prototype]

