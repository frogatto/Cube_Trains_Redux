[prototype]
functions="#Function to do a water-equivalent of standing.#
	  def float(object_type obj)
		animation('swim_side_idle')"
hitpoints="3"
id="minecart"
is_human="true"
mass="5"
on_add_object_fail="[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"
on_change_animation_failure="fire_event('solidity_fail')"
on_change_solid_dimensions_fail="if(not is_invincible_posthit,
	                    [add(hitpoints, -1), set(vars.time_last_hit, cycle)])"
on_collide_damage="[if((not is_invincible), [add(hitpoints, -max(1, surface_damage)), cause_flinch(collide_with), display_hurt_visuals(), set(vars.time_last_hit, cycle), set(solid_dimensions_in, ['player'])])]"
on_collide_feet="[land(collide_with.rotate), set(vars.on_slope, collide_with), debug('hi')]"
on_collide_object_body="if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area = 'attack', get_hit_by(collide_with)))"
on_create="[
		set(vars.energy, self.y),
		set(vars.gravitational_acceleration, 987),
	]"
on_ctrl_jump="if(is_standing, [set(velocity_y, velocity_y - 900), animation('jump')])"
on_ctrl_up="[
	if(abs(velocity_x) < 100 and is_standing, map(filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 'obj', [set(tmp.interacting_with, obj), fire_event(obj, 'interact')]))]"
on_done_create="if(not is_standing, self.launch())"
on_end_hurt_anim="animation('stand')"
on_end_interact_anim="animation('stand')"
on_end_jump_anim="animation('normal')"
on_enter_stand_anim="if(abs(slope_standing_on) > 20, stand(self))"
on_enter_stand_down_slope_anim="if(slope_standing_on*facing < 20, stand(self))"
on_enter_stand_up_slope_anim="if(slope_standing_on*facing > -20, stand(self))"
on_handle_move_script="if(abs(midpoint_x - tmp.scripted_target_x) < 10,
		  if(abs(tmp.scripted_target_facing) = 1 and facing != tmp.scripted_target_facing,
		  [set(control_lock, if(tmp.scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))],

		  [set(control_lock, null()),
		   set(me.tmp.scripted_target_x, null()),
		   set(me.tmp.scripted_target_facing, null()),
		   set(me.tmp.scripted_move_callback, null()),
		   tmp.scripted_move_callback]),
	   
		[set(control_lock, if(tmp.scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))])"
on_interacting="if(tmp.interacting_with and tmp.fired_talk = 0, [set(tmp.fired_talk, 1), fire_event(tmp.interacting_with, 'talk')])"
on_process="[
		if(is_standing, [
			set(rotate, slope_standing_on+vars.on_slope.rotate),
			set(velocity_x, speed(slope_standing_on+vars.on_slope.rotate)),
			debug((slope_standing_on+vars.on_slope.rotate), vars.on_slope),
			]),		
		set(tmp.was_standing, is_standing),
		if(tmp.was_standing != is_standing,
			if(tmp.was_standing < is_standing,
				land(slope_standing_on+vars.on_slope.rotate), launch()
				)
			),			
		if(animation = 'jump' and (not ctrl_jump), fire_event('end_jump_anim')),
		set(tmp.x, x),
		if(x=tmp.x, set(vars.energy, self.y)),
		]"
on_process_fall="if(is_standing, if(tmp.last_standing_cycle = cycle-1, animation('stand'), set(tmp.last_standing_cycle, cycle)))"
on_process_jump="if(ctrl_jump, [add(velocity_y, -vars.jump_boost)])"
on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"
on_start_interact="[animation('interact'), set(tmp.fired_talk, 0)]"
on_stuck="if(not underwater, if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -vars.jump_power), add(velocity_x, if(facing=1, 300, -300))))"
on_surface_damage="[fire_event('collide_damage')]"
on_timer="[
#handle ending of invincibility#
	    if((cycle - vars.time_last_hit)/2 <= 50 and (cycle - vars.time_last_hit)/2 > 10, set(solid_dimensions_in, ['player', 'common', 'boss'])),
		if(not is_invincible_posthit,
		    [if(underwater and water_object.consts.damage,
				[add(hitpoints, -water_object.consts.damage), display_hurt_visuals(),
				 set(vars.time_last_hit, cycle)]),
			set(alpha,255)])]"
solid_area="0,0,34,22"
solid_dimensions="player,common,boss"
timer_frequency="2"
vehicle="false"
zorder="5"
	[consts]
	flinch_threshold="3"
	posthit_invicibility_period="100"
	[/consts]

	[properties]
	attack_damage="0"
	attack_knockback="0"
	cause_flinch="def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			if('hurt' in available_animations,set(me.animation, 'hurt'))
			])"
	damage_cooldown="0"
	display_hurt_visuals="def() execute(me, 
					[
					hurt_flash_sequence()
					])"
	display_posthit_invincibility_flash_sequence="def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )"
	flash_bright="def() [set(me.brightness, 1023)]"
	flash_off="def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]"
	flash_red="def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]"
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible) and (collide_with.attack_damage > 0) and (collide_with.attack_damage >= consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
	handle_damage_type="def(collide_with) null() #virtual#"
	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage >= consts.flinch_threshold, cause_flinch(collide_with)))"
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	hurt_flash_sequence="def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]"
	hurt_velocity_x="-200"
	hurt_velocity_y="-400"
	is_invincible="if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)"
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]

	[properties]
	handle_damage="def(collide_with) execute(me,[
						add(me.hitpoints, - collide_with.attack_damage),
						player_damage_screen_flash(collide_with.attack_damage),
						set(solid_dimensions_in, ['player']),
						player_specific_damage_response()
					])"
	hurt_velocity_x="-1000"
	hurt_velocity_y="-1000"
	player_damage_screen_flash="def(dmg_amt)
							if(dmg_amt > 2 or dmg_amt >= hitpoints, screen_flash([255, 0, 0,255], 4), if(dmg_amt = 2, screen_flash([255, 0, 0,200], 3), screen_flash([255, 0, 0,70], 2)))"
	player_specific_damage_response="def() null()"
	scripted_move_to_x="def(target_x, target_facing, callback)
		                    [
		                    set(me.tmp.scripted_target_x, target_x),
							set(me.tmp.scripted_target_facing, target_facing),
							set(me.tmp.scripted_move_callback, callback),
							fire_event(me, 'handle_move_script')
							]"
	[/properties]

	[tmp]
	last_standing_cycle="-1"
	left="0"
	lookup_time="0"
	right="0"
	scripted_move_callback="null()"
	scripted_target_facing="null()"
	scripted_target_x="null()"
	time_last_hit="0"
	[/tmp]

	[vars]
	achievement_kill_chain="[[null,-1000], [null,-2000], [null,-3000], [null,-4000], [null,-4000], [null,-5000], [null,-6000], [null,-7000], [null,-8000], [null,-9000], [null,-10000], [null,-11000], [null,-12000], [null,-13000], [null,-14000], [null,-15000]]"
	[/vars]

	[animation]
	accel_y="98"
	body_area="all"
	frame_info="0,0,0,0,800,629,36,24"
	id="normal"
	image="compiled-2.png"
	rect="800,629,835,652"
	[/animation]

	[animation]
	accel_y="40"
	body_area="all"
	duration="10"
	frame_info="0,0,0,0,800,629,36,24"
	id="jump"
	image="compiled-2.png"
	rect="800,629,835,652"
	[/animation]

	[editor_info]
	category="player"
	[/editor_info]

	[properties]
	land="def(sso)[debug('land ', y),
			set(me.vars.energy, me.vars.energy + ((y - me.vars.launch.y)*(90-sin(sso)))/90),
			]"
	launch="def()[
			debug('launch ', y),
			set(me.vars.launch, {'y' -> y, 'x' -> x, 'energy' -> me.vars.energy}),
			]"
	speed="def(sso) if(s < 100 and sso > 0, 100, s) where s = max(0, sqrt(vars.gravitational_acceleration*2*(y-me.vars.energy)))"
	velocity="def() length(0,0,me.velocity_x,me.velocity_y)"
	[/properties]

[/prototype]

