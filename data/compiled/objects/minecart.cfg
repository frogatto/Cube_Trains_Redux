[prototype]
functions="#Function to test if frogatto is invincible.#
	  def is_invincible(object_type obj)
	  	if(obj.invincible or obj.level.in_dialog or obj.tmp.time_last_hit and (abs(obj.tmp.time_last_hit - obj.cycle) < 100), 1, 0);
	  
	  #Function to test if frogatto is blinking due to being invincible#
	  def is_blinking_invincible(object_type obj)
	  	if(obj.tmp.time_last_hit and (abs(obj.tmp.time_last_hit - obj.cycle) < 100), 1, 0);

	  #Function to do a water-equivalent of standing.#
	  def float(object_type obj)
		animation('swim_side_idle')"
hitpoints="3"
id="minecart"
is_human="true"
on_change_animation_failure="[animation(previous_animation)]"
on_change_solid_dimensions_fail="if(not is_blinking_invincible(self),
	                    [add(hitpoints, -1), set(tmp.time_last_hit, cycle)])"
on_collide_object_body="if(collide_with_area in ['attack', 'heat'] and collide_with.vars.team != vars.team and collide_with.vars.damage > 0,
		if((not is_invincible(self)),
        [
			add(hitpoints, -collide_with.attack_damage),
            animation('hurt'),
			set(solid_dimensions_in, ['player']),
            set(velocity_y,-1000),
            set(velocity_x,400 * collide_with.facing),
            set(tmp.time_last_hit, cycle)
        ],

        #avoiding being hit due to being invincible. if we have a shield,
         we make it flash#
         if(tmp.shield, fire_event(tmp.shield, 'flash'))
        ),

			#see if we're colliding with another object's interact area, in which case
			 we set it so we can interact with them.#
			if(collide_with_area = 'interact', set(can_interact, 2))
)"
on_create="[
		set(vars.energy, self.y),
		set(vars.gravitational_acceleration, 987),
	]"
on_ctrl_jump="if(is_standing, [set(velocity_y, velocity_y - 900), animation('jump')])"
on_ctrl_up="[
	if(abs(velocity_x) < 100 and is_standing, map(filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 'obj', [set(tmp.interacting_with, obj), fire_event(obj, 'interact')]))]"
on_done_create="if(not is_standing, self.launch())"
on_end_hurt_anim="animation('stand')"
on_end_interact_anim="animation('stand')"
on_end_jump_anim="animation('normal')"
on_enter_anim="set(tmp.already_hit, [])"
on_enter_stand_anim="if(abs(slope_standing_on) > 20, stand(self))"
on_enter_stand_down_slope_anim="if(slope_standing_on*facing < 20, stand(self))"
on_enter_stand_up_slope_anim="if(slope_standing_on*facing > -20, stand(self))"
on_handle_move_script="if(abs(midpoint_x - tmp.scripted_target_x) < 10,
		  if(abs(tmp.scripted_target_facing) = 1 and facing != tmp.scripted_target_facing,
		  [set(control_lock, if(tmp.scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))],

		  [set(control_lock, null()),
		   set(me.tmp.scripted_target_x, null()),
		   set(me.tmp.scripted_target_facing, null()),
		   set(me.tmp.scripted_move_callback, null()),
		   tmp.scripted_move_callback]),
	   
		[set(control_lock, if(tmp.scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))])"
on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)], [set(green, 100), set(blue, 100)])"
on_interacting="if(tmp.interacting_with and tmp.fired_talk = 0, [set(tmp.fired_talk, 1), fire_event(tmp.interacting_with, 'talk')])"
on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
on_process="[
		if(is_standing, [
			set(rotate, slope_standing_on),
			set(velocity_x, speed()),
			debug(speed()),
			]),		
		set(tmp.was_standing, is_standing),
		if(tmp.was_standing != is_standing,
			if(tmp.was_standing < is_standing,
				land(), launch()
				)
			),			
		if(animation = 'jump' and (not ctrl_jump), fire_event('end_jump_anim')),
		set(tmp.x, x),
		if(x=tmp.x, set(vars.energy, self.y)),
		]"
on_process_fall="if(is_standing, animation('stand'))"
on_process_jump="if(ctrl_jump, [add(velocity_y, -vars.jump_boost)])"
on_start_interact="[animation('interact'), set(tmp.fired_talk, 0)]"
on_stuck="if(not underwater, [animation('jump'), add(velocity_y, -vars.jump_power)])"
on_timer="[
#handle ending of invincibility#
	    if((cycle - tmp.time_last_hit)/2 <= 50 and (cycle - tmp.time_last_hit)/2 > 10, set(solid_dimensions_in, ['player', 'common', 'boss'])),
		if(is_blinking_invincible(self), set(alpha,(wave(cycle*300)+1000)/10 + 100),
		    [if(underwater and water_object.consts.damage,
				[add(hitpoints, -water_object.consts.damage),
				 set(tmp.time_last_hit, cycle)]),
			set(alpha,255)])]"
solid_area="0,0,34,22"
solid_dimensions="player,common,boss"
timer_frequency="2"
vehicle="false"
zorder="5"
	[properties]
	get_hit_by="def(collide_with) [
	  	            if(me.tmp.time_last_hit and (abs(me.tmp.time_last_hit - me.cycle) < 100) or collide_with.vars.damage <= 0, [],
				    [add(me.hitpoints, -if(collide_with, collide_with.vars.damage, 1)),
					 set(me.tmp.time_last_hit, me.cycle),
					 set(solid_dimensions_in, [me.vars.team]),
					 set(me.animation, 'hurt')
					 ])]"
	scripted_move_to_x="def(target_x, target_facing, callback)
		                    [
		                    set(me.tmp.scripted_target_x, target_x),
							set(me.tmp.scripted_target_facing, target_facing),
							set(me.tmp.scripted_move_callback, callback),
							fire_event(me, 'handle_move_script')
							]"
	[/properties]

	[tmp]
	left="0"
	lookup_time="0"
	right="0"
	scripted_move_callback="null()"
	scripted_target_facing="null()"
	scripted_target_x="null()"
	time_last_hit="0"
	[/tmp]

	[animation]
	accel_y="98"
	body_area="all"
	frame_info="0,0,0,0,620,596,36,24"
	id="normal"
	image="compiled-2.png"
	rect="620,596,655,619"
	[/animation]

	[animation]
	accel_y="40"
	body_area="all"
	duration="10"
	frame_info="0,0,0,0,620,596,36,24"
	id="jump"
	image="compiled-2.png"
	rect="620,596,655,619"
	[/animation]

	[vars]
	damage="100"
	mass="200"
	[/vars]

	[properties]
	land="def()[debug('land ', y),
			set(me.vars.energy, me.vars.energy + ((y - me.vars.launch.y)*(90-sin(slope_standing_on)))/90),
			]"
	launch="def()[
			debug('launch ', y),
			set(me.vars.launch, {'y' -> y, 'x' -> x, 'energy' -> me.vars.energy}),
			]"
	speed="def() if(s < 100 and slope_standing_on > 0, 100, s) where s = max(0, sqrt(vars.gravitational_acceleration*2*(y-me.vars.energy)))"
	velocity="def() length(0,0,me.velocity_x,me.velocity_y)"
	[/properties]

[/prototype]

