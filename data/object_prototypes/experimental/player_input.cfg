[prototype]
	#This should be a prototype for the player, if the ffl input system is being used.
	#Note: If input isn't working, you may need to include the "%PROTO%" instruction in the on_process and on_create events. Otherwise, the events may be swallowed.
	
	[properties]
		key_input = "if(not text_captured, ctrl_keys)"
		
		#Adjusted_mice is the same as ctrl_mice but returns the pointer position in level coordinates, as opposed to screen coordinates.
		adjusted_mice = "map(ctrl_mice, 'mouse', [	(mouse[0] + level.camera_position[0]/2)*2, 
													(mouse[1] + level.camera_position[1]/2)*2,
													] + mouse[2:size(mouse)])"
													
		cursor_over_rect = "def(rect) find(adjusted_mice, 'am',
			rect[0] < am[0] and 
			rect[1] > am[0] and 
			rect[2] < am[1] and 
			rect[3] > am[1])"
		cursor_down_over_rect = "def(rect) find(adjusted_mice, 'am',
			rect[0] < am[0] and 
			rect[1] > am[0] and 
			rect[2] < am[1] and 
			rect[3] > am[1] and
			'left' in am)"
			
		obj_rect = "def(widget) [widget.x, widget.x+widget.img_w, widget.y, widget.y+widget.img_h]"
	[/properties]
	
	[vars]
		text_captured = 0		#Set to a control if that control needs capturing. See key_input property for execution.
		widgets = []			#Contains each spawned widget.
		monitor_over = []		#Monitor widgets to check for negative events.
		monitor_left_down = []
	[/vars]
	
	on_create = "0"
	
	on_process="[
			fire_event('positive_mouse_events'),
			fire_event('negative_mouse_events'),
		]"
		
	on_positive_mouse_events = "[
		map(widgets, 'widget', [
			if(cor, [
				if(not widget in vars.monitor_over, 
					[fire_event(widget, 'mouse_over'),
					add(vars.monitor_over, [widget])]
					),
					
				if('left' in cor and (not widget in vars.monitor_left_down),
					[fire_event(widget, 'mouse_left_down'),
					add(vars.monitor_left_down, [widget])]
					),
					
				])	where cor = cursor_over_rect(obj_rect(widget)),
			]),
		]"
		
	on_negative_mouse_events = "[[
			map(not_over, 'not_over',
				fire_event(not_over, 'mouse_not_over')
				),
			set(vars.monitor_over, filter(vars.monitor_over, 'mo', not mo in not_over))
			]	where not_over = filter(vars.monitor_over, 'mo', not cursor_over_rect(obj_rect(mo))),
			
			[	
			map(not_over, 'not_over',
				if(cursor_over_rect(obj_rect(not_over)),
					fire_event(not_over, 'mouse_not_left_down'))
				),
			set(vars.monitor_left_down, filter(vars.monitor_left_down, 'mo', not mo in not_over))
			]	where not_over = filter(vars.monitor_left_down, 'mo', not 'left' in cursor_over_rect(obj_rect(mo))),
			
			]"
[/prototype]