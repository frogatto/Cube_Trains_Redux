[prototype]
	#This is the prototype for buttons. The object implimenting this must have a 'normal' animation.
	always_active = yes
	zorder = 100
	
	[properties]
# 		getAnchor = "def(mode) [ #use parent variable instead, this lags#
# 			if(mode in [1,4,7], self.x, if(mode in [2,5,8], self.midpoint_x, if(mode in [3,6,9], self.x+self.img_w))),
# 			if(mode in [7,8,9], self.y, if(mode in [4,5,6], self.midpoint_y, if(mode in [1,2,3], self.y+self.img_h)))]"
		setAnchor = "def(mode, crds_in) [
			if(mode in [1,4,7], set(self.x, crds[0]), if(mode in [2,5,8], set(self.midpoint_x, crds[0]), if(mode in [3,6,9], set(self.x, crds[0]-self.img_w)))),
			if(mode in [7,8,9], set(self.y, crds[1]), if(mode in [4,5,6], set(self.midpoint_y, crds[1]), if(mode in [1,2,3], set(self.y, crds[1]-self.img_h))))
			] where crds = list_add(
				list_multiply(
					[	if(mode in [1,4,7], 1, if(mode in [3,6,9], -1)),
						if(mode in [7,8,9], 1, if(mode in [1,2,3], -1))],
					if(is_list(vars.offset), vars.offset, [vars.offset, vars.offset])), 
				if(is_list(crds_in), crds_in, crds_in()))"
# 		Anchor Mode Map:
# 		 ╔═╦═╦═╗
# 		 ║7║8║9║
# 		 ╠═╬═╬═╣
# 		 ║4║5║6║
# 		 ╠═╬═╬═╣
# 		 ║1║2║3║
# 		 ╚═╩═╩═╝
# 		For example, getAnchor(2) would return [midpoint_x, y+img_h] of this object. Anchor point 7 would be just [x,y], and 5 returns the midpoints.
		getCameraAnchor = "def(mode)
			list_add(
				level.camera_position[0:2], 
				[	if(mode in [1,4,7], 0, if(mode in [2,5,8], level.camera_position[2]/2-self.img_w/2, if(mode in [3,6,9], level.camera_position[2]-self.img_w))),
					if(mode in [7,8,9], 0, if(mode in [4,5,6], level.camera_position[3]/2-self.img_h/2, if(mode in [1,2,3], level.camera_position[3]-self.img_h)))])"
#		getCameraAnchor = getCameraAnchor_ #This is so we can subclass it, and still referenc it. It only works once... so that's why we add getCameraAnchor__ and getCameraAnchor___ as needed. Either that or bug Sirp to add proto.getCameraAnchor.
		
		#Redefine usable to fail when your object shouldn't capture mouse input for some reason.
		usable = "def(smouse) 1"
	[/properties]
	
	[vars]
		offset=0			#The margin of the object when setting position. Can be a number, or a list containing an x/y pair.
		reference_anchor=0	#A function which takes no args, or a list containing an x/y pair. This object can provide a reference point via the getAnchor method.
		anchorPoint=7		#Which point of the object should we set, when using setAnchor.
	[/vars]
	
	on_create = "[
		add(level.player.vars.widgets, [self]),
		if(not vars.reference_anchor, set(vars.reference_anchor, def() getCameraAnchor(7))),
		fire_event('update_position'),
		]"
	
	on_update_position = "[
		setAnchor(vars.anchorPoint, vars.reference_anchor),
		if(not is_list(vars.reference_anchor), schedule(1, fire_event('update_position')))]"
[/prototype]