{
/*Implimentor requires "walk" and "turn" animations.
Properties:	pace - Paces to and fro the limits set in the editor.
			walk - Walks fowards forever.
*/
id: "walking_npc",
zorder: -2,

editor_info: {
	category: "NPCs",
	var: [{
		name: "min_x",
		value: "midpoint_x - 200",
		type: "x",
	},{
		name: "max_x",
		value: "midpoint_x + 200",
		type: "x",
	},{
		name: "start_mode",
		type: "enum",
		value: "'walk'",
		enum_values: "walk",
	},{
		name: "turns_at_cliff",
		type: "boolean",
		value: "true",
	},],
},

properties: {
	"pace": "[
		fire_event(self, 'end_walk_anim'),
		set(self.vars.turns, true)]",
	"walk": "[
		if(animation != 'walk', set(self.animation, 'walk')),
		set(self.vars.turns, false)]",
	"pace_to": "def(new_min_x, new_max_x) [
		if(new_min_x < new_max_x, [
			set(self.vars.min_x, new_min_x),
			set(self.vars.max_x, new_max_x),
			],[
			set(self.vars.min_x, new_max_x),
			set(self.vars.max_x, new_min_x),
			]),
		self.pace]",
	"walk_to": "def(target_x) [
		set(self.vars.target, target_x),
		fire_event(self, 'walk_to_target'),
		set(self.vars.turns, false),
		if((target_x < self.mid_x and facing > 0) or (target_x > self.mid_x and facing <= 0),
			set(self.animation, 'turn'),
			set(self.animation, 'walk'))
		]",
	},
	
vars: {
	"turns": true,	//Turns at editor-set limits.
	"target": 0,	//If we are walking to a target, this is it.
	},

consts: {"can_walk": true},

on_create: "if(start_mode, animation(start_mode), animation('walk'))",

on_end_anim: "set(previous_animation, animation)",

on_walk_to_target: "
	if(animation = 'walk',
		if(facing > 0, 
			if(mid_x + img_w/2 > target, schedule(1, fire_event('reach_target')), wtt),
			if(mid_x - img_w/2 < target, schedule(1, fire_event('reach_target')), wtt)),
		wtt) where wtt = schedule(50, fire_event('walk_to_target'))",
	
on_reach_target: "[stand]",

on_end_walk_anim: "[
	animation('walk'),
	if(previous_animation != 'turn', [
		if(turns,
			if(facing > 0,
				if(mid_x + margin > max_x, animation('turn')), 
				if(mid_x - margin < min_x, animation('turn')))),
		if(turns_at_cliff and distance_to_cliff < margin*2, animation('turn')),
		]) where margin = 50,
	]",
			
on_end_turn_anim: "[
	animation('walk'),
	set(facing, 0 >= facing),
	]"

}
