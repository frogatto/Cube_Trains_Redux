[prototype]
	prototype=ct-block
	
	[properties]
		select_piece = "def(delta) [
			set(piece_selected, newIndex), 
			debug(str(pieces[newIndex].type) + 'now selected.')
			] where newIndex = if(rangefive < 0, size(pieces)-1, rangefive) 
			where rangefive = (piece_selected+delta)%size(pieces)"
			
		rotate_view = "def(delta) [map(filter(level.chars, 'lc', lc.location), 'obj', [
				obj.applyRotate(delta, [-1*delta*obj.location[1], delta*obj.location[0], obj.location[2]])]), #rotated by 90 degrees cw or ccw.#
				fire_event('render_depth')]"
				
		render_depth = "def(new_loc_, steps) 
			map(range(steps+1), 'step', schedule(step, 
				map(play_objs, 'pob', [	#Apply alpha above and darken below for sense of depth.#
					pob.set_alpha((new_loc[2] - pob.vars.location[2])*150+255),
					pob.set_bright(max(255, -(pob.vars.location[2] - new_loc[2])*50+255)),
			])) where new_loc = [new_loc_[0], new_loc_[1], ((new_loc_[2] * 1.0) * (step)  + (vars.location[2] * 1.0) * (steps - step))/steps]
			) where play_objs = filter(level.chars, 'ch', ch.vars.location and ch != context.self)"
				
		applyRotate = "def(delta, dest) [setToGrid(dest), 
			schedule(0, fire_event('snap_cursor')),
			set(tmp.camOffset, [level.camera_position[0]-self.x, level.camera_position[1]-self.y])
			]"
			
		block_value = "def(objs, value) 0"
		
		next_branch = "set(self.vars.target_value, 
			switch(self.vars.target_value,
				'normal',  'green',
				'green', 'red',
				'red', 'normal'))"
	[/properties]
	
	[vars]
		toLoad = "[['ct-ground-support-5',[0,0,0],0,'normal'],['ct-ground-support-5',[0,-1,0],0,'normal'],['ct-ground-support-5',[0,-2,0],0,'normal'],['ct-ground-support-5',[1,-2,0],0,'normal'],['ct-ground-support-5',[1,-1,0],0,'normal'],['ct-ground-support-5',[1,0,0],0,'normal'],['ct-ground-support-5',[2,0,0],0,'normal'],['ct-ground-support-5',[2,-1,0],0,'normal'],['ct-ground-support-5',[2,-2,0],0,'normal'],['ct-ground-support-5',[2,1,0],0,'normal'],['ct-ground-support-5',[1,1,0],0,'normal'],['ct-ground-support-5',[0,1,0],0,'normal'],['ct-ground-support-5',[-1,1,0],0,'normal'],['ct-ground-support-5',[-1,0,0],0,'normal'],['ct-ground-support-5',[-1,-1,0],0,'normal'],['ct-ground-support-5',[-1,-2,0],0,'normal'],['ct-block-5',[-1,2,0],0,'normal'],['ct-block-5',[0,2,0],0,'normal'],['ct-block-5',[1,2,0],0,'normal'],['ct-block-5',[2,2,0],0,'normal'],['ct-ground-support-5',[2,3,0],0,'normal'],['ct-ground-support-5',[1,3,0],0,'normal'],['ct-ground-support-5',[0,3,0],0,'normal'],['ct-ground-support-5',[-1,3,0],0,'normal'],['ct-ground-support-5',[-1,4,0],0,'normal'],['ct-ground-support-5',[-1,5,0],0,'normal'],['ct-ground-support-5',[-1,6,0],0,'normal'],['ct-ground-support-5',[0,6,0],0,'normal'],['ct-ground-support-5',[1,6,0],0,'normal'],['ct-ground-support-5',[2,6,0],0,'normal'],['ct-ground-support-5',[2,5,0],0,'normal'],['ct-ground-support-5',[2,4,0],0,'normal'],['ct-ground-support-5',[1,4,0],0,'normal'],['ct-ground-support-5',[1,5,0],0,'normal'],['ct-ground-support-5',[0,5,0],0,'normal'],['ct-ground-support-5',[0,4,0],0,'normal'],['ct-block-5',[3,-2,0],0,'normal'],['ct-block-5',[3,-1,0],0,'normal'],['ct-block-5',[3,0,0],0,'normal'],['ct-block-5',[3,1,0],0,'normal'],['ct-block-5',[3,2,0],0,'normal'],['ct-block-5',[3,3,0],0,'normal'],['ct-block-5',[3,4,0],0,'normal'],['ct-block-5',[3,5,0],0,'normal'],['ct-block-5',[3,6,0],0,'normal'],['ct-block-5',[3,7,0],0,'normal'],['ct-block-5',[2,7,0],0,'normal'],['ct-block-5',[1,7,0],0,'normal'],['ct-block-5',[0,7,0],0,'normal'],['ct-block-5',[-1,7,0],0,'normal'],['ct-block-5',[-2,7,0],0,'normal'],['ct-block-5',[-2,6,0],0,'normal'],['ct-block-5',[-2,5,0],0,'normal'],['ct-block-5',[-2,4,0],0,'normal'],['ct-block-5',[-2,3,0],0,'normal'],['ct-block-5',[-2,2,0],0,'normal'],['ct-block-5',[-2,1,0],0,'normal'],['ct-block-5',[-2,0,0],0,'normal'],['ct-block-5',[-2,-1,0],0,'normal'],['ct-block-5',[-2,-2,0],0,'normal'],['ct-block-5',[-2,-3,0],0,'normal'],['ct-block-5',[-1,-3,0],0,'normal'],['ct-block-5',[0,-3,0],0,'normal'],['ct-block-5',[1,-3,0],0,'normal'],['ct-block-5',[2,-3,0],0,'normal'],['ct-block-5',[3,-3,0],0,'normal'],['ct-block-5',[-3,2,0],0,'normal'],['ct-block-5',[-4,2,0],0,'normal'],['ct-block-5',[-5,2,0],0,'normal'],['ct-block-5',[-6,2,0],0,'normal'],['ct-block-5',[-7,2,0],0,'normal'],['ct-block-5',[-7,0,0],0,'normal'],['ct-block-5',[-7,1,0],0,'normal'],['ct-block-5',[-7,-1,0],0,'normal'],['ct-block-5',[-7,-2,0],0,'normal'],['ct-block-5',[-7,-3,0],0,'normal'],['ct-block-5',[-6,-3,0],0,'normal'],['ct-block-5',[-5,-3,0],0,'normal'],['ct-block-5',[-4,-3,0],0,'normal'],['ct-block-5',[-3,-3,0],0,'normal'],['ct-ground-support-5',[-3,-2,0],0,'normal'],['ct-ground-support-5',[-3,-1,0],0,'normal'],['ct-ground-support-5',[-3,0,0],0,'normal'],['ct-ground-support-5',[-3,1,0],0,'normal'],['ct-ground-support-5',[-4,1,0],0,'normal'],['ct-ground-support-5',[-5,1,0],0,'normal'],['ct-ground-support-5',[-6,1,0],0,'normal'],['ct-ground-support-5',[-6,0,0],0,'normal'],['ct-ground-support-5',[-6,-1,0],0,'normal'],['ct-ground-support-5',[-6,-2,0],0,'normal'],['ct-ground-support-5',[-5,-2,0],0,'normal'],['ct-ground-support-5',[-4,-2,0],0,'normal'],['ct-ground-support-5',[-4,-1,0],0,'normal'],['ct-ground-support-5',[-4,0,0],0,'normal'],['ct-ground-support-5',[-5,0,0],0,'normal'],['ct-ground-support-5',[-5,-1,0],0,'normal'],['ct-track-37',[0,1,1],0,'normal'],['ct-track-37',[1,-2,1],0,'normal'],['ct-track-19',[2,0,1],0,'normal'],['ct-track-19',[-1,-1,1],0,'normal'],['ct-track-19',[-1,5,1],0,'normal'],['ct-track-19',[2,4,1],0,'normal'],['ct-track-37',[0,3,1],0,'normal'],['ct-track-37',[1,6,1],0,'normal'],['ct-track-79',[-5,0,1],0,'normal'],['ct-track-39',[-5,-1,1],0,'normal'],['ct-track-17',[-4,0,1],0,'normal'],['ct-track-13',[-4,-1,1],0,'normal'],['ct-track-7,39',[0,0,1],0,'normal'],['ct-track-9,13',[0,-1,1],0,'normal'],['ct-track-3,17',[1,-1,1],0,'normal'],['ct-track-1,79',[1,0,1],0,'normal'],['ct-track-1,39',[1,4,1],0,'normal'],['ct-track-7,13',[1,5,1],0,'normal'],['ct-track-9,17',[0,5,1],0,'normal'],['ct-track-3,79',[0,4,1],0,'normal'],['ct-ground-support-5',[2,-4,0],0,'normal'],['ct-ground-support-5',[1,-4,0],0,'normal'],['ct-ground-support-5',[0,-4,0],0,'normal'],['ct-ground-support-5',[-1,-4,0],0,'normal'],['ct-ground-support-5',[-1,-5,0],0,'normal'],['ct-ground-support-5',[0,-6,0],0,'normal'],['ct-ground-support-5',[0,-5,0],0,'normal'],['ct-ground-support-5',[1,-5,0],0,'normal'],['ct-ground-support-5',[2,-5,0],0,'normal'],['ct-ground-support-5',[2,-6,0],0,'normal'],['ct-ground-support-5',[1,-6,0],0,'normal'],['ct-ground-support-5',[-1,-6,0],0,'normal'],['ct-ground-support-5',[0,-7,0],0,'normal'],['ct-ground-support-5',[-1,-7,0],0,'normal'],['ct-ground-support-5',[2,-7,0],0,'normal'],['ct-ground-support-5',[1,-7,0],0,'normal'],['ct-block-5',[3,-4,0],0,'normal'],['ct-block-5',[3,-5,0],0,'normal'],['ct-block-5',[3,-6,0],0,'normal'],['ct-block-5',[3,-7,0],0,'normal'],['ct-block-5',[3,-8,0],0,'normal'],['ct-block-5',[2,-8,0],0,'normal'],['ct-block-5',[1,-8,0],0,'normal'],['ct-block-5',[0,-8,0],0,'normal'],['ct-block-5',[-1,-8,0],0,'normal'],['ct-block-5',[-2,-8,0],0,'normal'],['ct-block-5',[-2,-7,0],0,'normal'],['ct-block-5',[-2,-6,0],0,'normal'],['ct-block-5',[-2,-5,0],0,'normal'],['ct-block-5',[-2,-4,0],0,'normal'],['ct-block-5',[4,2,0],0,'normal'],['ct-block-5',[5,2,0],0,'normal'],['ct-block-5',[6,2,0],0,'normal'],['ct-block-5',[7,2,0],0,'normal'],['ct-block-5',[8,2,0],0,'normal'],['ct-block-5',[8,1,0],0,'normal'],['ct-block-5',[8,0,0],0,'normal'],['ct-block-5',[8,-1,0],0,'normal'],['ct-block-5',[8,-2,0],0,'normal'],['ct-block-5',[8,-3,0],0,'normal'],['ct-block-5',[7,-3,0],0,'normal'],['ct-block-5',[6,-3,0],0,'normal'],['ct-block-5',[5,-3,0],0,'normal'],['ct-block-5',[4,-3,0],0,'normal'],['ct-track-9,37',[0,-5,1],0,'normal'],['ct-track-7,19',[1,-5,1],0,'normal'],['ct-track-3,19',[0,-6,1],0,'normal'],['ct-track-1,37',[1,-6,1],0,'normal'],['ct-track-37',[1,-7,1],0,'normal'],['ct-track-37',[0,-4,1],0,'normal'],['ct-track-19',[2,-5,1],0,'normal'],['ct-track-19',[-1,-6,1],0,'normal'],['ct-ground-support-5',[4,1,0],0,'normal'],['ct-ground-support-5',[5,1,0],0,'normal'],['ct-ground-support-5',[6,1,0],0,'normal'],['ct-ground-support-5',[7,1,0],0,'normal'],['ct-ground-support-5',[7,0,0],0,'normal'],['ct-ground-support-5',[7,-1,0],0,'normal'],['ct-ground-support-5',[7,-2,0],0,'normal'],['ct-ground-support-5',[6,-2,0],0,'normal'],['ct-ground-support-5',[5,-2,0],0,'normal'],['ct-ground-support-5',[4,-2,0],0,'normal'],['ct-ground-support-5',[4,-1,0],0,'normal'],['ct-ground-support-5',[4,0,0],0,'normal'],['ct-ground-support-5',[5,0,0],0,'normal'],['ct-ground-support-5',[6,0,0],0,'normal'],['ct-ground-support-5',[6,-1,0],0,'normal'],['ct-ground-support-5',[5,-1,0],0,'normal'],['ct-block-5',[-2,-3,1],0,'normal'],['ct-block-5',[3,-3,1],0,'normal'],['ct-block-5',[3,2,1],0,'normal'],['ct-block-5',[-2,2,1],0,'normal'],['ct-block-5',[-2,2,-1],0,'normal'],['ct-block-5',[3,2,-1],0,'normal'],['ct-block-5',[3,-3,-1],0,'normal'],['ct-block-5',[-2,-3,-1],0,'normal'],['ct-block-5',[3,2,3],0,'normal'],['ct-block-5',[3,2,2],0,'normal'],['ct-block-5',[3,-3,2],0,'normal'],['ct-block-5',[3,-3,3],0,'normal'],['ct-block-5',[-2,-3,3],0,'normal'],['ct-block-5',[-2,-3,2],0,'normal'],['ct-block-5',[-2,2,2],0,'normal'],['ct-block-5',[-2,2,3],0,'normal']]
				 "
				
		keymode = 'dvorak'
		keymap = "{
			'dvorak' -> (
				{'low' -> 305,		#ctrl right#
				'high' -> 'z',
				'help' -> 282,		#f1#
				'debug2' -> 283,	#f2#
				'print' -> 284,		#f3#	#also saves to registry#
				'load' -> 285,		#f4#	#loads from registry#
				'place' -> 306,		#ctrl left#
				'unplace' -> 'q',
				'select left' -> '<',
				'select right' -> ';',
				'rotate cw' -> '\\',
				'rotate ccw' -> '-',
				'trains' -> ' ',
				'block value up' -> 'o',
				'block value down' -> 'a',
				'block alt' -> 'e',
				'next branch' -> 314,	#menu key#
				}
			), 'qwerty' -> (
				{'low' -> 305,
				'high' -> '/',
				'help' -> 282,
				'print' -> 284,
				'load' -> 285,
				'place' -> 306,
				'unplace' -> 'x',
				'select left' -> '\\',
				'select right' -> 'z',
				'rotate cw' -> ';',
				'rotate ccw' -> ~'~,	#'\'' doesn't work#
				
				#...#
				
				'next branch' -> '314',	#menu key#
				}
			),
		}"
		
		pieces = "['ct-block-5']"
		piece_selected = 0
		groups = ['ground', 'support', 'track',]
		entrances = []
		target_value = 'normal'
	[/vars]
	
	on_create = "[
		set(fragment_shaders, ['fragment.gl']), set(vertex_shaders, ['vertex.gl']), set(shader.dst_factor, 500),
		setToGrid(location),
		fire_event('quick_load'),
		[	set(text_ctrl.vars.txt, '[]'),
			add_object(text_ctrl),
			set(vars.text_ctrl, text_ctrl),
			set(level.focus, [text_ctrl]),
		]	where text_ctrl = object('text_controller', x, y, 0, {'centered'->0}),
		render_depth(loc, 1),
		
		map(tracks.consts.track_paths.curve_side[1], 'point',
			spawn('{self.type}.dbg', point[0], point[1], 0))
			where tracks = object('ct-track-13'),
		]"
	
	on_ctrl_left = "setToGrid(list_add(location, [0,-1,0]))"
	on_ctrl_right = "setToGrid(list_add(location, [0,1,0]))"
	on_ctrl_up = "setToGrid(list_add(location, [1,0,0]))"
	on_ctrl_down = "setToGrid(list_add(location, [-1,0,0]))"
	on_ctrl_high = "[setToGrid(loc), render_depth(loc, 4)] where loc = list_add(location, [0,0,1])"
	on_ctrl_low = "[setToGrid(loc), render_depth(loc, 4)] where loc = list_add(location, [0,0,-1])"

	on_print = "[
		debug('saved, serialized map: \n\n{str(saved)}\n\n'),
		set(registry.ct_quicksave, saved),
		] where saved = map(filter(level.chars, 'ch', find(ch.vars.group, 'grp', grp in context.groups)), 'saves', [saves.type, saves.location, saves.vars.save_val, saves.branch])" 
		
	on_quick_load = "[
		map(toLoad, 'data', [	obj.setToGrid(data[1]), 
								set(obj.vars.save_val, data[2]), 
								obj.set_branch(data[3]), 
								add_object(obj)] 
								where obj = object(data[0])),
		map(filter(level.chars, 'ch', find(ch.vars.group, 'grp', grp in context.groups)), 'old', fire_event(old, 'remove')),
		fire_event('render_depth'),
		debug('Loaded {size(toLoad)} objects.'),
		]"
		
	on_render_depth = "render_depth(vars.location, 1)"
	
	on_place = "if(not find(map(obj.vars.group, 'og', og in existing_groups), 'res', res) where existing_groups = flatten(map(ap, 'a', a.vars.group)) where ap = at_position,
			[	obj.setToGrid(vars.location), 
				obj.set_branch(vars.target_value),
				add_object(obj)], 
			[debug('Error: At least one {objstr} already here.') where objstr = list_cat(map(range(groupsize), 'index', obj.vars.group[index] + if(groupsize - index > 2, ', ', if(groupsize - index = 2, ', or '))) where groupsize = size(obj.vars.group)),
			]) where obj = object(pieces[piece_selected])"
			
	on_unplace = "map(objs, 'obj', fire_event(obj, 'remove')) where objs = filter(at_position, 'ap', ap.type in pieces)"
	
	on_trains = "debug('trains not defined')"
		
	on_process = "[#debug('zsub_orders: ', self.zsub_order, map(at_position, 'ap', ap.zsub_order)),#
	
		#make the cursor pulse#
		set(shader.dst_factor, wave(level.cycle*15)/5 + 1000),		
		set(shader.src_factor, 1000 - (wave(level.cycle*15)/5 + 1000)),
		
		set(keys_already_down, keys),	#deal with key input#
		[	#if(size(nkd) > 0, debug(nkd)),#
			if(kmap['low']			in nkd, fire_event('ctrl_low')),
			if(kmap['high']			in nkd, fire_event('ctrl_high')),
			if(kmap['help']			in nkd, fire_event('help')),
			if(kmap['debug2']		in nkd, fire_event('debug2')),
			if(kmap['load']			in nkd, [set(toLoad, registry.ct_quicksave), fire_event('quick_load')]),
			if(kmap['print']		in nkd, fire_event('print')),
			if(kmap['place']		in nkd, fire_event('place')),
			if(kmap['unplace']		in nkd, fire_event('unplace')),
			if(kmap['select left']	in nkd, select_piece(1)),
			if(kmap['select right']	in nkd, select_piece(-1)),
			if(kmap['rotate cw']	in nkd, rotate_view(1)),
			if(kmap['rotate ccw']	in nkd, rotate_view(-1)),
			if(kmap['trains']		in nkd, fire_event('trains')),
			if(kmap['block alt']	in nkd, map(at_pos, 'blk', fire_event('block_alt', blk))),
			if(kmap['next branch']	in nkd, next_branch),
			
			if(257 in nkd, [set(keymode, 'dvorak'), debug('now using dvorak keymap')]),
			if(258 in nkd, [set(keymode, 'qwerty'), debug('now using qwerty keymap')]),
			if( 27 in nkd, abort()), #Well, it does…#
		]	where nkd = filter(keys, 'key', not key in keys_already_down),
		if(kmap['block value up']	in keys and cycle%5 = 1, block_value(at_pos, 1)),
		if(kmap['block value down']	in keys and cycle%5 = 1, block_value(at_pos, -1)),
		text_ctrl.set_text(	'pos: {str(location)}\n' +
						   ('Adding a {colour}{pieces[piece_selected]}.\n' where colour = if(vars.target_value = 'normal', '', vars.target_value + ' ')) + 
							if(size(at_pos) > 0, 'Here: ', '') + list_cat(map(at_pos, 'ap', ap.type + ' ')) + '\n' + 
							list_cat(map(at_pos, 'ap', ap.message + ' '))),
		set(text_ctrl.x, midpoint_x-125), set(text_ctrl.y, y+260),
	]	where keys = ctrl_keys
		where kmap = keymap[keymode]
		where at_pos = at_position" #Replace at_position with [] to disable text.
		
	on_snap_cursor = "[set(level.camera_position, [self.x*100+tmp.camOffset[0]*100,self.y*100+tmp.camOffset[1]*100]), debug('offsets: ' + tmp.camOffset)]"
	
	[object_type]
		id=dbg
		z=150
		
		on_end_anim="animation('normal')"
		
		on_create = "set(z, 150)"
		
		[animation]
			id=normal
			image=experimental/spiderbot.png
			rect=87,65,94,72
			pad=0
			frames=2
			duration=5
			item_area=all
		[/animation]
	[/object_type]
[/prototype]