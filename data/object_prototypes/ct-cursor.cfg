[prototype]
	prototype=ct-block
	
	[properties]
		select_piece = "def(delta) [
			set(piece_selected, newIndex), 
			debug(str(pieces[newIndex].type) + 'now selected.')
			] where newIndex = if(rangefive < 0, size(pieces)-1, rangefive) 
			where rangefive = (piece_selected+delta)%size(pieces)"
			
		rotate_view = "def(delta) [map(filter(level.chars, 'lc', lc.location), 'obj', [
				obj.applyRotate(delta, [-1*delta*obj.location[1], delta*obj.location[0], obj.location[2]])]), #rotated by 90 degrees cw or ccw.#
				fire_event('render_depth')]"
				
		render_depth = "def(new_loc_, steps) 
			map(range(steps+1), 'step', schedule(step, 
				map(play_objs, 'pob', [	#Apply alpha above and darken below for sense of depth.#
					set(pob.alpha, (new_loc[2] - pob.vars.location[2])*150+255),
					set(pob.brightness, max(255, -(pob.vars.location[2] - new_loc[2])*50+255)),
			])) where new_loc = [new_loc_[0], new_loc_[1], ((new_loc_[2] * 1.0) * (step)  + (vars.location[2] * 1.0) * (steps - step))/steps]
			) where play_objs = filter(level.chars, 'ch', ch.vars.location and ch != context.self)"
				
		applyRotate = "def(delta, dest) setToGrid(dest)"
	[/properties]
	
	[vars]
		toLoad = "
				 "
					
		keymode = 'dvorak'
		keymap = "{
			'dvorak' -> (
				{'low' -> 305,		#ctrl right#
				'high' -> 'z',
				'help' -> 282,		#f1#
				'debug2' -> 283,	#f2#
				'print' -> 284,		#f3#	#also saves to registry#
				'load' -> 285,		#f4#	#loads from registry#
				'place' -> 306,		#ctrl left#
				'unplace' -> 'q',
				'select left' -> '<',
				'select right' -> ';',
				'rotate cw' -> '\\',
				'rotate ccw' -> '-',
				}
			), 'qwerty' -> (
				{'low' -> 305,
				'high' -> '/',
				'help' -> 282,
				'print' -> 284,
				'load' -> 285,
				'place' -> 306,
				'unplace' -> 'x',
				'select left' -> '\\',
				'select right' -> 'z',
				'rotate cw' -> ';',
				'rotate ccw' -> ~'~,	#'\'' doesn't work#
				}
			),
		}"
		
		pieces = "['ct-block-5']"
		piece_selected = 0
		groups = ['ground', 'support', 'track',]
	[/vars]
	
	on_create = "[
		set(fragment_shaders, ['fragment.gl']), set(vertex_shaders, ['vertex.gl']), set(shader.dst_factor, 500),
		setToGrid(location),
		fire_event('quick_load'),
		set(text_ctrl.vars.txt, '[]'),
		add_object(text_ctrl),
		set(vars.text_ctrl, text_ctrl),
		set(level.focus, [text_ctrl]),
		render_depth(loc, 1),
		] where text_ctrl = object('text_controller', x, y, 0, {'centered'->1})"
	
	on_ctrl_left = "setToGrid(list_add(location, [0,-1,0]))"
	on_ctrl_right = "setToGrid(list_add(location, [0,1,0]))"
	on_ctrl_up = "setToGrid(list_add(location, [1,0,0]))"
	on_ctrl_down = "setToGrid(list_add(location, [-1,0,0]))"
	on_ctrl_high = "[setToGrid(loc), render_depth(loc, 4)] where loc = list_add(location, [0,0,1])"
	on_ctrl_low = "[setToGrid(loc), render_depth(loc, 4)] where loc = list_add(location, [0,0,-1])"

	on_print = "[
		debug('saved, serialized map: \n\n{str(saved)}\n\n'),
		set(registry.ct_quicksave, saved),
		] where saved = map(filter(level.chars, 'ch', find(ch.vars.group, 'grp', grp in context.groups)), 'saves', [saves.type, saves.location])" 
		
	on_quick_load = "[
		map(toLoad, 'data', [obj.setToGrid(data[1]), add_object(obj)] where obj = object(data[0])),
		map(filter(level.chars, 'ch', find(ch.vars.group, 'grp', grp in context.groups)), 'old', fire_event(old, 'remove')),
		fire_event('render_depth'),
		]"
	on_render_depth = "render_depth(vars.location, 1)"
	
	on_place = "if(not find(map(obj.vars.group, 'og', og in existing_groups), 'res', res) where existing_groups = flatten(map(ap, 'a', a.vars.group)) where ap = at_position,
			[obj.setToGrid(vars.location), add_object(obj)], 
			[debug('Error: At least one {objstr} already here.') where objstr = list_cat(map(range(groupsize), 'index', obj.vars.group[index] + if(groupsize - index > 2, ', ', if(groupsize - index = 2, ', or '))) where groupsize = size(obj.vars.group)),
			]) where obj = object(pieces[piece_selected])"
			
	on_unplace = "if(size(obj) > 0, 
		[fire_event(obj[0], 'remove'), fire_event('unplace')]
		) where obj = at_position"
		
	on_process = "[#debug('zsub_orders: ', self.zsub_order, map(at_position, 'ap', ap.zsub_order)),#
	
		set(shader.dst_factor, wave(level.cycle*15)/5 + 1000),		#make the cursor pulse#
		set(shader.src_factor, 1000 - (wave(level.cycle*15)/5 + 1000)),
		
		set(keys_already_down, keys),	#deal with key input#
		[	#if(size(nkd) > 0, debug(nkd)),#
			if(kmap['low']			in nkd, fire_event('ctrl_low')),
			if(kmap['high']			in nkd, fire_event('ctrl_high')),
			if(kmap['help']			in nkd, fire_event('help')),
			if(kmap['debug2']		in nkd, fire_event('debug2')),
			if(kmap['load']			in nkd, [set(toLoad, registry.ct_quicksave), fire_event('quick_load')]),
			if(kmap['print']		in nkd, fire_event('print')),
			if(kmap['place']		in nkd, fire_event('place')),
			if(kmap['unplace']		in nkd, fire_event('unplace')),
			if(kmap['select left']	in nkd, select_piece(1)),
			if(kmap['select right']	in nkd, select_piece(-1)),
			if(kmap['rotate cw']	in nkd, rotate_view(1)),
			if(kmap['rotate ccw']	in nkd, rotate_view(-1)),
			
			if(257 in nkd, [set(keymode, 'dvorak'), debug('now using dvorak keymap')]),
			if(258 in nkd, [set(keymode, 'qwerty'), debug('now using qwerty keymap')]),
			if( 27 in nkd, exit()),
		]	where nkd = filter(keys, 'key', not key in keys_already_down),
		text_ctrl.set_text(str(location) + '\n' + map(at_position, 'ap', ap.type)),
		set(text_ctrl.x, midpoint_x), set(text_ctrl.y, y+240),
	]	where keys = ctrl_keys
		where kmap = keymap[keymode]"
[/prototype]