[prototype]
	solid_dimensions=player,common,boss
	vehicle=false
	is_human=true

	prototype=hittable


	[properties]
		hurt_velocity_y=-1000
		hurt_velocity_x=-1000


		scripted_move_to_x="def(target_x, target_facing, callback)
		                    [
		                    set(me.tmp.scripted_target_x, target_x),
							set(me.tmp.scripted_target_facing, target_facing),
							set(me.tmp.scripted_move_callback, callback),
							fire_event(me, 'handle_move_script')
							]
		                    "

		handle_damage="def(collide_with) execute(me,[
						add(me.hitpoints, - collide_with.attack_damage),
						player_damage_screen_flash(collide_with.attack_damage),
						set(solid_dimensions_in, ['player']),
						player_specific_damage_response()
					])"

		player_damage_screen_flash="def(dmg_amt)
							if(dmg_amt > 2 or dmg_amt >= hitpoints, screen_flash([255, 0, 0,255], 4), if(dmg_amt = 2, screen_flash([255, 0, 0,200], 3), screen_flash([255, 0, 0,70], 2)))"

		player_specific_damage_response="def() null()"
		#virtual - use to handle player-specific stuff like frogatto spitting out his bellyfull

	[/properties]
    [tmp]
        left=0
        right=0
        lookup_time=0
		time_last_hit=0

		scripted_target_x="null()"
		scripted_target_facing="null()"
		scripted_move_callback="null()"

		#this is used when falling to tell if we've been standing for
		#two consecutive cycles, in which case we go into a standing frame.
		last_standing_cycle=-1
    [/tmp]
    [consts]
		posthit_invicibility_period=100    
    [/consts]
    [vars]
     achievement_kill_chain=[[null,-1000], [null,-2000], [null,-3000], [null,-4000], [null,-4000], [null,-5000], [null,-6000], [null,-7000], [null,-8000], [null,-9000], [null,-10000], [null,-11000], [null,-12000], [null,-13000], [null,-14000], [null,-15000]]
    [/vars]

	on_end_hurt_anim="animation('stand')"

	on_handle_move_script="
	   if(abs(midpoint_x - tmp.scripted_target_x) < 10,
		  if(abs(tmp.scripted_target_facing) = 1 and facing != tmp.scripted_target_facing,
		  [set(control_lock, if(tmp.scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))],

		  [set(control_lock, null()),
		   set(me.tmp.scripted_target_x, null()),
		   set(me.tmp.scripted_target_facing, null()),
		   set(me.tmp.scripted_move_callback, null()),
		   tmp.scripted_move_callback]),
	   
		[set(control_lock, if(tmp.scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))])"

	timer_frequency=2
    on_timer="[
#handle ending of invincibility#
	    if((cycle - vars.time_last_hit)/2 <= 50 and (cycle - vars.time_last_hit)/2 > 10, set(solid_dimensions_in, ['player', 'common', 'boss'])),
		if(not is_invincible_posthit,
		    [if(underwater and water_object.consts.damage,
				[add(hitpoints, -water_object.consts.damage), display_hurt_visuals(),
				 set(vars.time_last_hit, cycle)]),
			set(alpha,255)])]"

	on_ctrl_jump="if(is_standing and (not (animation in ['interact', 'fall', 'jump'])), [
    animation('jump'),
    set(velocity_x, velocity_x + velocity_x/2),
    if(ctrl_down and is_standing_on_platform,
        [set(fall_through_platforms, 10),
        set(velocity_y, velocity_y + jump_power/10)],
        [set(velocity_y, -jump_power),
        add(velocity_x, velocity_x/2)])])"
	on_ctrl_up="[
	if(abs(velocity_x) < 100 and is_standing, map(filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 'obj', [set(tmp.interacting_with, obj), fire_event(obj, 'interact')]))]"

	on_start_interact="[animation('interact'), set(tmp.fired_talk, 0)]"
	on_interacting="if(tmp.interacting_with and tmp.fired_talk = 0, [set(tmp.fired_talk, 1), fire_event(tmp.interacting_with, 'talk')])"

	on_end_interact_anim="animation('stand')"



### error condition handling:
	
	#if the player gets 'stuck' in a narrow gap, this gets them out by
	#automatically making them jump
	on_stuck="if(not underwater, if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -vars.jump_power), add(velocity_x, if(facing=1, 300, -300))))"

	#if we change our solid dimensions -- i.e. try to come back from being hurt, and we can't because 
	#we're on top of another solid object, then we take more damage
	on_change_solid_dimensions_fail="if(not is_invincible_posthit,
	                    [add(hitpoints, -1), set(vars.time_last_hit, cycle)])"



### damage handling:

	on_surface_damage="[fire_event('collide_damage')]"
	on_collide_damage="[if((not is_invincible), [add(hitpoints, -max(1, surface_damage)), cause_flinch(collide_with), display_hurt_visuals(), set(vars.time_last_hit, cycle), set(solid_dimensions_in, ['player'])])]"

	on_process_jump="if(ctrl_jump, [add(velocity_y, -vars.jump_boost)])"

	#when falling, if we are standing for two consecutive frames, change
	#us to a standing animation.
    on_process_fall="if(is_standing, if(tmp.last_standing_cycle = cycle-1, animation('stand'), set(tmp.last_standing_cycle, cycle)))"

	#check if we end up on a slope in which case we re-calculate our standing.
	on_enter_stand_anim="if(abs(slope_standing_on) > 20, stand(self))"
	on_enter_stand_up_slope_anim="if(slope_standing_on*facing > -20, stand(self))"
	on_enter_stand_down_slope_anim="if(slope_standing_on*facing < 20, stand(self))"

    functions="

	  #Function to do a water-equivalent of standing.#
	  def float(object_type obj)
		animation('swim_side_idle')"
	    
[/prototype]
