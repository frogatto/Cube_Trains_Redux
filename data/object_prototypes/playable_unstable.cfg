[prototype]
	solid_dimensions=player,common,boss
	vehicle=false
	is_human=true

	[properties]
		scripted_move_to_x="def(target_x, target_facing, callback)
		                    [
		                    set(me.tmp.scripted_target_x, target_x),
							set(me.tmp.scripted_target_facing, target_facing),
							set(me.tmp.scripted_move_callback, callback),
							fire_event(me, 'handle_move_script')
							]
		                    "
		get_hit_by="def(collide_with) [
	  	            if(me.tmp.time_last_hit and (abs(me.tmp.time_last_hit - me.cycle) < 100) or collide_with.vars.damage <= 0, [],
				    [add(me.hitpoints, -if(collide_with, collide_with.vars.damage, 1)),
					 set(me.tmp.time_last_hit, me.cycle),
					 set(solid_dimensions_in, [me.vars.team]),
					 set(me.animation, 'hurt')
					 ])]"
	[/properties]
    [tmp]
        left=0
        right=0
        lookup_time=0
		time_last_hit=0

		scripted_target_x="null()"
		scripted_target_facing="null()"
		scripted_move_callback="null()"
    [/tmp]
    [vars]
     achievement_kill_chain=[[null,-1000], [null,-2000], [null,-3000], [null,-4000], [null,-4000], [null,-5000], [null,-6000], [null,-7000], [null,-8000], [null,-9000], [null,-10000], [null,-11000], [null,-12000], [null,-13000], [null,-14000], [null,-15000]]
    [/vars]

	on_change_animation_failure="[animation(previous_animation)]"
	
	#if the player gets 'stuck' in a narrow gap, this gets them out by
	#automatically making them jump
	on_stuck="if(not underwater, [animation('jump'), add(velocity_y, -vars.jump_power)])"

	#if we change our solid dimensions -- i.e. try to come back from being
	#hurt, and we can't because we're on top of another solid object, then
	#we take more damage
	on_change_solid_dimensions_fail="[add(hitpoints, -1), set(tmp.time_last_hit, cycle)]"


	on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)], [set(green, 100), set(blue, 100)])"
	on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"
	on_end_hurt_anim="animation('stand')"

	on_handle_move_script="
	   if(abs(midpoint_x - tmp.scripted_target_x) < 10,
		  if(abs(tmp.scripted_target_facing) = 1 and facing != tmp.scripted_target_facing,
		  [set(control_lock, if(tmp.scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))],

		  [set(control_lock, null()),
		   set(me.tmp.scripted_target_x, null()),
		   set(me.tmp.scripted_target_facing, null()),
		   set(me.tmp.scripted_move_callback, null()),
		   tmp.scripted_move_callback]),
	   
		[set(control_lock, if(tmp.scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))])"

	timer_frequency=2
    on_timer="[
#handle ending of invincibility#
	    if((cycle - tmp.time_last_hit)/2 = 50, set(solid_dimensions_in, ['player', 'common', 'boss'])),
		if(is_blinking_invincible(self), set(alpha,(wave(cycle*300)+1000)/10 + 100),
		    [if(underwater and water_object.consts.damage,
				[add(hitpoints, -water_object.consts.damage),
				 set(tmp.time_last_hit, cycle)]),
			set(alpha,255)])]"

	on_ctrl_jump="if(is_standing and (not (animation in ['interact'])), [
    animation('jump'),
    set(velocity_x, velocity_x + velocity_x/2),
    if(ctrl_down and is_standing_on_platform,
        [set(fall_through_platforms, 10),
        set(velocity_y, velocity_y + jump_power/10)],
        [set(velocity_y, velocity_y - jump_power),
        add(velocity_x, velocity_x/2)])])"
	on_ctrl_up="[
	if(abs(velocity_x) < 100 and is_standing, map(filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 'obj', [set(tmp.interacting_with, obj), fire_event(obj, 'interact')]))]"

	on_start_interact="[animation('interact'), set(tmp.fired_talk, 0)]"
	on_interacting="if(tmp.interacting_with and tmp.fired_talk = 0, [set(tmp.fired_talk, 1), fire_event(tmp.interacting_with, 'talk')])"

	on_end_interact_anim="animation('stand')"

	##Damage handlers:
			# If we get hit, it's important that we're only hit once by an attack.  Each attacker keeps a list of what they've already hit to make sure that doesn't happen.  This checks/populates that list as appropriate.  The attacker is responsible for clearing the list as appropriate.
			# we also have a primitive window of 3 seconds of post-hit invincibility here for all sources of damage
	on_collide_object_body=" if(collide_with_area in ['attack', 'heat'] and collide_with.vars.team != vars.team and collide_with.vars.damage > 0,
		if((not is_invincible(self)),
        [
			add(hitpoints, -collide_with.vars.damage),
            animation('hurt'),
			set(solid_dimensions_in, ['player']),
            set(velocity_y,-1000),
            set(velocity_x,400 * collide_with.facing),
            set(tmp.time_last_hit, cycle)
        ],

        #avoiding being hit due to being invincible. if we have a shield,
         we make it flash#
         if(tmp.shield, fire_event(tmp.shield, 'flash'))
        ),

			#see if we're colliding with another object's interact area, in which case
			 we set it so we can interact with them.#
			if(collide_with_area = 'interact', set(can_interact, 2))
)"

	on_enter_jump_anim="[set(tmp.jump_began,cycle)]"

	on_process_jump="[if(ctrl_jump, [add(velocity_y, -vars.jump_boost+(vars.jump_boost_decay* (cycle - tmp.jump_began)))]),if(velocity_y > 0,animation('fall'))]"
    on_process_fall="if(is_standing, animation('stand'))"

	#check if we end up on a slope in which case we re-calculate our standing.
	on_enter_stand_anim="if(abs(slope_standing_on) > 20, stand(self))"
	on_enter_stand_up_slope_anim="if(slope_standing_on*facing > -20, stand(self))"
	on_enter_stand_down_slope_anim="if(slope_standing_on*facing < 20, stand(self))"

    functions="
	  #Function to test if frogatto is invincible.#
	  def is_invincible(object_type obj)
	  	if(obj.invincible or obj.level.in_dialog or obj.tmp.time_last_hit and (abs(obj.tmp.time_last_hit - obj.cycle) < 100), 1, 0);
	  
	  #Function to test if frogatto is blinking due to being invincible#
	  def is_blinking_invincible(object_type obj)
	  	if(obj.tmp.time_last_hit and (abs(obj.tmp.time_last_hit - obj.cycle) < 100), 1, 0);

	  #Function to do a water-equivalent of standing.#
	  def float(object_type obj)
		animation('swim_side_idle')"
	    
[/prototype]
