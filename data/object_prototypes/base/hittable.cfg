[prototype]
	[properties]
	hurt_velocity_y=-800
	hurt_velocity_x=400
	get_hit_by="def(collide_with) if(not (me in collide_with.tmp.already_hit), [
				set(collide_with.tmp, 'already_hit', collide_with.tmp.already_hit + [me]),
				if(collide_with.vars.damage > consts.armor,
				  [
				   if(me.hitpoints > collide_with.vars.damage,
				    [
				      if(collide_with.vars.damage <= consts.flinch_threshold,
						schedule(4, [set(me.green, 255), set(me.blue, 255)]),
					    set(me.animation, 'hurt')),
				      set(me.green, 100), set(me.blue, 100)
					]),
				   set(me.hitpoints, me.hitpoints - collide_with.vars.damage)
				  ]),
				if(collide_with.vars.damage > consts.flinch_threshold and me.hurt_velocity_y, set(me.velocity_y,(me.hurt_velocity_y))),
				if(collide_with.vars.damage > consts.flinch_threshold and me.hurt_velocity_x, set(me.velocity_x, ((me.hurt_velocity_x * collide_with.facing + collide_with.velocity_x/2)*collide_with.mass*if(collide_with.attack_force, collide_with.attack_force, 100))/(me.mass*100)))])"
	[/properties]

	on_collide_object_body="
		  if(collide_with.vars.team != vars.team and collide_with_area = 'attack', get_hit_by(collide_with))"
	
	on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
	on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"

	mass=5
	
[/prototype]
