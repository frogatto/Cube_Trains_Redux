[prototype]
	[consts]
		flinch_threshold=3
	[/consts]

	[properties]
	hurt_velocity_y=-400
	hurt_velocity_x=200
	attack_knockback=0
	attack_damage=0
	damage_cooldown=0
	
	get_hit_by="def(collide_with) execute(me, [
						if((not is_invincible_posthit) and (collide_with.attack_damage > 0) and (collide_with.attack_damage > consts.armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[flash_color(collide_with),handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])"
					  
	flash_color="def(collide_with) execute(me, if(collide_with.attack_damage < me.hitpoints,
					[schedule(4, [set(me.green, 255), set(me.blue, 255)]), set(me.animation, 'hurt'), set(me.green, 100), set(me.blue, 100)]))"
		# this is NOT just an optimization;  units that insta-die from being hurt may not have a hurt anim.


	handle_flinch="def(collide_with) 
			execute(me, if(collide_with.attack_damage > consts.flinch_threshold, [add(me.velocity_x,me.hurt_velocity_x), add(me.velocity_y,me.hurt_velocity_y)]))"

	handle_damage="def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))"
			
	handle_knockback="def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))"
	 
	handle_damage_type="def(collide_with) null() #virtual#"
		# sole caveat is an inability to make monsters immune to a given damage type;  the most we can do is add-back the damage taken; they'll still flinch.  If we want that, we'll change the logic.
	
	is_invincible_posthit="if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)"
	[/properties]


	on_collide_object_body="if(collide_with.team != team, if(collide_with_area = 'attack', get_hit_by(collide_with)))"
	
	on_hurtflicker="if(green = 100,[set(green, 255), set(blue, 255)],[set(green, 100), set(blue, 100)])"
	on_leave_hurt_anim="[set(green, 255), set(blue, 255)]"


### error condition handling:
	on_change_solid_dimensions_fail="fire_event('solidity_fail')"
	on_change_animation_failure="fire_event('solidity_fail')"

	on_solidity_fail="if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1,60),
			   resolve_solid(me,2,-1,250),
			   resolve_solid(me,-2,-1,250),
			   resolve_solid(me,0,-1,500),
			   set(tmp.in_solidity_fail, 0)
			  ])"

	on_add_object_fail="[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]"



	[tmp]
		time_last_hit=0
	[/tmp]
	mass=5
	
[/prototype]
