[prototype]
	zorder=-2

	[editor_info]
		category=props
		help="If the destination level and door are not set, this will be non-interactive
		scenery.  Locking this door is trivial - place the 'padlock' atop it, and it will
		autodetect the presence of the lock, and also any interactions with 'padlock_key's,
		correctly unlocking only for the appropriate color."
		[var]
		name=dest_level
		type=level
		[/var]
		[var]
		name=dest_door
		type=label
		info=dest_level
		[/var]
	[/editor_info]
	
	[properties]
		locks="filter(level.chars, 'char', char.type = 'padlock' and abs(distance(context.me, char)) < 30)"
		test_locks="def(key)	map(locks, 'lock', 
								if(lock.variations = key.variations, 
									[fire_event(lock, 'unlock'), 
										if(level.player.vars.swallowed = key,empty_belly(),remove_object(key))])) where empty_belly = def() [set(level.player.variations, []), set(level.player.vars.swallowed, null())]"
	[/properties]

	on_interact="
		if(locks, if(level.player.vars.swallowed, test_locks(level.player.vars.swallowed)), fire_event('open'))"
		
	on_open="[
			if(cycle > 20,sound('DoorOpen.ogg')),
			animation('open'),
			set(vars.player_opened, cycle),
			fire_event(level.player, 'start_interact')
		]"
	on_enter="[if(vars.player_opened and dest_level and dest_door, teleport(dest_level, dest_door, 'iris')),
	           [ schedule(60,set(animation, 'close')),set(vars.player_opened,null())] ]"
	           
	on_collide_object="
		test_locks(collide_with)"

	on_end_open_anim="animation('ajar')"
	on_end_normal_anim="animation('normal')"
	on_end_ajar_anim="animation('ajar')"
	on_end_close_anim="[animation('normal'),sound('DoorShut.ogg')]"
[/prototype]




