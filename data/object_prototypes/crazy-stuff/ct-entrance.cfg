[prototype]
	prototype=ct-track
	zsub_order = 10
	[vars]
		group=['ground', 'track', 'brace']
		encloses=1
		track=0
		frequency=20
		save_val=[5,0,4,[0,0]] #arrival freq 5, no offset, 4 cars/train.
		save_val_edit = 0
		spawning = 0
		editable=0
	[/vars]
	
	[properties]
			message = "#(x%y+y)%y#
				'Arrival Frequency: {vars.save_val[0]}/10s' + if(sve = 0, ' {selector}', '') + '\n  ' + 
				  if(vars.save_val[0] != 0, '(One every {500/vars.save_val[0]} frames.)', '(Only recieves trains.)') + '\n' +
				'Phase Offset: {save_val[1]}/100' + if(sve = 1, ' {selector}', '') + '\n' + 
				'Train Length: {save_val[2]} cars' + if(sve = 2, ' {selector}', '') + '\n' + 
				('Tracks: {opt[save_val[3][0]]}, {opt[0=save_val[3][1]]}' where opt = ['Producer', 'Consumer']) + if(sve = 3, ' {selector}', '')# + '\n' +
				'Reversed: {save_val[4]}' + if(sve = 4, ' {selector}', '')#
				where selector = 'Ð¤' 
				where sve = vars.save_val_edit"
				
			change_save_val = "def(val) switch(vars.save_val_edit, 
				0, set(vars.save_val, list_replace_elements(vars.save_val, 0, [ceil(vars.save_val[0]+val, 0)])),
				1, set(vars.save_val, list_replace_elements(vars.save_val, 1, [((vars.save_val[1]+val*10)%100+100)%100])),
				2, set(vars.save_val, list_replace_elements(vars.save_val, 2, [ceil(vars.save_val[2]+val, 0)])),
				3, set(vars.save_val, list_replace_elements(vars.save_val, 3, [if(not vars.save_val[3][0], [1, vars.save_val[3][1]], [0=vars.save_val[3][0], 0=vars.save_val[3][1]])])),
				4, set(vars.save_val, list_replace_elements(vars.save_val, 4, [not vars.save_val[4]])),
				debug('change_save_val error in {self.type}. Index {vars.save_val_edit} is not registered.'))"
				
			additionalPlacementRequirementsMet="def(chars) {'ok' -> 1}"
	[/properties]
	
	on_create = "add(level.player.vars.entrances, [self])"
	on_remove = "[set(level.player.vars.entrances, filter(level.player.vars.entrances, 'lpve', lpve != context.self)), remove_object(self)]"
	
	xon_start_spawn = "[
		#schedule(1+500/vars.save_val[0]*vars.save_val[1]/100.0, fire_event('tspawn')),
		debug(self.type, 'started'),
		set(spawning, 1),
		#map(trains, 'train', if((train.reversed = train.track) != spawn_reversed,# This seems to fail for [producer, producer].#
			[set(train.vars.target_branch, vars.branch),
			set(train.z, self.zorder),
			add_object(train),
			])),
		] where trains = map([0,1], 'side', object('ct-train-simple-cargo', self.x, self.y, 0, {'on_track' -> self, 'track' -> side, 'reversed' -> save_val[3][side], 'offset' -> 50}))"
		
	on_start_spawn = "[
		set(train.vars.target_branch, self.vars.branch),
		set(train.z, self.zorder),
		set(train.on_track, self),
		set(train.track, if(self.vars.spawn_track, 1, 0)), #boolean, must be filtered like this, don't know why#
		#set(train.reversed, 0),#
		add_object(train),
		
		] where train = object('ct-train-simple-cargo', self.x, self.y, 0, {'offset' -> 50})"
		
	on_stop_spawn = "[
		debug(self.type, 'stopping'),
		set(spawning, 0),
		]"
		
	on_tspawn = "if(spawning, [
		schedule(500/vars.save_val[0], fire_event('tspawn')),
		debug(cycle),
		])"
		
	on_train_enter = "[
		set(arg.z, self.zorder),
		if(arg.vars.target_branch = vars.branch, [
			swallow_event(),
			fire_event(level.player, 'train_home', arg),
			set(ps.midpoint_x, arg.midpoint_x), 
			set(ps.midpoint_y, arg.midpoint_y), 
			add_object(ps),
			] where ps = object('ct-train-home-effect', x, y, facing),
			[
			level.player.train_crashed(self, 'Wrong line!'),
			]),
		schedule(10, remove_object(arg)),
		]"
	
	on_ctrl_select = "set(save_val_edit, (save_val_edit+1)%size(save_val))"
[/prototype]