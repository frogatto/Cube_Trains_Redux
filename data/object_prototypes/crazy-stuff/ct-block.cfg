[prototype]
	zorder=0
	zsub_order="10"
	
	[properties]
		setToGrid = "def(crd) [ #takes a three-integer list, and sets screen position based on those.#
			set(self.x, lpfc[0]),
			set(self.y, lpfc[1]),
			set(self.z, lpfc[2]),
			set(self.vars.location, crd),
			] where lpfc = level_position_from_coordinate(crd)"
		level_position_from_coordinate="def(crd) [
			level.player.width*(crd[0]+crd[1]),
			level.player.height*(-crd[0]+crd[1])-level.player.tall*crd[2],
			crd[2]-crd[0]+crd[1]]"
		
		at_position = "at_coord(vars.location)"
		at_coord = "def(coord) filter(level.chars, 'lch', lch.vars.location = coord and lch != context.self)"
		applyRotate = "def(delta, dest) if(vars.cw and vars.ccw, 
			[	fire_event(self, 'remove'), 
				robj.setToGrid(dest),
				robj.set_branch(self.vars.branch),
				add_object(robj),
			]	where robj = object(if(delta < 0, vars.cw, vars.ccw)), 
			[	#debug('Didn`t rotate {self.type}.'),#
				setToGrid(dest)
			])"
			
		set_alpha	= "def(val) map(objs, 'obj', set(obj.alpha,	val)) where objs = vars.overlays + [self]"
		set_bright	= "def(val) map(objs, 'obj', [	set(obj.green, val),
													set(obj.red, val),
													set(obj.blue, val)]) where objs = vars.overlays + [self]"
		set_branch 	= "def(val) 0"	#only ct-tracks can do this#
		
		message = ""				#displayed by the cursor
		change_save_val = "def(val) 0"
		
		neighbours = "map(range(location[0]-1, location[0]+2), 'one', #Returns objects in a 3Â³ area surrounding self, and possibly including self.#
			map(range(location[1]-1, location[1]+2), 'two', 
				map(range(location[2]-1, location[2]+2), 'three', 
					filter(level.chars, 'lch', lch.vars.location = [one, two, three])
					)
				)
			)"
			
		additionalPlacementRequirementsMet="def(location) 1"	#For placing a piece in-game. Override if needed in objects.#
		placementRequirementsMet="def(location)					#Ground rules for placing a piece. Use the above for specifying special rules.#
			additionalPlacementRequirementsMet(location)"
		
		groups_at="def(location, offset) flatten(map(at_coord(list_add(location, offset)), 'ac', ac.vars.group))"
				
		additionalBlocks="def(pos,additional,subtractional) []"	#{'id' -> 'object id', 'pos' -> relative location[, 'tick' -> int, 'method' -> string]} - A list of objects to add before trying to add the current object.#
			
	[/properties]
	
	[vars]
		location = [0,0,0]
		height = 124 #124
		width = 216 #216
		tall = 124 #124
		group=['block']
		overlays=[]
		save_val=0
		branch='normal'		#'branch' as in 'branch of track'. Normal is Grey.
		
		#On placement:
		blocksToAdd = []	
		groupsToRemove = []	#A list of groups to remove from the object's location.
		requiredGroups = []	#{'group' -> 'group name', pos -> relative location} - Any object in group at loc will be removed. For example, walls would remove shrubbery, but not vice-versa.
	[/vars]
	
	[consts]
		#Directional values for neighbouring tiles.
		ne = [ width, -height]
		se = [ width,  height]
		sw = [-width,  height]
		nw = [-width, -height]
	[/consts]
	
	[vars]
		location = [0,0,0]
	[/vars]
	
	on_create = "fire_event('overlay')"
	
	on_done_create="map(vars.overlays, 'over', set(over.alpha, self.alpha))"
	
	on_move = "[map(overlays, 'rem', remove_object(rem)), fire_event('overlay')]"
	
	on_remove = "map(overlays + [self], 'rem', remove_object(rem))"

	[base:animation]
		id=grey
		duration=1000000
	[/animation]
[/prototype]