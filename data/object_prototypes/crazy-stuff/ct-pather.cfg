{#This prototype grants the object carrying it the findPath function. Note that this isn't cached, because it'll be invalidated when we rotate the game.
properties: {
	getTargets: "def(nowAt, lookingFor, exclude) #nowAt: The location to start the search from. Used for proximity. (not implimented yet) lookingFor is a list of services to search the utils for. First service to match wins, so order matters. Optional 'exclude', a list of locations to exclude from the search.#
		flatten(
			map(lookingFor, 'service', 
				filter(level.player.vars.ped_utils, 'util', service in transform(util.services, v.id) and (not util.vars.location in exclude)) 
			)
		)",
	calculatePath: "def(to, from) #Returns a path to to from optional from.#
		debug_fn(rough, {'complete': 0, 'tiles': []})
		where rough = _calculatePathRough(0)",
		
	_calculatePathRough: "def(to, from, tested) 
		'hi mom'
		",
	},
}