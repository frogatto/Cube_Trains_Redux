[prototype]
	prototype = player_input, ct-block
	reverse_global_vertical_zordering=yes
	zsub_order = "9"
	
	[properties]
		_findStringIndex = def(index, target) if(pieces[index] = target, index, _findStringIndex(index+1, target))
		select_piece = "def(delta) if(is_int(delta), [
			set(self.vars.piece_selected, newIndex), 
			debug(str(pieces[newIndex].type) + ' now selected.')
			] where newIndex = if(rangefive < 0, size(pieces)-1, rangefive) 
			where rangefive = (piece_selected+delta)%size(pieces),
			[debug('Got string for index no.{_findStringIndex(0, delta)}.'),
			set(self.vars.piece_selected, _findStringIndex(0, delta)),
			]
			)"
			
		getRotateZ = "def(crd, delta) [-1*delta*crd[1], delta*crd[0], crd[2]]" #Crd gets rotated by 90 degrees cw or ccw. Delta is Â±1.#
			
		rotate_view = "def(delta) [map(filter(level.chars, 'lc', lc.location), 'obj', 
				obj.applyRotate(delta, self.getRotateZ(obj.location, delta))),
			fire_event(self, 'render_depth'),
			set(self.vars.limits, {	#rotate the limits of the level, to match up with the new level data#
				'max' -> best_between(rotmax, rotmin, def(a,b) a>b),
				'min' -> best_between(rotmin, rotmax, def(a,b) a<b)
				}
				where rotmin = self.getRotateZ(self.vars.limits.min, delta)
				where rotmax = self.getRotateZ(self.vars.limits.max, delta)),
			]"
				
		render_depth = "def(new_loc_, steps) 
			map(range(steps+1), 'step', schedule(step, 
				map(play_objs, 'pob', [	#Apply alpha above and darken below for sense of depth.#
					pob.set_alpha((-1 + new_loc[2] - pob.vars.location[2])*200+255),
					pob.set_bright(255+step+(pob.vars.location[2] - new_loc[2])*step+0) where step = 40,
			])) where new_loc = [new_loc_[0], new_loc_[1], ((new_loc_[2] * 1.0) * (step)  + (vars.location[2] * 1.0) * (steps - step))/steps]
			) where play_objs = filter(level.chars, 'ch', ch.vars.location and ch != context.self)"
				
		applyRotate = "def(delta, dest) [setToGrid(dest), 
			schedule(0, fire_event('snap_cursor')),
			set(tmp.camOffset, [level.camera_position[0]-self.x, level.camera_position[1]-self.y])
			]"
			
		block_value = "def(objs, value) 0"
				
		train_crashed = "def(train, error) 0"
		
		move = "def(delta) [ #Delta is a list containing x,y,z movement.#
			setToGrid(loc),
			if(delta[2] != 0, render_depth(loc, 4))
			] where loc = list_add(vars.location, delta)"
			
		additionalPlacementRequirementsMet = "def(obj, at_pos) debug_fn('{self.type}`s additionalPlacementRequirementsMet blindly OKd a {obj.type} at {at_pos}. This function should be overridden to surpress this message.', 1)"
	[/properties]
	
	[vars]
		toLoad = "#Due to a parsing bug, you must manually enclose the limits map in brackets. For this reason, you must manually add the map limits map.#
		{'limits'->({'max'->[3,1,3],'min'->[-3,-2,-1]}),'map'->[['ct-block-5',[-1,0,-2],0,'normal'],['ct-block-5',[1,0,-2],0,'normal'],['ct-block-5',[1,1,-2],0,'normal'],['ct-block-5',[-1,1,-2],0,'normal'],['ct-block-5',[-2,0,-2],0,'normal'],['ct-block-5',[-2,1,-2],0,'normal'],['ct-block-5',[-2,-1,-2],0,'normal'],['ct-block-5',[-1,-1,-2],0,'normal'],['ct-block-5',[1,-1,-2],0,'normal'],['ct-block-5',[2,1,-2],0,'normal'],['ct-block-5',[1,1,-1],0,'normal'],['ct-block-5',[1,0,-1],0,'normal'],['ct-block-5',[1,-1,-1],0,'normal'],['ct-block-5',[1,0,0],0,'normal'],['ct-block-5',[-1,-1,-1],0,'normal'],['ct-block-5',[-1,0,-1],0,'normal'],['ct-block-5',[-1,0,0],0,'normal'],['ct-block-5',[1,0,1],0,'normal'],['ct-block-5',[1,-1,2],0,'normal'],['ct-block-5',[1,0,2],0,'normal'],['ct-block-5',[-1,0,2],0,'normal'],['ct-block-5',[-1,-1,2],0,'normal'],['ct-block-5',[-1,-1,0],0,'normal'],['ct-block-5',[1,1,0],0,'normal'],['ct-block-5',[0,-1,-2],0,'normal'],['ct-block-5',[0,0,-2],0,'normal'],['ct-block-5',[0,1,-2],0,'normal'],['ct-block-5',[-1,1,2],0,'normal'],['ct-block-5',[1,-1,3],0,'normal'],['ct-block-5',[1,1,3],0,'normal'],['ct-block-5',[-1,1,3],0,'normal'],['ct-block-5',[-1,0,3],0,'normal'],['ct-block-5',[-1,-1,3],0,'normal'],['ct-block-5',[3,1,-2],0,'normal'],['ct-block-5',[-3,1,-2],0,'normal'],['ct-block-5',[-3,0,-2],0,'normal'],['ct-block-5',[-3,-1,-2],0,'normal'],['ct-block-5',[-1,-2,-1],0,'normal'],['ct-block-5',[-3,-2,-2],0,'normal'],['ct-block-5',[-2,-2,-2],0,'normal'],['ct-block-5',[0,-2,-1],0,'normal'],['ct-block-5',[1,-2,-1],0,'normal'],['ct-block-5',[2,-2,-1],0,'normal'],['ct-block-5',[3,-2,-1],0,'normal'],['ct-block-5',[-1,-2,0],0,'normal'],['ct-block-5',[0,-2,0],0,'normal'],['ct-block-5',[1,-2,0],0,'normal'],['ct-block-5',[3,-2,1],0,'normal'],['ct-block-5',[2,-2,1],0,'normal'],['ct-block-5',[1,-2,1],0,'normal'],['ct-block-5',[0,-2,1],0,'normal'],['ct-block-5',[-1,-2,1],0,'normal'],['ct-block-5',[-3,-2,2],0,'normal'],['ct-block-5',[-2,-2,2],0,'normal'],['ct-block-5',[-1,-2,2],0,'normal'],['ct-block-5',[0,-2,2],0,'normal'],['ct-block-5',[1,-2,2],0,'normal'],['ct-block-5',[2,-2,2],0,'normal'],['ct-block-5',[3,-2,2],0,'normal'],['ct-block-5',[1,-2,3],0,'normal'],['ct-block-5',[0,-2,3],0,'normal'],['ct-block-5',[-1,-2,3],0,'normal'],['ct-block-5',[-2,-2,3],0,'normal'],['ct-block-5',[-3,-2,3],0,'normal'],['ct-block-5',[2,1,-1],0,'normal'],['ct-block-5',[3,1,-1],0,'normal'],['ct-block-5',[3,0,-2],0,'normal'],['ct-block-5',[3,-1,-2],0,'normal'],['ct-block-5',[2,-1,-2],0,'normal'],['ct-block-5',[2,0,-2],0,'normal'],['ct-block-5',[2,0,-1],0,'normal'],['ct-block-5',[3,0,-1],0,'normal'],['ct-block-5',[3,-1,-1],0,'normal'],['ct-block-5',[2,-1,-1],0,'normal'],['ct-block-5',[0,-1,-1],0,'normal'],['ct-windows-large-5',[-1,0,1],0,'normal'],['ct-windows-large-5',[-1,-1,1],0,'normal'],['ct-windows-large-5',[2,-2,0],0,'normal'],['ct-windows-large-5',[3,-2,0],0,'normal'],['ct-windows-large-5',[1,0,3],0,'normal'],['ct-tunnel-3',[3,-2,3],[5,0,4,[0,0]],'red'],['ct-tunnel-3',[2,-2,3],[5,0,4,[0,0]],'green'],['ct-tunnel-3',[-2,-2,0],[5,0,4,[0,0]],'green'],['ct-tunnel-3',[-3,-2,0],[5,0,4,[0,0]],'red'],['ct-block-5',[-2,-2,-1],0,'normal'],['ct-block-5',[-3,-2,-1],0,'normal'],['ct-block-5',[-1,-2,-2],0,'normal'],['ct-block-5',[0,-2,-2],0,'normal'],['ct-block-5',[1,-2,-2],0,'normal'],['ct-block-5',[2,-2,-2],0,'normal'],['ct-block-5',[3,-2,-2],0,'normal'],['ct-ground-support-5',[1,1,1],0,'normal'],['ct-ground-support-5',[1,-1,0],0,'normal'],['ct-windows-large-5',[-3,-2,1],0,'normal'],['ct-windows-large-5',[-2,-2,1],0,'normal']],'name'->'level name here'}
		"
				
		keymode = 'dvorak'
		keymap = "{
			'dvorak' -> (
				{'low' -> 305,		#ctrl right#
				'high' -> 'z',
				'help' -> 282,		#f1#
				'debug2' -> 283,	#f2#
				'print' -> 284,		#f3#	#also saves to registry#
				'load' -> 285,		#f4#	#loads from registry#
				'place' -> 306,		#ctrl left#
				'unplace' -> 'q',
				'select left' -> '<',
				'select right' -> ';',
				'rotate cw' -> '\\',
				'rotate ccw' -> '-',
				'trains' -> ' ',
				'block value up' -> 'o',
				'block value down' -> 'a',
				'block alt' -> 'e',
				'next branch' -> 314,	#menu key#
				}
			), 'qwerty' -> (
				{'low' -> 305,
				'high' -> '/',
				'help' -> 282,
				'print' -> 284,
				'load' -> 285,
				'place' -> 306,
				'unplace' -> 'x',
				'select left' -> '\\',
				'select right' -> 'z',
				'rotate cw' -> ';',
				'rotate ccw' -> ~'~,	#'\'' doesn't work#
				'trains' -> ' ',
				
				#...#
				
				'next branch' -> '314',	#menu key#
				}
			), 'azerty' -> (
				{'low' -> 305,
				'high' -> ':',
				'help' -> 282,
				'debug2' -> 283,
				'print' -> 284,
				'load' -> 285,
				'place' -> 306,
				'unplace' -> 'x',
				'select left' -> '<',
				'select right' -> 'w',
				'rotate cw' -> ')',
				'rotate ccw' -> '=',
				'trains' -> ' ',
				'block value up' -> 's',
				'block value down' -> 'q',
				'block alt' -> 'd',
				'next branch' -> 314,
				}
			),
		}"
		
		mutually_exclusive_groups = "[	#Each list is one of items which fill each other's slots, and cannot be placed at the same location. For instance, you can (and must) have supports in the same location as tracks, but you can't have blocks and track in the same location, nor can you have supports and blocks in the same location.#
			['track', 'ground'],
			['support', 'ground'],
		]"
		
		pieces = "['ct-block-5']"
		piece_selected = 0
		groups = ['ground', 'support', 'track',]
		entrances = []
		target_value = 'normal'
		
		limits = {'max' -> [1,1,1], 'min' -> [-1,-1,-1]}
		name = 'level name here'
	[/vars]
	
	on_create = "[%PROTO%,
		set(fragment_shaders, ['fragment.gl']), set(vertex_shaders, ['vertex.gl']), set(shader.dst_factor, 500),
		setToGrid(location),
		fire_event('quick_load'),
		[	set(text_ctrl.vars.txt, '[]'),
			add_object(text_ctrl),
			set(vars.text_ctrl, text_ctrl),
			set(level.focus, [text_ctrl]),
		]	where text_ctrl = object('text_controller', x, y, 0, {'centered'->0}),
		render_depth(loc, 1),
		]"
	
	on_ctrl_left = "move([0,-1,0])"
	on_ctrl_right = "move([0,1,0])"
	on_ctrl_up = "move([1,0,0])"
	on_ctrl_down = "move([-1,0,0])"
	on_ctrl_high = "move([0,0,1])"
	on_ctrl_low = "move([0,0,-1])"

	on_print = "[
		debug('saved, serialized map: \n\n{str(saved)}\n\n'),
		set(registry.ct_quicksave, saved),
		] where saved = {'name' -> vars.name, 'map' -> saveMap}
		where saveMap = map(filter(level.chars, 'ch', (not ch.consts.nosave) and find(ch.vars.group, 'grp', grp in context.groups)), 'saves', [saves.type, saves.location, saves.vars.save_val, saves.branch])" 
		
	on_quick_load = "[
		map(toLoad.map, 'data', [	obj.setToGrid(data[1]), 
									set(obj.vars.save_val, data[2]), 
									obj.set_branch(data[3]), 
									add_object(obj)] 
									where obj = object(data[0])),
		map(filter(level.chars, 'ch', find(ch.vars.group, 'grp', grp in context.groups)), 'old', fire_event(old, 'remove')),
		fire_event('render_depth'),
		debug('Loaded {size(toLoad.map)} objects.'),
		if(toLoad['limits'], set(vars.limits, toLoad['limits'])),
		set(vars.name, toLoad['name']),
		]"
		
	on_render_depth = "render_depth(vars.location, 1)"
	
	on_place = "
			if((not find(obj.vars.group, 'og', og in existing_groups)) and additionalPlacementRequirementsMet(obj, vars.location)
					where existing_groups = flatten(
						map(ap, 'a', 
							a.vars.group
							+ map(a.vars.group, 'subA', 
								filter(vars.mutually_exclusive_groups, 'meg', 
									subA.vars.group in meg))))
						where ap = at_position,
			[	obj.setToGrid(vars.location), 
				obj.set_branch(vars.target_value),
				add_object(obj)]
			)	where obj = object(pieces[piece_selected])"
			
	on_unplace = "if(canidate, fire_event(canidate, 'remove'))
		where canidate = find(at_position, 'ap', object(pieces[piece_selected]).vars.group = ap.vars.group)"
		
	on_trains = "[swallow_event(),
		set(vars.happy_entrances, []),
		map(filter(level.chars, 'lc', 'train' in lc.vars.group), 'trains', remove_object(trains)),
		map(vars.entrances, 've', fire_event(ve, 'start_spawn')),
# 		if(trains_are_running, 
 			map(vars.entrances, 've', fire_event(ve, 'stop_spawn')),
 			map(vars.entrances, 've', fire_event(ve, 'start_spawn'))),
 		set(trains_are_running, not trains_are_running),
#		]"
		
	on_process = "[#debug('zsub_orders: ', self.zsub_order, map(at_position, 'ap', ap.zsub_order)),#
		%PROTO%,
		
		#make the cursor pulse#
		set(shader.dst_factor, wave(level.cycle*15)/5 + 1000),		
		set(shader.src_factor, 1000 - (wave(level.cycle*15)/5 + 1000)),
		
		set(keys_already_down, keys),	#deal with key input#
		[	#if(size(nkd) > 0, debug(nkd)),#
			if(kmap['low']			in nkd, fire_event('ctrl_low')),
			if(kmap['high']			in nkd, fire_event('ctrl_high')),
			if(kmap['help']			in nkd, fire_event('help')),
			if(kmap['debug2']		in nkd, fire_event('debug2')),
			if(kmap['load']			in nkd, [set(toLoad, registry.ct_quicksave), fire_event('quick_load')]),
			if(kmap['print']		in nkd, fire_event('print')),
			if(kmap['place']		in nkd, fire_event('place')),
			if(kmap['unplace']		in nkd, fire_event('unplace')),
			if(kmap['select left']	in nkd, select_piece(1)),
			if(kmap['select right']	in nkd, select_piece(-1)),
			if(kmap['rotate cw']	in nkd, rotate_view(1)),
			if(kmap['rotate ccw']	in nkd, rotate_view(-1)),
			if(kmap['trains']		in nkd, fire_event('trains')),
			if(kmap['block alt']	in nkd, map(at_pos, 'blk', fire_event('block_alt', blk))),
			if(kmap['next branch']	in nkd, next_branch),
			
			if(257 in nkd, [set(keymode, 'dvorak'), debug('now using dvorak keymap')]),
			if(258 in nkd, [set(keymode, 'qwerty'), debug('now using qwerty keymap')]),
			if(259 in nkd, [set(keymode, 'azerty'), debug('now using azerty keymap')]),
			if( 27 in nkd, abort()), #Well, it doesâ¦#
		]	where nkd = filter(keys, 'key', not key in keys_already_down),
		if(kmap['block value up']	in keys and cycle%5 = 1, block_value(at_pos, 1)),
		if(kmap['block value down']	in keys and cycle%5 = 1, block_value(at_pos, -1)),
		text_ctrl.set_text(	'pos: {str(location)}\n' +
						   ('Adding a {colour}{pieces[piece_selected]}.\n' where colour = if(vars.target_value = 'normal', '', vars.target_value + ' ')) + 
							if(size(at_pos) > 0, 'Here: ', '') + list_cat(map(at_pos, 'ap', ap.type + ' (z{str(ap.zorder)}) ')) + '\n' + 
							list_cat(map(at_pos, 'ap', if(mess, mess+' ', '') where mess = ap.message))),
		set(text_ctrl.x, midpoint_x-125), set(text_ctrl.y, y+260),
	]	where keys = key_input
		where kmap = keymap[keymode]
		where at_pos = at_position" #Replace at_position with [] to disable text.
		
	on_snap_cursor = "[set(level.camera_position, [self.x*100+tmp.camOffset[0]*100,self.y*100+tmp.camOffset[1]*100]), debug('offsets: ' + tmp.camOffset)]"
	
	on_train_home = "if(not arg in vars.happy_entrances, [set(vars.happy_entrances, totalHome), if(size(totalHome) = 4, debug('You WON! :D '))] where totalHome = vars.happy_entrances + [arg])"
	
	on_srv1 = "rotate_view(1)"
	on_srvl1 = "rotate_view(-1)"
	on_rotate_piece_cw = "if(next, select_piece(next)) where next = object(pieces[piece_selected]).vars.ccw"	#The rotation vars were originally designed for camera rotation, so the var is the inverse of what we would normally do when just rotating it.
	on_rotate_piece_ccw = "if(next, select_piece(next)) where next = object(pieces[piece_selected]).vars.cw"
	
	[object_type]
		id=dbg
		z=150
		always_active = true
		
		on_end_anim="animation('normal')"
		
		on_create = "set(z, 150)"
		
		[animation]
			id=normal
			image=experimental/spiderbot.png
			#rect=87,65,94,72
			#pad=0
			rect=89,67,89,67
			pad=5#9
			frames=2
			duration=5
		[/animation]
	[/object_type]
[/prototype]