[prototype]
	prototype = player_input, ct-block
	reverse_global_vertical_zordering=yes
	zsub_order = "9"
	
	[properties]
		_findStringIndex = def(index, target) if(pieces[index] = target, index, _findStringIndex(index+1, target))
		select_piece = "def(delta) if(is_int(delta), [
			set(self.vars.piece_selected, newIndex), 
			debug(str(pieces[newIndex].type) + ' now selected.'),
			preview.safeAnimation(pieces[newIndex].type),
			] where newIndex = if(rangefive < 0, size(pieces)-1, rangefive) 
			where rangefive = (piece_selected+delta)%size(pieces),
			[set(self.vars.piece_selected, newIndex),
			preview.safeAnimation(pieces[newIndex].type),
			] where newIndex = _findStringIndex(0, delta),
			)"
			
		getRotateZ = "def(crd, delta) [-1*delta*crd[1], delta*crd[0], crd[2]]" #Crd gets rotated by 90 degrees cw or ccw. Delta is Â±1.#
			
		rotate_view = "def(delta) [map(filter(level.chars, 'lc', lc.location), 'obj', 
				obj.applyRotate(delta, self.getRotateZ(obj.location, delta))),
			fire_event(self, 'render_depth'),
			set(self.vars.limits, {	#rotate the limits of the level, to match up with the new level data#
				'max' -> best_between(rotmax, rotmin, def(a,b) a>b),
				'min' -> best_between(rotmin, rotmax, def(a,b) a<b)
				}
				where rotmin = self.getRotateZ(self.vars.limits.min, delta)
				where rotmax = self.getRotateZ(self.vars.limits.max, delta)),
			]"
				
		render_depth = "def(new_loc_, steps) 
			map(range(steps+1), 'step', schedule(step, 
				map(play_objs, 'pob', [	#Apply alpha above and darken below for sense of depth.#
					pob.set_alpha((-1 + new_loc[2] - pob.vars.location[2])*200+255),
					pob.set_bright(255+step+(pob.vars.location[2] - new_loc[2])*step+0) where step = 40,
			])) where new_loc = [new_loc_[0], new_loc_[1], ((new_loc_[2] * 1.0) * (step)  + (vars.location[2] * 1.0) * (steps - step))/steps]
			) where play_objs = filter(level.chars, 'ch', ch.vars.location and ch != context.self)"
				
		applyRotate = "def(delta, dest) [setToGrid(dest), 
			schedule(0, fire_event('snap_cursor')),
			set(self.vars.entrances, []),
			set(tmp.camOffset, [level.camera_position[0]-self.x, level.camera_position[1]-self.y])
			]"
			
		block_value = "def(objs, value) 0"
				
		train_crashed = "def(train, error) debug('{train.type} crashed: {error}')"
		
		move = "def(delta) if(is_in_limits(loc),[
			setToGrid(loc),
			if(delta[2] != 0, render_depth(loc, 4))
			]) where loc = list_add(vars.location, delta)"
			
		additionalPlacementRequirementsMet = "def(obj, at_pos) debug_fn('{self.type}`s additionalPlacementRequirementsMet blindly OKd a {obj.type} at {at_pos}. This function should be overridden to surpress this message.', 1)"
		
		level_coordinate_from_position = "def(pos) [ #Return the 3D point that the mouse is pointing to. Derived from setToGrid(), defined in ct-block.cfg.#
			pos[0]/level.player.width-(pos[1]/level.player.height+self.vars.location[2]+pos[0]/level.player.width)/2,
			(pos[1]/level.player.height+self.vars.location[2]+pos[0]/level.player.width)/2,
			self.vars.location[2]]"
				
		get_placement_delta = "def(toAdd, toRemove, _previous, add_first) #things to add[, things to remove[, the results of a previous call to this function[, add_first = 0(false) or 1(true)]]]#
			if(not size(toAdd),
				if(not size(toRemove),
					{},
					if(objToRemove,
						map_merge({'remove' -> [objToRemove]}, get_placement_delta(toAdd, toRemove[1:size(toRemove)]+next_remove_call, map_merge(previous, {'remove' -> [objToRemove]})))
						where next_remove_call = map(neighbours_to_remove, 'nf', {'pos' -> nf.vars.location, 'group' -> nf.vars.group[0]})
						where neighbours_to_remove = filter(
							flatten(transform([[0,0,0], [1,0,0], [-1,0,0], [0,1,0], [0,-1,0], [0,0,1], [0,0,-1]],
								potentially_at_coord(list_add(toRemove[0].pos, v), newChars)
							)),
							'potential_failure',
							(not potential_failure.placementRequirementsMet(newChars).ok)),
						get_placement_delta(toAdd, toRemove[1:size(toRemove)], previous)
						) where newChars = potential_chars([{'remove' -> [objToRemove]}, previous])
						where objToRemove = find(potentially_at_coord(toRemove[0].pos, potential_chars([previous])), 'obj', toRemove[0].group in obj.vars.group and (obj.vars.editable or context.vars.edit_all))
					),
				if(can_add_current_object.ok,
					list_reduce([{'add' -> [current_object]}, childrens_results, peers_results, clear_results], def(u,v) map_merge(u,v)),
					map_merge({'error' -> [can_add_current_object.error]}, peers_results)
					) where can_add_current_object = current_object.placementRequirementsMet(
						potential_chars([childrens_results, peers_results, previous, clear_results]))
					where childrens_results = get_placement_delta( #We'll only return these results if we can place the current piece. That way, we can place an object and have it fail without placing all it's scenery too. (Build, _then_ wallpaper.)#
						transform(
							current_object.additionalBlocks(level.chars), 
							{'id' -> v['id'], 'pos' -> list_add(toAdd[0]['pos'], v['pos'])}),
						[],
						list_reduce([{'add' -> [current_object]}, peers_results, previous, clear_results], def(u,v) map_merge(u,v)))
					where clear_results = get_placement_delta([],transform(current_object.incompatible_ghost_groups, {'group' -> v, 'pos' -> toAdd[0]['pos']}), peers_results #Change peers_results to [] if things start acting up along the lines of 'why won't this object place'.#)
					where peers_results = get_placement_delta(toAdd[1:size(toAdd)], toRemove, previous) #These will be returned as they can probably be placed independantly of the current piece.#
					where current_object = object(toAdd[0]['id'], x,y,1,{'location' -> toAdd[0]['pos']})
				)
			where previous = if(_previous, _previous, {})"
			
		potential_chars = "def(_delta)
			if(not delta['remove'], 
				level.chars + delta['add'], 
				filter(level.chars + delta['add'], 'newCharacter', not newCharacter in delta['remove'])
				)
			where delta = list_reduce(_delta, def(u,v) map_merge(u,v))"
		
		apply_placement_delta = "def(delta) [
			map(filter(delta['add'], 'da', not da in delta['remove'] or da.consts.meta), 'toAdd', [
				add_object(toAdd),
				toAdd.setToGrid(toAdd.location),
				toAdd.set_branch(vars.target_value),
				]),
			map(filter(delta['remove'], 'dr', dr in level.chars and (not dr.consts.meta)), 'toRemove', [
				remove_object(find(level.chars, 'lc', lc = toRemove)),
				]),
			if(delta['add'] or delta['remove'], 
				addUndo({	'redo' -> def() apply_placement_delta(delta),
							'undo' -> def() apply_placement_delta({'add' -> delta['remove'], 'remove' -> delta['add']})})),
			if(delta.error, 0)]"
			
		place_piece = "def(position) [
			if(size(filter(pd['add'], 'pds', not pds.consts.meta)) > 0,
				[set(self.vars.redo, []),
				apply_placement_delta(pd)],
				debug('Error: ' + list_cat_delim(pd['error'], ' '))),
			schedule(10, fire_event('render_depth')),
			] where pd = get_placement_delta(
				[{'id' -> pieces[piece_selected], 'pos' -> list_add(position, block_offset(pieces[piece_selected]))}], 
				[]#transform(object(pieces[piece_selected]).incompatible_ghost_groups, {'group' -> v, 'pos' -> position})#)"
			
		remove_piece = "def(position) [
			apply_placement_delta(pd),
			] where pd = get_placement_delta([], transform(object(pieces[piece_selected]).incompatible_ghost_groups, {'group' -> v, 'pos' -> list_add(position, block_offset(pieces[piece_selected]))}))"
			
		block_offset = "def(position) 
			switch(position,
				'ct-legs-5', [0,0,-1],
				'ct-ground-support-5', [0,0,-1],
				'ct-bridge-tiny-19', [0,0,-1],
				'ct-bridge-tiny-37', [0,0,-1],
				[0,0,0])"
		
		#action: {'unfn' -> function[, 'undat' -> unfn arg 'refn' -> function, 'redat' -> refn arg]} - Here, we execute 'undo' to undo the original action, and 'redo' to undo the undo.
		addUndo = "def(action) if(action.undo, add(self.vars.undo, [action]))" 
		addRedo = "def(action) if(action.redo, add(self.vars.redo, [action]), set(self.vars.redo, []))"
		
		undo = "if(size(self.vars.undo), [
			action.undo(),
			set(self.vars.undo, self.vars.undo[0:size(self.vars.undo)-1]),
			addRedo(action),
			] where action = self.vars.undo[size(self.vars.undo)-1])"
			
		redo = "if(size(self.vars.redo), [
			action.redo(),
			set(self.vars.redo, self.vars.redo[0:size(self.vars.redo)-1]),
			#Don't add to undo here because when we called the redo function it already added an undo.#
			] where action = self.vars.redo[size(self.vars.redo)-1])"
			
# 		permutate_mutually_exclusive_groups = " #This was written because sometimes MEGs are only keyed from the first item, and sometimes they're keyed from all items. It's a bad hack, so it should be fixed later!#
# 			set(self.vars.mutually_exclusive_groups,
# 				flex_sum(transform(self.vars.mutually_exclusive_groups, _permutate_meg(v)), []))"
# 		_permutate_meg = "def(meg) transform(range(size(meg)), meg[v:size(meg)] + meg[0:v])"
		
		toggle_erase_mode = "set_erase_mode(not self.vars.erase_button.pressed)"
		set_erase_mode = "def(target) [
			self.vars.erase_button.set_to(target),
			debug('The preview`s previous green level was {vars.preview.green}.'),
			if(target, [
				set(vars.preview.green, 50),
				set(vars.preview.blue,  50),
				],[
				set(vars.preview.green, 255),
				set(vars.preview.blue,  255),
				])
			]" 
	[/properties]
	
	[vars]
		#Due to a parsing bug, you must manually enclose the limits map in brackets. For this reason, you must manually add the map limits map.#
		toLoad = {}
				
		keymode = 'dvorak'
		keymap = "{
			'dvorak' -> ({
				'block alt' -> 'e',
				'block value down' -> 'a',
				'block value up' -> 'o',
				'debug2' -> 283,		#f2#
				'help' -> 282,			#f1#
				'high' -> 'z',
				'load' -> 285,			#f4#	#loads from registry#
				'low' -> 305,			#ctrl right#
				'next branch' -> 314,	#menu key#
				'place' -> 306,			#ctrl left#
				'print' -> 284,			#f3#	#also saves to registry#
				'redo' -> 'r',
				'rotate ccw' -> '-',
				'rotate cw' -> '\\',
				'select left' -> '<',
				'select right' -> ';',
				'trains' -> ' ',
				'undo' -> 'u',
				'unplace' -> 'q',
				}
			), 'qwerty' -> ({
				'help' -> 282,
				'high' -> '/',
				'load' -> 285,
				'low' -> 305,
				'place' -> 306,
				'print' -> 284,
				'rotate ccw' -> ~'~,	#'\'' doesn't work#
				'rotate cw' -> ';',
				'select left' -> '\\',
				'select right' -> 'z',
				'trains' -> ' ',
				'unplace' -> 'x',
				'undo' -> 'u',
				'redo' -> 'r',
				
				#...#
				
				'next branch' -> '314',	#menu key#
				}
			), 'azerty' -> ({
				'block alt' -> 'd',
				'block value down' -> 'q',
				'block value up' -> 's',
				'debug2' -> 283,
				'help' -> 282,
				'high' -> ':',
				'load' -> 285,
				'low' -> 305,
				'next branch' -> 314,
				'place' -> 306,
				'print' -> 284,
				'rotate ccw' -> '=',
				'rotate cw' -> ')',
				'select left' -> '<',
				'select right' -> 'w',
				'trains' -> ' ',
				'unplace' -> 'x',
				'undo' -> 'u',
				'redo' -> 'r',
				}
			),
		}"
		
		pieces = "['ct-block-5']"
		piece_selected = 0
		groups = ['ground', 'support', 'track', ] #to be saved#
		entrances = []
		target_value = 'normal'
		
		mutually_exclusive_groups = "[	#Each list contains groups of which one element cannot co-exist, in the same tile, with any other element. For instance, you can (and must) have supports in the same location as tracks, but you can't have blocks and track in the same location, nor can you have supports and blocks in the same location. To be clear, a group is a way of gathering objects of a common behaviour, not a 'slot' which can be independantly filled.#
			['track', 'ground'], #It seems objects not first in the list occasionally are checked against the list. I don't know why.#
			['center', 'ground', 'support'],
			['center', 'ground', 'track'],
		]
		+ transform([1,3,7,9], ['edge {v}', 'ground']) #The way that edge n's work is, again, related to the numpad. Edge is on the ground.#
		+ transform([2,4,6,8], ['edge {v}', 'ground', 'support'])
		+ transform(range(1,10), ['awning {v}', 'support'])
		+ transform(range(1,10), ['awning {v}', 'ground'])
		"
		
		limits = {'max' -> [1,1,1], 'min' -> [-1,-1,-1]}
		name = 'level name here'
		group=['player']
	[/vars]
	
	[consts]
		nosave = 1
	[/consts]
	
	on_debug2 = "transform(['MEGs:'] + mutually_exclusive_groups, debug(v))"
	
	on_create = "[%PROTO%,
		#permutate_mutually_exclusive_groups,#
		set(fragment_shaders, ['fragment.gl']), set(vertex_shaders, ['vertex.gl']), set(shader.dst_factor, 500),
		setToGrid(location),
		fire_event('quick_load'),
		[	set(text_ctrl.vars.txt, '[]'),
			add_object(text_ctrl),
			set(vars.text_ctrl, text_ctrl),
			set(level.focus, [text_ctrl]),
		]	where text_ctrl = object('text_controller', x, y, 0, {'centered'->0}),
		[	set(vars.preview, pre),
			add_object(pre),
		]	where pre = object('ct-preview'),
		render_depth(loc, 1),
		
		add_object(button.nav1),
			set(button.nav1.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.nav1.vars.offset, [margin*2-button.nav3.img_w, margin+4]),
			set(button.nav1.parent, button.nav3),
			set(button.nav1.vars.action, fire_event(self, 'ctrl_down')),
		add_object(button.nav3),
			set(button.nav3.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.nav3.vars.offset, margin),
			set(button.nav3.vars.action, fire_event(self, 'ctrl_right')),
		add_object(button.nav7),
			set(button.nav7.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.nav7.vars.offset, [margin*2-button.nav3.img_w, margin*2-button.nav3.img_h]),
			set(button.nav7.parent, button.nav3),
			set(button.nav7.vars.action, fire_event(self, 'ctrl_left')),
		add_object(button.nav9),
			set(button.nav9.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.nav9.vars.offset, [margin, margin*2-button.nav3.img_h]),
			set(button.nav9.parent, button.nav3),
			set(button.nav9.vars.action, fire_event(self, 'ctrl_up')),
		add_object(button.navl5),
			set(button.navl5.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.navl5.vars.offset, [margin*3-button.nav3.img_w*2, margin+4]),
			set(button.navl5.parent, button.nav3),
			set(button.navl5.vars.action, fire_event(self, 'ctrl_low')),
		add_object(button.navg5),
			set(button.navg5.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.navg5.vars.offset, [margin*3-button.nav3.img_w*2, margin*2-button.nav3.img_h]),
			set(button.navg5.parent, button.nav3),
			set(button.navg5.vars.action, fire_event(self, 'ctrl_high')),
		add_object(button.navccw),
			set(button.navccw.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.navccw.vars.offset, [margin, margin*3-button.nav3.img_h*2]),
			set(button.navccw.parent, button.nav3),
			set(button.navccw.vars.action, fire_event(self, 'srv1')),
		add_object(button.navcw),
			set(button.navcw.vars.reference_anchor, def() button.nav3.getCameraAnchor(3)), 
			set(button.navcw.vars.offset, [margin*2-button.nav3.img_w, margin*3-button.nav3.img_h*2]),
			set(button.navcw.parent, button.nav3),
			set(button.navcw.vars.action, fire_event(self, 'srvl1')),
			
		add_object(button.trains),
			set(button.trains.vars.reference_anchor, def() button.trains.getCameraAnchor(2)), 
			set(button.trains.vars.offset, [0, margin]),
			set(button.trains.vars.action, fire_event(self, 'trains')),
		
		#toolbox buttons, 1st corner.#
		add_object(button.toolbox),
			set(button.toolbox.vars.reference_anchor, def() button.toolbox.getCameraAnchor(1)), 
			set(button.toolbox.vars.offset, [-margin, margin]),
			set(button.toolbox.vars.targets, tools.toolbox),
		add_object(button.toolccw),
			set(button.toolccw.vars.reference_anchor, def() button.nav3.getCameraAnchor(1)), 
			set(button.toolccw.vars.offset, [129 - margin*2 + button.toolccw.img_w, -46]),
			set(button.toolccw.parent, button.toolbox),
			set(button.toolccw.vars.action, fire_event(self, 'rotate_piece_ccw')),
		add_object(button.toolcw),
			set(button.toolcw.vars.reference_anchor, def() button.nav3.getCameraAnchor(1)), 
			set(button.toolcw.vars.offset, [129 - margin, -46]),
			set(button.toolcw.parent, button.toolbox),
			set(button.toolcw.vars.action, fire_event(self, 'rotate_piece_cw')),
		add_object(button.erase),
			set(button.erase.vars.reference_anchor, def() button.nav3.getCameraAnchor(1)), 
			set(button.erase.vars.offset, [129 - margin, -46 - button.erase.img_h + margin]),
			set(button.erase.parent, button.toolbox),
			set(self.vars.erase_button, button.erase),
			
		] where button = {	'nav1' -> object('ct-button-nav-1'), 
							'nav3' -> object('ct-button-nav-3'), 
							'nav7' -> object('ct-button-nav-7'), 
							'nav9' -> object('ct-button-nav-9'), 
							'navl5' -> object('ct-button-nav--5'), 
							'navg5' -> object('ct-button-nav-+5'), 
							'navccw' -> object('ct-button-nav-ccw'), 
							'navcw' -> object('ct-button-nav-cw'),
							'toolbox' -> object('ct-tool-pane'), 
							'toolccw' -> object('ct-button-nav-ccw'), 
							'toolcw' -> object('ct-button-nav-cw'),
							'trains' -> object('ct-button-trains'),
							'erase' -> object('ct-button-erase'),
							}
		where margin = -10"
	
	on_ctrl_left = "move([0,-1,0])"
	on_ctrl_right = "move([0,1,0])"
	on_ctrl_up = "move([1,0,0])"
	on_ctrl_down = "move([-1,0,0])"
	on_ctrl_high = "move([0,0,1])"
	on_ctrl_low = "move([0,0,-1])"

	on_print = "[
		debug('saved, serialized map: \n\n{str(saved)},\n\n'),
		set(registry.ct_quicksave, saved),
		] where saved = {'name' -> vars.name, 'map' -> saveMap}
		where saveMap = map(filter(level.chars, 'ch', (not ch.consts.nosave) and size(ch.vars.group)), 'saves', [saves.type, saves.location, saves.vars.save_val, saves.branch])" 
		
	on_quick_load = "[
		map(toLoad.map, 'data', [	obj.setToGrid(data[1]), 
									set(obj.vars.save_val, data[2]), 
									obj.set_branch(data[3]), 
									add_object(obj)] 
									where obj = object(data[0])),
		map(filter(level.chars, 'ch', find(ch.vars.group, 'grp', grp != 'player')), 'old', fire_event(old, 'remove')),
		fire_event('render_depth'),
		debug('Loaded {size(toLoad.map)} objects.'),
		if(toLoad['limits'], set(vars.limits, toLoad['limits'])),
		set(vars.name, toLoad['name']),
		set(vars.entrances, []),
		set(self.vars.undo, []),
		set(self.vars.undo, []),
		]"
		
	on_render_depth = "render_depth(vars.location, 1)"
		
	on_place = "place_piece(self.vars.location)"
		
	on_unplace = "[remove_piece(self.vars.location)
		]#where pd = get_placement_delta([], [{'obj' -> candidate, 'pos' -> self.vars.location}])
		where candidate = find(at_position, 'ap', object(pieces[piece_selected]).vars.group = ap.vars.group)#"
		
	on_trains = "[swallow_event(),
		set(vars.happy_entrances, []),
		map(filter(level.chars, 'lc', 'train' in lc.vars.group), 'trains', remove_object(trains)),
		map(vars.entrances, 've', fire_event(ve, 'start_spawn')),
# 		if(trains_are_running, 
 			map(vars.entrances, 've', fire_event(ve, 'stop_spawn')),
 			map(vars.entrances, 've', fire_event(ve, 'start_spawn'))),
 		set(trains_are_running, not trains_are_running),
#		]"
		
	on_process = "[%PROTO%, #debug('zsub_orders: ', self.zsub_order, map(at_position, 'ap', ap.zsub_order)),#
		#make the cursor pulse#
		set(shader.dst_factor, wave(level.cycle*15)/5 + 1000),		
		set(shader.src_factor, 1000 - (wave(level.cycle*15)/5 + 1000)),
		
		set(keys_already_down, keys),	#deal with key input#
		[	#if(size(nkd) > 0, debug(nkd)),#
			if(kmap['low']			in nkd, fire_event('ctrl_low')),
			if(kmap['high']			in nkd, fire_event('ctrl_high')),
			if(kmap['help']			in nkd, fire_event('help')),
			if(kmap['debug2']		in nkd, fire_event('debug2')),
			if(kmap['load']			in nkd, [set(toLoad, registry.ct_quicksave), fire_event('quick_load')]),
			if(kmap['print']		in nkd, fire_event('print')),
			if(kmap['place']		in nkd, fire_event('place')),
			if(kmap['unplace']		in nkd, fire_event('unplace')),
			if(kmap['select left']	in nkd, select_piece(1)),
			if(kmap['select right']	in nkd, select_piece(-1)),
			if(kmap['rotate cw']	in nkd, rotate_view(1)),
			if(kmap['rotate ccw']	in nkd, rotate_view(-1)),
			if(kmap['trains']		in nkd, fire_event('trains')),
			if(kmap['block alt']	in nkd, map(at_pos, 'blk', fire_event('block_alt', blk))),
			if(kmap['next branch']	in nkd, next_branch),
			if(kmap['undo']			in nkd, undo),
			if(kmap['redo']			in nkd, redo),
			
			if(257 in nkd, [set(keymode, 'dvorak'), debug('now using dvorak keymap')]),
			if(258 in nkd, [set(keymode, 'qwerty'), debug('now using qwerty keymap')]),
			if(259 in nkd, [set(keymode, 'azerty'), debug('now using azerty keymap')]),
			if( 27 in nkd, abort()), #Well, it doesâ¦#
		]	where nkd = filter(keys, 'key', not key in keys_already_down),
		if(kmap['block value up']	in keys and cycle%5 = 1, block_value(at_pos, 1)),
		if(kmap['block value down']	in keys and cycle%5 = 1, block_value(at_pos, -1)),
		
		text_ctrl.set_text(	'pos: {str(location)}\n' +
						   ('Adding a {colour}{pieces[piece_selected]}.\n' where colour = if(vars.target_value = 'normal', '', vars.target_value + ' ')) + 
							if(size(at_pos) > 0, 'Here: ', '') + list_cat(map(at_pos, 'ap', ap.type + ' (z{str(ap.zorder)}) ')) + '\n' + 
							list_cat(map(at_pos, 'ap', if(mess, mess+' ', '') where mess = ap.message))),
		set(text_ctrl.x, midpoint_x-125), set(text_ctrl.y, y+260),
		
		
		if(not size(vars.monitor_over), [
			#debug_rect(hitbox[0], hitbox[1], hitbox[2], hitbox[3]),#
			vars.preview.setToGrid(
				list_add(
					level_coordinate_from_position([hitbox[0]-45, hitbox[1]-256]),
					block_offset(pieces[piece_selected])
				)
			),
			if(tmp.place_lmb_down,
				if(not 'left' in flatten(ctrl_mice), [ #mouse up over playing field#
					set(tmp.place_lmb_down, 0)]),
				if('left' in flatten(ctrl_mice), [ #and down#
					if(not self.vars.erase_button.pressed,
						place_piece(level_coordinate_from_position([hitbox[0]-45, hitbox[1]-256])),
						remove_piece(level_coordinate_from_position([hitbox[0]-45, hitbox[1]-256])),
						),
					set(tmp.place_lmb_down, 1)])
				),
			if(tmp.place_rmb_down,
				if(not 'right' in flatten(ctrl_mice), [ #mouse up over playing field#
					set(tmp.place_rmb_down, 0)]),
				if('right' in flatten(ctrl_mice), [ #and down#
					remove_piece(level_coordinate_from_position([hitbox[0]-45, hitbox[1]-256])),
					set(tmp.place_rmb_down, 1)])
				),
			
			] where hitbox = sort(hitboxes, length(a[0]+width,(a[1]+height)*1.75,adjusted_mice[0][0],adjusted_mice[0][1]*1.75) < length(b[0]+width,(b[1]+height)*1.75,adjusted_mice[0][0],adjusted_mice[0][1]*1.75))[0]
			where hitboxes = map(offsets, 'offset', [
				m[0]+width *sign(m[0])-m[0]%(width *2)-width +offset[0], #hitbox x#
				m[1]+height*sign(m[1])-m[1]%(height*2)-height+offset[1], #hitbox y#
				width*2,  #hitbox img_x#
				height*2] #hitbox img_y#
				where m = list_add([-offset[0],-offset[1]], adjusted_mice[0])))
			where offsets = [[45,8+if(location[2]%2,height)], [width+45,height+8+if(location[2]%2,height)]],
		
		] where keys = key_input
		where kmap = keymap[keymode]
		where at_pos = at_position" #Replace at_position with [] to disable text.
		
	on_snap_cursor = "[set(level.camera_position, [self.x*100+tmp.camOffset[0]*100,self.y*100+tmp.camOffset[1]*100]), debug('offsets: ' + tmp.camOffset)]"
	
	on_train_home = "if(not arg in vars.happy_entrances, [set(vars.happy_entrances, totalHome), if(size(totalHome) = size(entrances), fire_event('won_level', arg))] where totalHome = vars.happy_entrances + [arg])"
	
	on_srv1 = "rotate_view(1)"
	on_srvl1 = "rotate_view(-1)"
	on_rotate_piece_cw = "if(next, select_piece(next)) where next = object(pieces[piece_selected]).vars.ccw"	#The rotation vars were originally designed for camera rotation, so the var is the inverse of what we would normally do when just rotating it.
	on_rotate_piece_ccw = "if(next, select_piece(next)) where next = object(pieces[piece_selected]).vars.cw"
	
	on_won_level = "debug('A winner is YOU.')"
	
	[object_type]
		id=dbg
		z=150
		always_active = true
		
		on_end_anim="animation('normal')"
		
		on_create = "set(z, 150)"
		
		[animation]
			id=normal
			image=experimental/spiderbot.png
			rect=87,65,94,72
			pad=0
			#rect=89,67,89,67
			#pad=5#9
			frames=2
			duration=5
		[/animation]
	[/object_type]
[/prototype]