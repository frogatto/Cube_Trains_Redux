[prototype]
	prototype=ct-track
	zsub_order = 10
	[vars]
		group=['ground', 'track']
		track=0
		frequency=20
		save_val=[5,0,4] #arrival freq 5, no offset, 4 cars/train.
		save_val_edit = 0
		spawning = 0
	[/vars]
	
	[properties]
			message = "#(x%y+y)%y#
				'Arrival Frequency: {vars.save_val[0]}/10s.' + if(sve = 0, ' {selector}', '') + '\n  ' + 
				  if(vars.save_val[0] != 0, '(One every {500/vars.save_val[0]} frames.)', '(Only recieves trains.)') + '\n' +
				'Phase Offset: {save_val[1]}/100' + if(sve = 1, ' {selector}', '') + '\n' + 
				'Train Length: {save_val[2]} cars.' + if(sve = 2, ' {selector}', '')
				where selector = 'Ф_Ф' 
				where sve = vars.save_val_edit"
				
			change_save_val = "def(val) switch(vars.save_val_edit, 
				0, set(vars.save_val, list_replace_elements(vars.save_val, 0, [ceil(vars.save_val[0]+val, 0)])),
				1, set(vars.save_val, list_replace_elements(vars.save_val, 1, [((vars.save_val[1]+val*10)%100+100)%100])),
				2, set(vars.save_val, list_replace_elements(vars.save_val, 2, [ceil(vars.save_val[2]+val, 0)])),
				debug('change_save_val error in {self.type}. Index {vars.save_val_edit} is not registered.'))"
	[/properties]
	
	on_create = "add(level.player.vars.entrances, [self])"
	
	on_start_spawn = "[
		schedule(1+500/vars.save_val[0]*vars.save_val[1]/100.0, fire_event('tspawn')),
		debug(self.type, 'started'),
		set(spawning, 1),
		]"
		
	on_stop_spawn = "[
		debug(self.type, 'stopping'),
		set(spawning, 0),
		]"
		
	on_tspawn = "if(spawning, [
		schedule(500/vars.save_val[0], fire_event('tspawn')),
		debug(cycle),
		])"
	
	on_ctrl_select = "set(save_val_edit, (save_val_edit+1)%size(save_val))"
[/prototype]