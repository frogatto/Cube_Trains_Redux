[object_type]
id=platform_swaying

	[vars]
	children="[]"
	[/vars]

	[editor_info]
	category=platforms
	help = "A moving platform rigged from ropes."
		[var]
		name=speed
		value=10
		[/var]
		[var]
		name=move_x1
		type=x
		value="x + if(facing < 0, 9, 0)"
		[/var]
		[var]
		name=move_x2
		type=x
		value="x + img_w - if(facing > 0, 9, 0)"
		[/var]
		[var]
		name=move_y1
		type=y
		value="y + img_h - 34"
		[/var]
		[var]
		name=move_y2
		type=y
		value="y + img_h"
		[/var]
		[var]
		name=rope_height
		value="128"
		[/var]
		[var]
		name=stopped
		type=boolean
		value="0"
		[/var]
		[var]
		name=dist
		type=int
		value="0"
		[/var]
		[var]
		name=is_zipline
		type=boolean
		value="0"
		[/var]
	[/editor_info]
	
	[properties]
		pulleyDiameter=18
		sagOffset=15
		topRopeH="pulleyDiameter+sagOffset"
		polarity="sign(vars.move_x2-vars.move_x1)"  #if the platform is flipped, some values need to run in the opposite direction - such as pulley rotation
		
		point1 = "[vars.move_x1, vars.move_y1]"
		point2 = "[vars.move_x2, vars.move_y2]"
		setPos = "def(to) [
			set(vars.knot.midpoint_x, to[0]), 
			set(vars.knot.midpoint_y, to[1]),
			set(left_pulley.midpoint_x, point1[0]),
			set(left_pulley.midpoint_y, point1[1]-sagOffset -pulleyDiameter/2),
			set(left_pulley.rotate, polarity*(sin(vars.dist)+1)/2*180*15),
			set(right_pulley.midpoint_x, point2[0]),
			set(right_pulley.midpoint_y, point2[1]-sagOffset -pulleyDiameter/2),
			set(right_pulley.rotate, polarity*(sin(vars.dist)+1)/2*180*15),
			
			
			top_rope.set_ends(point1[0], point1[1]-topRopeH, point2[0], point2[1]-topRopeH),
			top_rope.set_offset(length(point1[0], point1[1],to[0],to[1])/2),
			left_rope.set_ends(to[0], to[1], point1[0], point1[1]-sagOffset),
			right_rope.set_ends(to[0], to[1], point2[0], point2[1]-sagOffset),
			]"
		pos = "[vars.knot.midpoint_x, vars.knot.midpoint_y]"
		stop = "map(range(steps+1), 'step', schedule(step, set(vars.stopped, 1-(steps-step)/decimal(steps)))) where steps = 100" #Might want to include an if statement to only do this if it'll decrease speed.
		go   = "map(range(steps+1), 'step', schedule(step, set(vars.stopped,   (steps-step)/decimal(steps)))) where steps = 100"
		actBsize="max(abs(vars.move_x1-vars.move_x2),abs(vars.move_y1-vars.move_y2))*2"
	[/properties]
	
	on_start_level="set(activation_border, actBsize)"
	
	on_create = "[
		set(alpha,0),
		set(vars.move_x1, move_x1 - if(facing < 0, 9, 0)),
		set(vars.move_x2, move_x2 - if(facing > 0, 9, 0)),
		set(vars.move_y1, move_y1 - 34),
		set(vars.move_y2, move_y2),
		
		[add_object(obj),
		set(vars.knot, obj)
		] where obj = object('platform_swaying.knot',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		if(1, #here, we'd want to switch based on available types of platform, for now we'll just have one.#
			[add_object(obj),
			set(vars.the_platform, obj)
			] where obj = object('platform_swaying.simple_platform_controller',vars.move_x1,vars.move_y1,facing,{'parent'->me,'activation_border'->actBsize})
		),

		[add_object(obj),
		set(vars.left_pulley, obj)
		] where obj = object('platform_swaying.pulley',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),

		[add_object(obj),
		set(vars.right_pulley, obj)
		] where obj = object('platform_swaying.pulley',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		[add_object(obj),
		set(vars.top_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		[add_object(obj),
		set(vars.left_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		[add_object(obj),
		set(vars.right_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_border'->actBsize}),
		
		if(is_zipline, [set(vars.dist, 95), set(vars.stopped, 1)]),
		]"
		
		
	on_done_create = "set(vars.speed, vars.speed*50/distance(point1, point2))"
	on_process = "[
		add(vars.dist, vars.speed*(1-vars.stopped)),
		setPos(newPos),
		] where newPos = list_add(list_tween(point1, point2, (sin(vars.dist)+1)/2), [0, sqrt(min(distance(pos, point1), distance(pos, point2)))])"
		# list_add gives a new list the size of the first, adding each index/element together piecewise
		# list_tween takes two lists and a %, and returns the value % of the way between every pair of indices between the two lists.
		#   So what's going on here, is that we're using list_tween to determine the "how far" position between the two endpoints (mostly X, but there is some Y, moreso with more tilt), and then to make the rope sag, we're using list_add to compose this with a function that only displaces the rope along Y - and this function is wrapped in a sqrt to make it flush at the ends, and sag only in the middle.
		
	
	on_button_pressed = "go"
	on_button_released = "stop"
	
	[animation]
		id=normal
		image=effects/particles.png
		x=210
		y=166
		w=28
		h=28
		frames=1
		duration=1000
	[/animation]




	[object_type]
	id=knot
	zorder=2
		[animation]
			id=normal
			image=props/rope-platform.png
			rect=81,1,93,13
			frames=1
			duration=1000
		[/animation]
	[/object_type]

	[object_type]
	id=pulley
	zorder=2
		[animation]
			id=normal
			image=props/rope-platform.png
			rect=65,1,77,13
			frames=1
			duration=1000
		[/animation]
	[/object_type]

	[object_type]
	id=simple_platform_controller
	zorder=2

		
		[properties]
			tilt="0"
			basketWobble="sin(cycle*8)*vars.bwmag*0.55"
			parentSpeed="(1.0 - parent.vars.stopped)"
			
			#if the platform is has a very short horizontal path, it looks goofy to have it's sway not shrink proportionally. However, anything more than the 'normal' sway at a width of about 400 would also be bad, so we cap it above that value, and shrink it below it.
			sway_dampener="max(1.0,abs(parent.point1[0] - parent.point2[0])/800.0)"

			#the horizontal offset in pixels, from hanging directly downward.
			sway_x="sway_dampener* parent.polarity * parentSpeed * ((100*sin(vars.inertia/2))+basketWobble/2)"
			setPos="def() [
				vert_rope.set_ends(parent.vars.knot.midpoint_x, parent.vars.knot.midpoint_y, parent.vars.knot.midpoint_x + sway_x, parent.vars.knot.midpoint_y + parent.vars.rope_height),
				
				set(vars.basket.midpoint_x, parent.vars.knot.midpoint_x+sway_x),
				set(vars.basket.midpoint_y, parent.vars.knot.midpoint_y + parent.vars.rope_height),
				set(vars.basket.rotate, parent.polarity * parentSpeed*(-vars.inertia/6.0 + basketWobble))
	
			]"
			decayBasketWobble="def() set(vars.bwmag, max(6.0,decimal(vars.bwmag)*(0.99/1)))"
			setInertia="def() [
						schedule(2, 
						
						set(vars.inertia, 50*(sin(parent.vars.dist- if(parent.vars.is_zipline, -180, 180) *parent.polarity))))
			]"  # if this is a zipline, we want the sway from inertia to kick in at a slightly different phase.  It looks weird if it kicks in as soon in a cycle as it does for a regular platform.
			
			player_is_standing_on_us="if(level.player.standing_on = vars.basket,1,0)"
			not_in_zipline_bottomOut="if(mod(parent.vars.dist-90,360) < 150 or mod(parent.vars.dist-90,360) > 210, 1, 0)"
			not_in_zipline_topOut="if(mod(parent.vars.dist-90,360) > 50 and mod(parent.vars.dist-90,360) < 300, 1, 0)"
			
			
			
			testZipline="def() if(parent.vars.is_zipline,
				[if(player_is_standing_on_us, if(not_in_zipline_bottomOut, [if(mod(parent.vars.dist-90,360) > 180, set(parent.vars.dist,parent.vars.dist - 2*mod(parent.vars.dist-90,180) )),
				if(parent.stopped = 1.0, [parent.go ])], if(parent.stopped = 0.0,parent.stop))),
			
				if((not player_is_standing_on_us), if(not_in_zipline_topOut, if(parent.stopped = 1.0, parent.go), if(parent.stopped = 0.0, parent.stop)) )])"
		[/properties]
	
	on_create="[	
					set(alpha,0),
					set(x,parent.vars.knot.x),
					set(y,parent.vars.knot.y),
					set(vars.bwmag,8.0),
					
					[add_object(obj),
					set(vars.vert_rope, obj)
					] where obj = object('rope_angled_controller'),
					
					[add_object(obj),
					set(vars.basket, obj)
					] where obj = object('platform_swaying.shakebasket',x,y,facing,{'source'->me})
					
			]"
	on_process="[setPos(),setInertia(),decayBasketWobble(),testZipline()]"
		[animation]
			id=normal
			image=effects/particles.png
			x=210
			y=166
			w=28
			h=28
			frames=1
			duration=1000
		[/animation]
		
	[/object_type]

	
	[object_type]		
	id=basket
	platform_area=16,56,47,57
		on_jumped_on="if(level.player.standing_on = me, add(source.vars.bwmag, 10))"
		[animation]
			no_remove_alpha_borders=true
			id=normal
			image=props/rope-platform.png
			rect=0,0,63,63
			frames=1
			duration=1000
		[/animation]
	[/object_type]

	[object_type]		
	id=shakebasket
	zorder=-1
	platform_area=22,86,52,87
		on_jumped_on="if(level.player.standing_on = me, [add(source.vars.bwmag, 10),fire_event(source.parent,'tripped')])"
		
	next_animation="'normal'"
		[animation]
		palettes=forest_graveyard_shift,forest_autumn,forest_decay,forest_clean,forest_verdant
			no_remove_alpha_borders=true
			id=normal
			image=wip/basket-mockup2.png
			rect=75,0,146,99
			frames=11
			reverse=yes
			duration=4
		[/animation]
		[animation]
		palettes=forest_graveyard_shift,forest_autumn,forest_decay,forest_clean,forest_verdant
			no_remove_alpha_borders=true
			id=normal
			image=wip/basket-mockup2.png
			rect=219,0,290,99
			frames=7
			reverse=yes
			duration=4
		[/animation]
	[/object_type]


[/object_type]
